// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mapper/response/service/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/mapper/response/service/interfaces.go -destination=internal/mapper/response/mocks/mock.go
//

// Package mock_responseservice is a generated GoMock package.
package mock_responseservice

import (
	record "MamangRust/paymentgatewaygrpc/internal/domain/record"
	response "MamangRust/paymentgatewaygrpc/internal/domain/response"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCardResponseMapper is a mock of CardResponseMapper interface.
type MockCardResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockCardResponseMapperMockRecorder
	isgomock struct{}
}

// MockCardResponseMapperMockRecorder is the mock recorder for MockCardResponseMapper.
type MockCardResponseMapperMockRecorder struct {
	mock *MockCardResponseMapper
}

// NewMockCardResponseMapper creates a new mock instance.
func NewMockCardResponseMapper(ctrl *gomock.Controller) *MockCardResponseMapper {
	mock := &MockCardResponseMapper{ctrl: ctrl}
	mock.recorder = &MockCardResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardResponseMapper) EXPECT() *MockCardResponseMapperMockRecorder {
	return m.recorder
}

// ToCardResponse mocks base method.
func (m *MockCardResponseMapper) ToCardResponse(card *record.CardRecord) *response.CardResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardResponse", card)
	ret0, _ := ret[0].(*response.CardResponse)
	return ret0
}

// ToCardResponse indicates an expected call of ToCardResponse.
func (mr *MockCardResponseMapperMockRecorder) ToCardResponse(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardResponse", reflect.TypeOf((*MockCardResponseMapper)(nil).ToCardResponse), card)
}

// ToCardResponseDeleteAt mocks base method.
func (m *MockCardResponseMapper) ToCardResponseDeleteAt(card *record.CardRecord) *response.CardResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardResponseDeleteAt", card)
	ret0, _ := ret[0].(*response.CardResponseDeleteAt)
	return ret0
}

// ToCardResponseDeleteAt indicates an expected call of ToCardResponseDeleteAt.
func (mr *MockCardResponseMapperMockRecorder) ToCardResponseDeleteAt(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardResponseDeleteAt", reflect.TypeOf((*MockCardResponseMapper)(nil).ToCardResponseDeleteAt), card)
}

// ToCardsResponse mocks base method.
func (m *MockCardResponseMapper) ToCardsResponse(cards []*record.CardRecord) []*response.CardResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardsResponse", cards)
	ret0, _ := ret[0].([]*response.CardResponse)
	return ret0
}

// ToCardsResponse indicates an expected call of ToCardsResponse.
func (mr *MockCardResponseMapperMockRecorder) ToCardsResponse(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardsResponse", reflect.TypeOf((*MockCardResponseMapper)(nil).ToCardsResponse), cards)
}

// ToCardsResponseDeleteAt mocks base method.
func (m *MockCardResponseMapper) ToCardsResponseDeleteAt(cards []*record.CardRecord) []*response.CardResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardsResponseDeleteAt", cards)
	ret0, _ := ret[0].([]*response.CardResponseDeleteAt)
	return ret0
}

// ToCardsResponseDeleteAt indicates an expected call of ToCardsResponseDeleteAt.
func (mr *MockCardResponseMapperMockRecorder) ToCardsResponseDeleteAt(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardsResponseDeleteAt", reflect.TypeOf((*MockCardResponseMapper)(nil).ToCardsResponseDeleteAt), cards)
}

// ToGetMonthlyAmount mocks base method.
func (m *MockCardResponseMapper) ToGetMonthlyAmount(card *record.CardMonthAmount) *response.CardResponseMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetMonthlyAmount", card)
	ret0, _ := ret[0].(*response.CardResponseMonthAmount)
	return ret0
}

// ToGetMonthlyAmount indicates an expected call of ToGetMonthlyAmount.
func (mr *MockCardResponseMapperMockRecorder) ToGetMonthlyAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetMonthlyAmount", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetMonthlyAmount), card)
}

// ToGetMonthlyAmounts mocks base method.
func (m *MockCardResponseMapper) ToGetMonthlyAmounts(cards []*record.CardMonthAmount) []*response.CardResponseMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetMonthlyAmounts", cards)
	ret0, _ := ret[0].([]*response.CardResponseMonthAmount)
	return ret0
}

// ToGetMonthlyAmounts indicates an expected call of ToGetMonthlyAmounts.
func (mr *MockCardResponseMapperMockRecorder) ToGetMonthlyAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetMonthlyAmounts", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetMonthlyAmounts), cards)
}

// ToGetMonthlyBalance mocks base method.
func (m *MockCardResponseMapper) ToGetMonthlyBalance(card *record.CardMonthBalance) *response.CardResponseMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetMonthlyBalance", card)
	ret0, _ := ret[0].(*response.CardResponseMonthBalance)
	return ret0
}

// ToGetMonthlyBalance indicates an expected call of ToGetMonthlyBalance.
func (mr *MockCardResponseMapperMockRecorder) ToGetMonthlyBalance(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetMonthlyBalance", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetMonthlyBalance), card)
}

// ToGetMonthlyBalances mocks base method.
func (m *MockCardResponseMapper) ToGetMonthlyBalances(cards []*record.CardMonthBalance) []*response.CardResponseMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetMonthlyBalances", cards)
	ret0, _ := ret[0].([]*response.CardResponseMonthBalance)
	return ret0
}

// ToGetMonthlyBalances indicates an expected call of ToGetMonthlyBalances.
func (mr *MockCardResponseMapperMockRecorder) ToGetMonthlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetMonthlyBalances", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetMonthlyBalances), cards)
}

// ToGetYearlyAmount mocks base method.
func (m *MockCardResponseMapper) ToGetYearlyAmount(card *record.CardYearAmount) *response.CardResponseYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetYearlyAmount", card)
	ret0, _ := ret[0].(*response.CardResponseYearAmount)
	return ret0
}

// ToGetYearlyAmount indicates an expected call of ToGetYearlyAmount.
func (mr *MockCardResponseMapperMockRecorder) ToGetYearlyAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetYearlyAmount", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetYearlyAmount), card)
}

// ToGetYearlyAmounts mocks base method.
func (m *MockCardResponseMapper) ToGetYearlyAmounts(cards []*record.CardYearAmount) []*response.CardResponseYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetYearlyAmounts", cards)
	ret0, _ := ret[0].([]*response.CardResponseYearAmount)
	return ret0
}

// ToGetYearlyAmounts indicates an expected call of ToGetYearlyAmounts.
func (mr *MockCardResponseMapperMockRecorder) ToGetYearlyAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetYearlyAmounts", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetYearlyAmounts), cards)
}

// ToGetYearlyBalance mocks base method.
func (m *MockCardResponseMapper) ToGetYearlyBalance(card *record.CardYearlyBalance) *response.CardResponseYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetYearlyBalance", card)
	ret0, _ := ret[0].(*response.CardResponseYearlyBalance)
	return ret0
}

// ToGetYearlyBalance indicates an expected call of ToGetYearlyBalance.
func (mr *MockCardResponseMapperMockRecorder) ToGetYearlyBalance(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetYearlyBalance", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetYearlyBalance), card)
}

// ToGetYearlyBalances mocks base method.
func (m *MockCardResponseMapper) ToGetYearlyBalances(cards []*record.CardYearlyBalance) []*response.CardResponseYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetYearlyBalances", cards)
	ret0, _ := ret[0].([]*response.CardResponseYearlyBalance)
	return ret0
}

// ToGetYearlyBalances indicates an expected call of ToGetYearlyBalances.
func (mr *MockCardResponseMapperMockRecorder) ToGetYearlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetYearlyBalances", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetYearlyBalances), cards)
}

// MockUserResponseMapper is a mock of UserResponseMapper interface.
type MockUserResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockUserResponseMapperMockRecorder
	isgomock struct{}
}

// MockUserResponseMapperMockRecorder is the mock recorder for MockUserResponseMapper.
type MockUserResponseMapperMockRecorder struct {
	mock *MockUserResponseMapper
}

// NewMockUserResponseMapper creates a new mock instance.
func NewMockUserResponseMapper(ctrl *gomock.Controller) *MockUserResponseMapper {
	mock := &MockUserResponseMapper{ctrl: ctrl}
	mock.recorder = &MockUserResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserResponseMapper) EXPECT() *MockUserResponseMapperMockRecorder {
	return m.recorder
}

// ToUserResponse mocks base method.
func (m *MockUserResponseMapper) ToUserResponse(user *record.UserRecord) *response.UserResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserResponse", user)
	ret0, _ := ret[0].(*response.UserResponse)
	return ret0
}

// ToUserResponse indicates an expected call of ToUserResponse.
func (mr *MockUserResponseMapperMockRecorder) ToUserResponse(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserResponse", reflect.TypeOf((*MockUserResponseMapper)(nil).ToUserResponse), user)
}

// ToUserResponseDeleteAt mocks base method.
func (m *MockUserResponseMapper) ToUserResponseDeleteAt(user *record.UserRecord) *response.UserResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserResponseDeleteAt", user)
	ret0, _ := ret[0].(*response.UserResponseDeleteAt)
	return ret0
}

// ToUserResponseDeleteAt indicates an expected call of ToUserResponseDeleteAt.
func (mr *MockUserResponseMapperMockRecorder) ToUserResponseDeleteAt(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserResponseDeleteAt", reflect.TypeOf((*MockUserResponseMapper)(nil).ToUserResponseDeleteAt), user)
}

// ToUsersResponse mocks base method.
func (m *MockUserResponseMapper) ToUsersResponse(users []*record.UserRecord) []*response.UserResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersResponse", users)
	ret0, _ := ret[0].([]*response.UserResponse)
	return ret0
}

// ToUsersResponse indicates an expected call of ToUsersResponse.
func (mr *MockUserResponseMapperMockRecorder) ToUsersResponse(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersResponse", reflect.TypeOf((*MockUserResponseMapper)(nil).ToUsersResponse), users)
}

// ToUsersResponseDeleteAt mocks base method.
func (m *MockUserResponseMapper) ToUsersResponseDeleteAt(users []*record.UserRecord) []*response.UserResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersResponseDeleteAt", users)
	ret0, _ := ret[0].([]*response.UserResponseDeleteAt)
	return ret0
}

// ToUsersResponseDeleteAt indicates an expected call of ToUsersResponseDeleteAt.
func (mr *MockUserResponseMapperMockRecorder) ToUsersResponseDeleteAt(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersResponseDeleteAt", reflect.TypeOf((*MockUserResponseMapper)(nil).ToUsersResponseDeleteAt), users)
}

// MockRoleResponseMapper is a mock of RoleResponseMapper interface.
type MockRoleResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRoleResponseMapperMockRecorder
	isgomock struct{}
}

// MockRoleResponseMapperMockRecorder is the mock recorder for MockRoleResponseMapper.
type MockRoleResponseMapperMockRecorder struct {
	mock *MockRoleResponseMapper
}

// NewMockRoleResponseMapper creates a new mock instance.
func NewMockRoleResponseMapper(ctrl *gomock.Controller) *MockRoleResponseMapper {
	mock := &MockRoleResponseMapper{ctrl: ctrl}
	mock.recorder = &MockRoleResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleResponseMapper) EXPECT() *MockRoleResponseMapperMockRecorder {
	return m.recorder
}

// ToRoleResponse mocks base method.
func (m *MockRoleResponseMapper) ToRoleResponse(role *record.RoleRecord) *response.RoleResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleResponse", role)
	ret0, _ := ret[0].(*response.RoleResponse)
	return ret0
}

// ToRoleResponse indicates an expected call of ToRoleResponse.
func (mr *MockRoleResponseMapperMockRecorder) ToRoleResponse(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleResponse", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToRoleResponse), role)
}

// ToRoleResponseDeleteAt mocks base method.
func (m *MockRoleResponseMapper) ToRoleResponseDeleteAt(role *record.RoleRecord) *response.RoleResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleResponseDeleteAt", role)
	ret0, _ := ret[0].(*response.RoleResponseDeleteAt)
	return ret0
}

// ToRoleResponseDeleteAt indicates an expected call of ToRoleResponseDeleteAt.
func (mr *MockRoleResponseMapperMockRecorder) ToRoleResponseDeleteAt(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleResponseDeleteAt", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToRoleResponseDeleteAt), role)
}

// ToRolesResponse mocks base method.
func (m *MockRoleResponseMapper) ToRolesResponse(roles []*record.RoleRecord) []*response.RoleResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesResponse", roles)
	ret0, _ := ret[0].([]*response.RoleResponse)
	return ret0
}

// ToRolesResponse indicates an expected call of ToRolesResponse.
func (mr *MockRoleResponseMapperMockRecorder) ToRolesResponse(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesResponse", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToRolesResponse), roles)
}

// ToRolesResponseDeleteAt mocks base method.
func (m *MockRoleResponseMapper) ToRolesResponseDeleteAt(roles []*record.RoleRecord) []*response.RoleResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesResponseDeleteAt", roles)
	ret0, _ := ret[0].([]*response.RoleResponseDeleteAt)
	return ret0
}

// ToRolesResponseDeleteAt indicates an expected call of ToRolesResponseDeleteAt.
func (mr *MockRoleResponseMapperMockRecorder) ToRolesResponseDeleteAt(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesResponseDeleteAt", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToRolesResponseDeleteAt), roles)
}

// MockRefreshTokenResponseMapper is a mock of RefreshTokenResponseMapper interface.
type MockRefreshTokenResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenResponseMapperMockRecorder
	isgomock struct{}
}

// MockRefreshTokenResponseMapperMockRecorder is the mock recorder for MockRefreshTokenResponseMapper.
type MockRefreshTokenResponseMapperMockRecorder struct {
	mock *MockRefreshTokenResponseMapper
}

// NewMockRefreshTokenResponseMapper creates a new mock instance.
func NewMockRefreshTokenResponseMapper(ctrl *gomock.Controller) *MockRefreshTokenResponseMapper {
	mock := &MockRefreshTokenResponseMapper{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenResponseMapper) EXPECT() *MockRefreshTokenResponseMapperMockRecorder {
	return m.recorder
}

// ToRefreshTokenResponse mocks base method.
func (m *MockRefreshTokenResponseMapper) ToRefreshTokenResponse(refresh *record.RefreshTokenRecord) *response.RefreshTokenResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRefreshTokenResponse", refresh)
	ret0, _ := ret[0].(*response.RefreshTokenResponse)
	return ret0
}

// ToRefreshTokenResponse indicates an expected call of ToRefreshTokenResponse.
func (mr *MockRefreshTokenResponseMapperMockRecorder) ToRefreshTokenResponse(refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRefreshTokenResponse", reflect.TypeOf((*MockRefreshTokenResponseMapper)(nil).ToRefreshTokenResponse), refresh)
}

// ToRefreshTokenResponses mocks base method.
func (m *MockRefreshTokenResponseMapper) ToRefreshTokenResponses(refreshs []*record.RefreshTokenRecord) []*response.RefreshTokenResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRefreshTokenResponses", refreshs)
	ret0, _ := ret[0].([]*response.RefreshTokenResponse)
	return ret0
}

// ToRefreshTokenResponses indicates an expected call of ToRefreshTokenResponses.
func (mr *MockRefreshTokenResponseMapperMockRecorder) ToRefreshTokenResponses(refreshs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRefreshTokenResponses", reflect.TypeOf((*MockRefreshTokenResponseMapper)(nil).ToRefreshTokenResponses), refreshs)
}

// MockSaldoResponseMapper is a mock of SaldoResponseMapper interface.
type MockSaldoResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockSaldoResponseMapperMockRecorder
	isgomock struct{}
}

// MockSaldoResponseMapperMockRecorder is the mock recorder for MockSaldoResponseMapper.
type MockSaldoResponseMapperMockRecorder struct {
	mock *MockSaldoResponseMapper
}

// NewMockSaldoResponseMapper creates a new mock instance.
func NewMockSaldoResponseMapper(ctrl *gomock.Controller) *MockSaldoResponseMapper {
	mock := &MockSaldoResponseMapper{ctrl: ctrl}
	mock.recorder = &MockSaldoResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaldoResponseMapper) EXPECT() *MockSaldoResponseMapperMockRecorder {
	return m.recorder
}

// ToSaldoMonthBalanceResponse mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoMonthBalanceResponse(ss *record.SaldoMonthSaldoBalance) *response.SaldoMonthBalanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoMonthBalanceResponse", ss)
	ret0, _ := ret[0].(*response.SaldoMonthBalanceResponse)
	return ret0
}

// ToSaldoMonthBalanceResponse indicates an expected call of ToSaldoMonthBalanceResponse.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoMonthBalanceResponse(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoMonthBalanceResponse", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoMonthBalanceResponse), ss)
}

// ToSaldoMonthBalanceResponses mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoMonthBalanceResponses(ss []*record.SaldoMonthSaldoBalance) []*response.SaldoMonthBalanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoMonthBalanceResponses", ss)
	ret0, _ := ret[0].([]*response.SaldoMonthBalanceResponse)
	return ret0
}

// ToSaldoMonthBalanceResponses indicates an expected call of ToSaldoMonthBalanceResponses.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoMonthBalanceResponses(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoMonthBalanceResponses", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoMonthBalanceResponses), ss)
}

// ToSaldoMonthTotalBalanceResponse mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoMonthTotalBalanceResponse(ss *record.SaldoMonthTotalBalance) *response.SaldoMonthTotalBalanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoMonthTotalBalanceResponse", ss)
	ret0, _ := ret[0].(*response.SaldoMonthTotalBalanceResponse)
	return ret0
}

// ToSaldoMonthTotalBalanceResponse indicates an expected call of ToSaldoMonthTotalBalanceResponse.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoMonthTotalBalanceResponse(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoMonthTotalBalanceResponse", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoMonthTotalBalanceResponse), ss)
}

// ToSaldoMonthTotalBalanceResponses mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoMonthTotalBalanceResponses(ss []*record.SaldoMonthTotalBalance) []*response.SaldoMonthTotalBalanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoMonthTotalBalanceResponses", ss)
	ret0, _ := ret[0].([]*response.SaldoMonthTotalBalanceResponse)
	return ret0
}

// ToSaldoMonthTotalBalanceResponses indicates an expected call of ToSaldoMonthTotalBalanceResponses.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoMonthTotalBalanceResponses(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoMonthTotalBalanceResponses", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoMonthTotalBalanceResponses), ss)
}

// ToSaldoResponse mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoResponse(saldo *record.SaldoRecord) *response.SaldoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoResponse", saldo)
	ret0, _ := ret[0].(*response.SaldoResponse)
	return ret0
}

// ToSaldoResponse indicates an expected call of ToSaldoResponse.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoResponse(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoResponse", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoResponse), saldo)
}

// ToSaldoResponseDeleteAt mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoResponseDeleteAt(saldo *record.SaldoRecord) *response.SaldoResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoResponseDeleteAt", saldo)
	ret0, _ := ret[0].(*response.SaldoResponseDeleteAt)
	return ret0
}

// ToSaldoResponseDeleteAt indicates an expected call of ToSaldoResponseDeleteAt.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoResponseDeleteAt(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoResponseDeleteAt", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoResponseDeleteAt), saldo)
}

// ToSaldoResponses mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoResponses(saldos []*record.SaldoRecord) []*response.SaldoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoResponses", saldos)
	ret0, _ := ret[0].([]*response.SaldoResponse)
	return ret0
}

// ToSaldoResponses indicates an expected call of ToSaldoResponses.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoResponses(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoResponses", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoResponses), saldos)
}

// ToSaldoResponsesDeleteAt mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoResponsesDeleteAt(saldos []*record.SaldoRecord) []*response.SaldoResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoResponsesDeleteAt", saldos)
	ret0, _ := ret[0].([]*response.SaldoResponseDeleteAt)
	return ret0
}

// ToSaldoResponsesDeleteAt indicates an expected call of ToSaldoResponsesDeleteAt.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoResponsesDeleteAt(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoResponsesDeleteAt", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoResponsesDeleteAt), saldos)
}

// ToSaldoYearBalanceResponse mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoYearBalanceResponse(ss *record.SaldoYearSaldoBalance) *response.SaldoYearBalanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoYearBalanceResponse", ss)
	ret0, _ := ret[0].(*response.SaldoYearBalanceResponse)
	return ret0
}

// ToSaldoYearBalanceResponse indicates an expected call of ToSaldoYearBalanceResponse.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoYearBalanceResponse(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoYearBalanceResponse", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoYearBalanceResponse), ss)
}

// ToSaldoYearBalanceResponses mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoYearBalanceResponses(ss []*record.SaldoYearSaldoBalance) []*response.SaldoYearBalanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoYearBalanceResponses", ss)
	ret0, _ := ret[0].([]*response.SaldoYearBalanceResponse)
	return ret0
}

// ToSaldoYearBalanceResponses indicates an expected call of ToSaldoYearBalanceResponses.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoYearBalanceResponses(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoYearBalanceResponses", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoYearBalanceResponses), ss)
}

// ToSaldoYearTotalBalanceResponse mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoYearTotalBalanceResponse(ss *record.SaldoYearTotalBalance) *response.SaldoYearTotalBalanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoYearTotalBalanceResponse", ss)
	ret0, _ := ret[0].(*response.SaldoYearTotalBalanceResponse)
	return ret0
}

// ToSaldoYearTotalBalanceResponse indicates an expected call of ToSaldoYearTotalBalanceResponse.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoYearTotalBalanceResponse(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoYearTotalBalanceResponse", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoYearTotalBalanceResponse), ss)
}

// ToSaldoYearTotalBalanceResponses mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoYearTotalBalanceResponses(ss []*record.SaldoYearTotalBalance) []*response.SaldoYearTotalBalanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoYearTotalBalanceResponses", ss)
	ret0, _ := ret[0].([]*response.SaldoYearTotalBalanceResponse)
	return ret0
}

// ToSaldoYearTotalBalanceResponses indicates an expected call of ToSaldoYearTotalBalanceResponses.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoYearTotalBalanceResponses(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoYearTotalBalanceResponses", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoYearTotalBalanceResponses), ss)
}

// MockTopupResponseMapper is a mock of TopupResponseMapper interface.
type MockTopupResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTopupResponseMapperMockRecorder
	isgomock struct{}
}

// MockTopupResponseMapperMockRecorder is the mock recorder for MockTopupResponseMapper.
type MockTopupResponseMapperMockRecorder struct {
	mock *MockTopupResponseMapper
}

// NewMockTopupResponseMapper creates a new mock instance.
func NewMockTopupResponseMapper(ctrl *gomock.Controller) *MockTopupResponseMapper {
	mock := &MockTopupResponseMapper{ctrl: ctrl}
	mock.recorder = &MockTopupResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupResponseMapper) EXPECT() *MockTopupResponseMapperMockRecorder {
	return m.recorder
}

// ToTopupMonthlyAmountResponse mocks base method.
func (m *MockTopupResponseMapper) ToTopupMonthlyAmountResponse(s *record.TopupMonthAmount) *response.TopupMonthAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyAmountResponse", s)
	ret0, _ := ret[0].(*response.TopupMonthAmountResponse)
	return ret0
}

// ToTopupMonthlyAmountResponse indicates an expected call of ToTopupMonthlyAmountResponse.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupMonthlyAmountResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyAmountResponse", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupMonthlyAmountResponse), s)
}

// ToTopupMonthlyAmountResponses mocks base method.
func (m *MockTopupResponseMapper) ToTopupMonthlyAmountResponses(s []*record.TopupMonthAmount) []*response.TopupMonthAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyAmountResponses", s)
	ret0, _ := ret[0].([]*response.TopupMonthAmountResponse)
	return ret0
}

// ToTopupMonthlyAmountResponses indicates an expected call of ToTopupMonthlyAmountResponses.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupMonthlyAmountResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyAmountResponses", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupMonthlyAmountResponses), s)
}

// ToTopupMonthlyMethodResponse mocks base method.
func (m *MockTopupResponseMapper) ToTopupMonthlyMethodResponse(s *record.TopupMonthMethod) *response.TopupMonthMethodResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyMethodResponse", s)
	ret0, _ := ret[0].(*response.TopupMonthMethodResponse)
	return ret0
}

// ToTopupMonthlyMethodResponse indicates an expected call of ToTopupMonthlyMethodResponse.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupMonthlyMethodResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyMethodResponse", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupMonthlyMethodResponse), s)
}

// ToTopupMonthlyMethodResponses mocks base method.
func (m *MockTopupResponseMapper) ToTopupMonthlyMethodResponses(s []*record.TopupMonthMethod) []*response.TopupMonthMethodResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyMethodResponses", s)
	ret0, _ := ret[0].([]*response.TopupMonthMethodResponse)
	return ret0
}

// ToTopupMonthlyMethodResponses indicates an expected call of ToTopupMonthlyMethodResponses.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupMonthlyMethodResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyMethodResponses", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupMonthlyMethodResponses), s)
}

// ToTopupResponse mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponse(topup *record.TopupRecord) *response.TopupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponse", topup)
	ret0, _ := ret[0].(*response.TopupResponse)
	return ret0
}

// ToTopupResponse indicates an expected call of ToTopupResponse.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponse(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponse", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponse), topup)
}

// ToTopupResponseDeleteAt mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponseDeleteAt(topup *record.TopupRecord) *response.TopupResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponseDeleteAt", topup)
	ret0, _ := ret[0].(*response.TopupResponseDeleteAt)
	return ret0
}

// ToTopupResponseDeleteAt indicates an expected call of ToTopupResponseDeleteAt.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponseDeleteAt(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponseDeleteAt", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponseDeleteAt), topup)
}

// ToTopupResponseMonthStatusFailed mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponseMonthStatusFailed(s *record.TopupRecordMonthStatusFailed) *response.TopupResponseMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponseMonthStatusFailed", s)
	ret0, _ := ret[0].(*response.TopupResponseMonthStatusFailed)
	return ret0
}

// ToTopupResponseMonthStatusFailed indicates an expected call of ToTopupResponseMonthStatusFailed.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponseMonthStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponseMonthStatusFailed", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponseMonthStatusFailed), s)
}

// ToTopupResponseMonthStatusSuccess mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponseMonthStatusSuccess(s *record.TopupRecordMonthStatusSuccess) *response.TopupResponseMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponseMonthStatusSuccess", s)
	ret0, _ := ret[0].(*response.TopupResponseMonthStatusSuccess)
	return ret0
}

// ToTopupResponseMonthStatusSuccess indicates an expected call of ToTopupResponseMonthStatusSuccess.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponseMonthStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponseMonthStatusSuccess", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponseMonthStatusSuccess), s)
}

// ToTopupResponseYearStatusFailed mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponseYearStatusFailed(s *record.TopupRecordYearStatusFailed) *response.TopupResponseYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponseYearStatusFailed", s)
	ret0, _ := ret[0].(*response.TopupResponseYearStatusFailed)
	return ret0
}

// ToTopupResponseYearStatusFailed indicates an expected call of ToTopupResponseYearStatusFailed.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponseYearStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponseYearStatusFailed", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponseYearStatusFailed), s)
}

// ToTopupResponseYearStatusSuccess mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponseYearStatusSuccess(s *record.TopupRecordYearStatusSuccess) *response.TopupResponseYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponseYearStatusSuccess", s)
	ret0, _ := ret[0].(*response.TopupResponseYearStatusSuccess)
	return ret0
}

// ToTopupResponseYearStatusSuccess indicates an expected call of ToTopupResponseYearStatusSuccess.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponseYearStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponseYearStatusSuccess", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponseYearStatusSuccess), s)
}

// ToTopupResponses mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponses(topups []*record.TopupRecord) []*response.TopupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponses", topups)
	ret0, _ := ret[0].([]*response.TopupResponse)
	return ret0
}

// ToTopupResponses indicates an expected call of ToTopupResponses.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponses(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponses", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponses), topups)
}

// ToTopupResponsesDeleteAt mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponsesDeleteAt(topups []*record.TopupRecord) []*response.TopupResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponsesDeleteAt", topups)
	ret0, _ := ret[0].([]*response.TopupResponseDeleteAt)
	return ret0
}

// ToTopupResponsesDeleteAt indicates an expected call of ToTopupResponsesDeleteAt.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponsesDeleteAt(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponsesDeleteAt", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponsesDeleteAt), topups)
}

// ToTopupResponsesMonthStatusFailed mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponsesMonthStatusFailed(topups []*record.TopupRecordMonthStatusFailed) []*response.TopupResponseMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponsesMonthStatusFailed", topups)
	ret0, _ := ret[0].([]*response.TopupResponseMonthStatusFailed)
	return ret0
}

// ToTopupResponsesMonthStatusFailed indicates an expected call of ToTopupResponsesMonthStatusFailed.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponsesMonthStatusFailed(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponsesMonthStatusFailed", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponsesMonthStatusFailed), topups)
}

// ToTopupResponsesMonthStatusSuccess mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponsesMonthStatusSuccess(topups []*record.TopupRecordMonthStatusSuccess) []*response.TopupResponseMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponsesMonthStatusSuccess", topups)
	ret0, _ := ret[0].([]*response.TopupResponseMonthStatusSuccess)
	return ret0
}

// ToTopupResponsesMonthStatusSuccess indicates an expected call of ToTopupResponsesMonthStatusSuccess.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponsesMonthStatusSuccess(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponsesMonthStatusSuccess", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponsesMonthStatusSuccess), topups)
}

// ToTopupResponsesYearStatusFailed mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponsesYearStatusFailed(topups []*record.TopupRecordYearStatusFailed) []*response.TopupResponseYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponsesYearStatusFailed", topups)
	ret0, _ := ret[0].([]*response.TopupResponseYearStatusFailed)
	return ret0
}

// ToTopupResponsesYearStatusFailed indicates an expected call of ToTopupResponsesYearStatusFailed.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponsesYearStatusFailed(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponsesYearStatusFailed", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponsesYearStatusFailed), topups)
}

// ToTopupResponsesYearStatusSuccess mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponsesYearStatusSuccess(topups []*record.TopupRecordYearStatusSuccess) []*response.TopupResponseYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponsesYearStatusSuccess", topups)
	ret0, _ := ret[0].([]*response.TopupResponseYearStatusSuccess)
	return ret0
}

// ToTopupResponsesYearStatusSuccess indicates an expected call of ToTopupResponsesYearStatusSuccess.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponsesYearStatusSuccess(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponsesYearStatusSuccess", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponsesYearStatusSuccess), topups)
}

// ToTopupYearlyAmountResponse mocks base method.
func (m *MockTopupResponseMapper) ToTopupYearlyAmountResponse(s *record.TopupYearlyAmount) *response.TopupYearlyAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyAmountResponse", s)
	ret0, _ := ret[0].(*response.TopupYearlyAmountResponse)
	return ret0
}

// ToTopupYearlyAmountResponse indicates an expected call of ToTopupYearlyAmountResponse.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupYearlyAmountResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyAmountResponse", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupYearlyAmountResponse), s)
}

// ToTopupYearlyAmountResponses mocks base method.
func (m *MockTopupResponseMapper) ToTopupYearlyAmountResponses(s []*record.TopupYearlyAmount) []*response.TopupYearlyAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyAmountResponses", s)
	ret0, _ := ret[0].([]*response.TopupYearlyAmountResponse)
	return ret0
}

// ToTopupYearlyAmountResponses indicates an expected call of ToTopupYearlyAmountResponses.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupYearlyAmountResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyAmountResponses", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupYearlyAmountResponses), s)
}

// ToTopupYearlyMethodResponse mocks base method.
func (m *MockTopupResponseMapper) ToTopupYearlyMethodResponse(s *record.TopupYearlyMethod) *response.TopupYearlyMethodResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyMethodResponse", s)
	ret0, _ := ret[0].(*response.TopupYearlyMethodResponse)
	return ret0
}

// ToTopupYearlyMethodResponse indicates an expected call of ToTopupYearlyMethodResponse.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupYearlyMethodResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyMethodResponse", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupYearlyMethodResponse), s)
}

// ToTopupYearlyMethodResponses mocks base method.
func (m *MockTopupResponseMapper) ToTopupYearlyMethodResponses(s []*record.TopupYearlyMethod) []*response.TopupYearlyMethodResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyMethodResponses", s)
	ret0, _ := ret[0].([]*response.TopupYearlyMethodResponse)
	return ret0
}

// ToTopupYearlyMethodResponses indicates an expected call of ToTopupYearlyMethodResponses.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupYearlyMethodResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyMethodResponses", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupYearlyMethodResponses), s)
}

// MockTransactionResponseMapper is a mock of TransactionResponseMapper interface.
type MockTransactionResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionResponseMapperMockRecorder
	isgomock struct{}
}

// MockTransactionResponseMapperMockRecorder is the mock recorder for MockTransactionResponseMapper.
type MockTransactionResponseMapperMockRecorder struct {
	mock *MockTransactionResponseMapper
}

// NewMockTransactionResponseMapper creates a new mock instance.
func NewMockTransactionResponseMapper(ctrl *gomock.Controller) *MockTransactionResponseMapper {
	mock := &MockTransactionResponseMapper{ctrl: ctrl}
	mock.recorder = &MockTransactionResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionResponseMapper) EXPECT() *MockTransactionResponseMapperMockRecorder {
	return m.recorder
}

// ToTransactionMonthlyAmountResponse mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionMonthlyAmountResponse(s *record.TransactionMonthAmount) *response.TransactionMonthAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyAmountResponse", s)
	ret0, _ := ret[0].(*response.TransactionMonthAmountResponse)
	return ret0
}

// ToTransactionMonthlyAmountResponse indicates an expected call of ToTransactionMonthlyAmountResponse.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionMonthlyAmountResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyAmountResponse", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionMonthlyAmountResponse), s)
}

// ToTransactionMonthlyAmountResponses mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionMonthlyAmountResponses(s []*record.TransactionMonthAmount) []*response.TransactionMonthAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyAmountResponses", s)
	ret0, _ := ret[0].([]*response.TransactionMonthAmountResponse)
	return ret0
}

// ToTransactionMonthlyAmountResponses indicates an expected call of ToTransactionMonthlyAmountResponses.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionMonthlyAmountResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyAmountResponses", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionMonthlyAmountResponses), s)
}

// ToTransactionMonthlyMethodResponse mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionMonthlyMethodResponse(s *record.TransactionMonthMethod) *response.TransactionMonthMethodResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyMethodResponse", s)
	ret0, _ := ret[0].(*response.TransactionMonthMethodResponse)
	return ret0
}

// ToTransactionMonthlyMethodResponse indicates an expected call of ToTransactionMonthlyMethodResponse.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionMonthlyMethodResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyMethodResponse", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionMonthlyMethodResponse), s)
}

// ToTransactionMonthlyMethodResponses mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionMonthlyMethodResponses(s []*record.TransactionMonthMethod) []*response.TransactionMonthMethodResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyMethodResponses", s)
	ret0, _ := ret[0].([]*response.TransactionMonthMethodResponse)
	return ret0
}

// ToTransactionMonthlyMethodResponses indicates an expected call of ToTransactionMonthlyMethodResponses.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionMonthlyMethodResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyMethodResponses", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionMonthlyMethodResponses), s)
}

// ToTransactionResponse mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponse(transaction *record.TransactionRecord) *response.TransactionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponse", transaction)
	ret0, _ := ret[0].(*response.TransactionResponse)
	return ret0
}

// ToTransactionResponse indicates an expected call of ToTransactionResponse.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponse(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponse", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponse), transaction)
}

// ToTransactionResponseDeleteAt mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponseDeleteAt(transaction *record.TransactionRecord) *response.TransactionResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponseDeleteAt", transaction)
	ret0, _ := ret[0].(*response.TransactionResponseDeleteAt)
	return ret0
}

// ToTransactionResponseDeleteAt indicates an expected call of ToTransactionResponseDeleteAt.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponseDeleteAt(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponseDeleteAt", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponseDeleteAt), transaction)
}

// ToTransactionResponseMonthStatusFailed mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponseMonthStatusFailed(s *record.TransactionRecordMonthStatusFailed) *response.TransactionResponseMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponseMonthStatusFailed", s)
	ret0, _ := ret[0].(*response.TransactionResponseMonthStatusFailed)
	return ret0
}

// ToTransactionResponseMonthStatusFailed indicates an expected call of ToTransactionResponseMonthStatusFailed.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponseMonthStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponseMonthStatusFailed", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponseMonthStatusFailed), s)
}

// ToTransactionResponseMonthStatusSuccess mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponseMonthStatusSuccess(s *record.TransactionRecordMonthStatusSuccess) *response.TransactionResponseMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponseMonthStatusSuccess", s)
	ret0, _ := ret[0].(*response.TransactionResponseMonthStatusSuccess)
	return ret0
}

// ToTransactionResponseMonthStatusSuccess indicates an expected call of ToTransactionResponseMonthStatusSuccess.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponseMonthStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponseMonthStatusSuccess", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponseMonthStatusSuccess), s)
}

// ToTransactionResponseYearStatusFailed mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponseYearStatusFailed(s *record.TransactionRecordYearStatusFailed) *response.TransactionResponseYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponseYearStatusFailed", s)
	ret0, _ := ret[0].(*response.TransactionResponseYearStatusFailed)
	return ret0
}

// ToTransactionResponseYearStatusFailed indicates an expected call of ToTransactionResponseYearStatusFailed.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponseYearStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponseYearStatusFailed", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponseYearStatusFailed), s)
}

// ToTransactionResponseYearStatusSuccess mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponseYearStatusSuccess(s *record.TransactionRecordYearStatusSuccess) *response.TransactionResponseYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponseYearStatusSuccess", s)
	ret0, _ := ret[0].(*response.TransactionResponseYearStatusSuccess)
	return ret0
}

// ToTransactionResponseYearStatusSuccess indicates an expected call of ToTransactionResponseYearStatusSuccess.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponseYearStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponseYearStatusSuccess", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponseYearStatusSuccess), s)
}

// ToTransactionResponsesMonthStatusFailed mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponsesMonthStatusFailed(Transactions []*record.TransactionRecordMonthStatusFailed) []*response.TransactionResponseMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponsesMonthStatusFailed", Transactions)
	ret0, _ := ret[0].([]*response.TransactionResponseMonthStatusFailed)
	return ret0
}

// ToTransactionResponsesMonthStatusFailed indicates an expected call of ToTransactionResponsesMonthStatusFailed.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponsesMonthStatusFailed(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponsesMonthStatusFailed", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponsesMonthStatusFailed), Transactions)
}

// ToTransactionResponsesMonthStatusSuccess mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponsesMonthStatusSuccess(Transactions []*record.TransactionRecordMonthStatusSuccess) []*response.TransactionResponseMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponsesMonthStatusSuccess", Transactions)
	ret0, _ := ret[0].([]*response.TransactionResponseMonthStatusSuccess)
	return ret0
}

// ToTransactionResponsesMonthStatusSuccess indicates an expected call of ToTransactionResponsesMonthStatusSuccess.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponsesMonthStatusSuccess(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponsesMonthStatusSuccess", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponsesMonthStatusSuccess), Transactions)
}

// ToTransactionResponsesYearStatusFailed mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponsesYearStatusFailed(Transactions []*record.TransactionRecordYearStatusFailed) []*response.TransactionResponseYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponsesYearStatusFailed", Transactions)
	ret0, _ := ret[0].([]*response.TransactionResponseYearStatusFailed)
	return ret0
}

// ToTransactionResponsesYearStatusFailed indicates an expected call of ToTransactionResponsesYearStatusFailed.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponsesYearStatusFailed(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponsesYearStatusFailed", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponsesYearStatusFailed), Transactions)
}

// ToTransactionResponsesYearStatusSuccess mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponsesYearStatusSuccess(Transactions []*record.TransactionRecordYearStatusSuccess) []*response.TransactionResponseYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponsesYearStatusSuccess", Transactions)
	ret0, _ := ret[0].([]*response.TransactionResponseYearStatusSuccess)
	return ret0
}

// ToTransactionResponsesYearStatusSuccess indicates an expected call of ToTransactionResponsesYearStatusSuccess.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponsesYearStatusSuccess(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponsesYearStatusSuccess", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponsesYearStatusSuccess), Transactions)
}

// ToTransactionYearlyAmountResponse mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionYearlyAmountResponse(s *record.TransactionYearlyAmount) *response.TransactionYearlyAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyAmountResponse", s)
	ret0, _ := ret[0].(*response.TransactionYearlyAmountResponse)
	return ret0
}

// ToTransactionYearlyAmountResponse indicates an expected call of ToTransactionYearlyAmountResponse.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionYearlyAmountResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyAmountResponse", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionYearlyAmountResponse), s)
}

// ToTransactionYearlyAmountResponses mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionYearlyAmountResponses(s []*record.TransactionYearlyAmount) []*response.TransactionYearlyAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyAmountResponses", s)
	ret0, _ := ret[0].([]*response.TransactionYearlyAmountResponse)
	return ret0
}

// ToTransactionYearlyAmountResponses indicates an expected call of ToTransactionYearlyAmountResponses.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionYearlyAmountResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyAmountResponses", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionYearlyAmountResponses), s)
}

// ToTransactionYearlyMethodResponse mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionYearlyMethodResponse(s *record.TransactionYearMethod) *response.TransactionYearMethodResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyMethodResponse", s)
	ret0, _ := ret[0].(*response.TransactionYearMethodResponse)
	return ret0
}

// ToTransactionYearlyMethodResponse indicates an expected call of ToTransactionYearlyMethodResponse.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionYearlyMethodResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyMethodResponse", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionYearlyMethodResponse), s)
}

// ToTransactionYearlyMethodResponses mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionYearlyMethodResponses(s []*record.TransactionYearMethod) []*response.TransactionYearMethodResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyMethodResponses", s)
	ret0, _ := ret[0].([]*response.TransactionYearMethodResponse)
	return ret0
}

// ToTransactionYearlyMethodResponses indicates an expected call of ToTransactionYearlyMethodResponses.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionYearlyMethodResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyMethodResponses", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionYearlyMethodResponses), s)
}

// ToTransactionsResponse mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionsResponse(transactions []*record.TransactionRecord) []*response.TransactionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsResponse", transactions)
	ret0, _ := ret[0].([]*response.TransactionResponse)
	return ret0
}

// ToTransactionsResponse indicates an expected call of ToTransactionsResponse.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionsResponse(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsResponse", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionsResponse), transactions)
}

// ToTransactionsResponseDeleteAt mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionsResponseDeleteAt(transactions []*record.TransactionRecord) []*response.TransactionResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsResponseDeleteAt", transactions)
	ret0, _ := ret[0].([]*response.TransactionResponseDeleteAt)
	return ret0
}

// ToTransactionsResponseDeleteAt indicates an expected call of ToTransactionsResponseDeleteAt.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionsResponseDeleteAt(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsResponseDeleteAt", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionsResponseDeleteAt), transactions)
}

// MockTransferResponseMapper is a mock of TransferResponseMapper interface.
type MockTransferResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTransferResponseMapperMockRecorder
	isgomock struct{}
}

// MockTransferResponseMapperMockRecorder is the mock recorder for MockTransferResponseMapper.
type MockTransferResponseMapperMockRecorder struct {
	mock *MockTransferResponseMapper
}

// NewMockTransferResponseMapper creates a new mock instance.
func NewMockTransferResponseMapper(ctrl *gomock.Controller) *MockTransferResponseMapper {
	mock := &MockTransferResponseMapper{ctrl: ctrl}
	mock.recorder = &MockTransferResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferResponseMapper) EXPECT() *MockTransferResponseMapperMockRecorder {
	return m.recorder
}

// ToTransferResponse mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponse(transfer *record.TransferRecord) *response.TransferResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponse", transfer)
	ret0, _ := ret[0].(*response.TransferResponse)
	return ret0
}

// ToTransferResponse indicates an expected call of ToTransferResponse.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponse(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponse", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponse), transfer)
}

// ToTransferResponseDeleteAt mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponseDeleteAt(transfer *record.TransferRecord) *response.TransferResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponseDeleteAt", transfer)
	ret0, _ := ret[0].(*response.TransferResponseDeleteAt)
	return ret0
}

// ToTransferResponseDeleteAt indicates an expected call of ToTransferResponseDeleteAt.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponseDeleteAt(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponseDeleteAt", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponseDeleteAt), transfer)
}

// ToTransferResponseMonthAmount mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponseMonthAmount(s *record.TransferMonthAmount) *response.TransferMonthAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponseMonthAmount", s)
	ret0, _ := ret[0].(*response.TransferMonthAmountResponse)
	return ret0
}

// ToTransferResponseMonthAmount indicates an expected call of ToTransferResponseMonthAmount.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponseMonthAmount(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponseMonthAmount", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponseMonthAmount), s)
}

// ToTransferResponseMonthStatusFailed mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponseMonthStatusFailed(s *record.TransferRecordMonthStatusFailed) *response.TransferResponseMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponseMonthStatusFailed", s)
	ret0, _ := ret[0].(*response.TransferResponseMonthStatusFailed)
	return ret0
}

// ToTransferResponseMonthStatusFailed indicates an expected call of ToTransferResponseMonthStatusFailed.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponseMonthStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponseMonthStatusFailed", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponseMonthStatusFailed), s)
}

// ToTransferResponseMonthStatusSuccess mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponseMonthStatusSuccess(s *record.TransferRecordMonthStatusSuccess) *response.TransferResponseMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponseMonthStatusSuccess", s)
	ret0, _ := ret[0].(*response.TransferResponseMonthStatusSuccess)
	return ret0
}

// ToTransferResponseMonthStatusSuccess indicates an expected call of ToTransferResponseMonthStatusSuccess.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponseMonthStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponseMonthStatusSuccess", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponseMonthStatusSuccess), s)
}

// ToTransferResponseYearAmount mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponseYearAmount(s *record.TransferYearAmount) *response.TransferYearAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponseYearAmount", s)
	ret0, _ := ret[0].(*response.TransferYearAmountResponse)
	return ret0
}

// ToTransferResponseYearAmount indicates an expected call of ToTransferResponseYearAmount.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponseYearAmount(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponseYearAmount", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponseYearAmount), s)
}

// ToTransferResponseYearStatusFailed mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponseYearStatusFailed(s *record.TransferRecordYearStatusFailed) *response.TransferResponseYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponseYearStatusFailed", s)
	ret0, _ := ret[0].(*response.TransferResponseYearStatusFailed)
	return ret0
}

// ToTransferResponseYearStatusFailed indicates an expected call of ToTransferResponseYearStatusFailed.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponseYearStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponseYearStatusFailed", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponseYearStatusFailed), s)
}

// ToTransferResponseYearStatusSuccess mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponseYearStatusSuccess(s *record.TransferRecordYearStatusSuccess) *response.TransferResponseYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponseYearStatusSuccess", s)
	ret0, _ := ret[0].(*response.TransferResponseYearStatusSuccess)
	return ret0
}

// ToTransferResponseYearStatusSuccess indicates an expected call of ToTransferResponseYearStatusSuccess.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponseYearStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponseYearStatusSuccess", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponseYearStatusSuccess), s)
}

// ToTransferResponsesMonthAmount mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponsesMonthAmount(s []*record.TransferMonthAmount) []*response.TransferMonthAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponsesMonthAmount", s)
	ret0, _ := ret[0].([]*response.TransferMonthAmountResponse)
	return ret0
}

// ToTransferResponsesMonthAmount indicates an expected call of ToTransferResponsesMonthAmount.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponsesMonthAmount(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponsesMonthAmount", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponsesMonthAmount), s)
}

// ToTransferResponsesMonthStatusFailed mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponsesMonthStatusFailed(Transfers []*record.TransferRecordMonthStatusFailed) []*response.TransferResponseMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponsesMonthStatusFailed", Transfers)
	ret0, _ := ret[0].([]*response.TransferResponseMonthStatusFailed)
	return ret0
}

// ToTransferResponsesMonthStatusFailed indicates an expected call of ToTransferResponsesMonthStatusFailed.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponsesMonthStatusFailed(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponsesMonthStatusFailed", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponsesMonthStatusFailed), Transfers)
}

// ToTransferResponsesMonthStatusSuccess mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponsesMonthStatusSuccess(Transfers []*record.TransferRecordMonthStatusSuccess) []*response.TransferResponseMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponsesMonthStatusSuccess", Transfers)
	ret0, _ := ret[0].([]*response.TransferResponseMonthStatusSuccess)
	return ret0
}

// ToTransferResponsesMonthStatusSuccess indicates an expected call of ToTransferResponsesMonthStatusSuccess.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponsesMonthStatusSuccess(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponsesMonthStatusSuccess", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponsesMonthStatusSuccess), Transfers)
}

// ToTransferResponsesYearAmount mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponsesYearAmount(s []*record.TransferYearAmount) []*response.TransferYearAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponsesYearAmount", s)
	ret0, _ := ret[0].([]*response.TransferYearAmountResponse)
	return ret0
}

// ToTransferResponsesYearAmount indicates an expected call of ToTransferResponsesYearAmount.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponsesYearAmount(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponsesYearAmount", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponsesYearAmount), s)
}

// ToTransferResponsesYearStatusFailed mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponsesYearStatusFailed(Transfers []*record.TransferRecordYearStatusFailed) []*response.TransferResponseYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponsesYearStatusFailed", Transfers)
	ret0, _ := ret[0].([]*response.TransferResponseYearStatusFailed)
	return ret0
}

// ToTransferResponsesYearStatusFailed indicates an expected call of ToTransferResponsesYearStatusFailed.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponsesYearStatusFailed(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponsesYearStatusFailed", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponsesYearStatusFailed), Transfers)
}

// ToTransferResponsesYearStatusSuccess mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponsesYearStatusSuccess(Transfers []*record.TransferRecordYearStatusSuccess) []*response.TransferResponseYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponsesYearStatusSuccess", Transfers)
	ret0, _ := ret[0].([]*response.TransferResponseYearStatusSuccess)
	return ret0
}

// ToTransferResponsesYearStatusSuccess indicates an expected call of ToTransferResponsesYearStatusSuccess.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponsesYearStatusSuccess(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponsesYearStatusSuccess", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponsesYearStatusSuccess), Transfers)
}

// ToTransfersResponse mocks base method.
func (m *MockTransferResponseMapper) ToTransfersResponse(transfers []*record.TransferRecord) []*response.TransferResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersResponse", transfers)
	ret0, _ := ret[0].([]*response.TransferResponse)
	return ret0
}

// ToTransfersResponse indicates an expected call of ToTransfersResponse.
func (mr *MockTransferResponseMapperMockRecorder) ToTransfersResponse(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersResponse", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransfersResponse), transfers)
}

// ToTransfersResponseDeleteAt mocks base method.
func (m *MockTransferResponseMapper) ToTransfersResponseDeleteAt(transfers []*record.TransferRecord) []*response.TransferResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersResponseDeleteAt", transfers)
	ret0, _ := ret[0].([]*response.TransferResponseDeleteAt)
	return ret0
}

// ToTransfersResponseDeleteAt indicates an expected call of ToTransfersResponseDeleteAt.
func (mr *MockTransferResponseMapperMockRecorder) ToTransfersResponseDeleteAt(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersResponseDeleteAt", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransfersResponseDeleteAt), transfers)
}

// MockWithdrawResponseMapper is a mock of WithdrawResponseMapper interface.
type MockWithdrawResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawResponseMapperMockRecorder
	isgomock struct{}
}

// MockWithdrawResponseMapperMockRecorder is the mock recorder for MockWithdrawResponseMapper.
type MockWithdrawResponseMapperMockRecorder struct {
	mock *MockWithdrawResponseMapper
}

// NewMockWithdrawResponseMapper creates a new mock instance.
func NewMockWithdrawResponseMapper(ctrl *gomock.Controller) *MockWithdrawResponseMapper {
	mock := &MockWithdrawResponseMapper{ctrl: ctrl}
	mock.recorder = &MockWithdrawResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawResponseMapper) EXPECT() *MockWithdrawResponseMapperMockRecorder {
	return m.recorder
}

// ToWithdrawAmountMonthlyResponse mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawAmountMonthlyResponse(s *record.WithdrawMonthlyAmount) *response.WithdrawMonthlyAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawAmountMonthlyResponse", s)
	ret0, _ := ret[0].(*response.WithdrawMonthlyAmountResponse)
	return ret0
}

// ToWithdrawAmountMonthlyResponse indicates an expected call of ToWithdrawAmountMonthlyResponse.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawAmountMonthlyResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawAmountMonthlyResponse", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawAmountMonthlyResponse), s)
}

// ToWithdrawAmountYearlyResponse mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawAmountYearlyResponse(s *record.WithdrawYearlyAmount) *response.WithdrawYearlyAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawAmountYearlyResponse", s)
	ret0, _ := ret[0].(*response.WithdrawYearlyAmountResponse)
	return ret0
}

// ToWithdrawAmountYearlyResponse indicates an expected call of ToWithdrawAmountYearlyResponse.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawAmountYearlyResponse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawAmountYearlyResponse", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawAmountYearlyResponse), s)
}

// ToWithdrawResponse mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponse(withdraw *record.WithdrawRecord) *response.WithdrawResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponse", withdraw)
	ret0, _ := ret[0].(*response.WithdrawResponse)
	return ret0
}

// ToWithdrawResponse indicates an expected call of ToWithdrawResponse.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponse(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponse", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponse), withdraw)
}

// ToWithdrawResponseDeleteAt mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponseDeleteAt(withdraw *record.WithdrawRecord) *response.WithdrawResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponseDeleteAt", withdraw)
	ret0, _ := ret[0].(*response.WithdrawResponseDeleteAt)
	return ret0
}

// ToWithdrawResponseDeleteAt indicates an expected call of ToWithdrawResponseDeleteAt.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponseDeleteAt(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponseDeleteAt", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponseDeleteAt), withdraw)
}

// ToWithdrawResponseMonthStatusFailed mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponseMonthStatusFailed(s *record.WithdrawRecordMonthStatusFailed) *response.WithdrawResponseMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponseMonthStatusFailed", s)
	ret0, _ := ret[0].(*response.WithdrawResponseMonthStatusFailed)
	return ret0
}

// ToWithdrawResponseMonthStatusFailed indicates an expected call of ToWithdrawResponseMonthStatusFailed.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponseMonthStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponseMonthStatusFailed", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponseMonthStatusFailed), s)
}

// ToWithdrawResponseMonthStatusSuccess mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponseMonthStatusSuccess(s *record.WithdrawRecordMonthStatusSuccess) *response.WithdrawResponseMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponseMonthStatusSuccess", s)
	ret0, _ := ret[0].(*response.WithdrawResponseMonthStatusSuccess)
	return ret0
}

// ToWithdrawResponseMonthStatusSuccess indicates an expected call of ToWithdrawResponseMonthStatusSuccess.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponseMonthStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponseMonthStatusSuccess", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponseMonthStatusSuccess), s)
}

// ToWithdrawResponseYearStatusFailed mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponseYearStatusFailed(s *record.WithdrawRecordYearStatusFailed) *response.WithdrawResponseYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponseYearStatusFailed", s)
	ret0, _ := ret[0].(*response.WithdrawResponseYearStatusFailed)
	return ret0
}

// ToWithdrawResponseYearStatusFailed indicates an expected call of ToWithdrawResponseYearStatusFailed.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponseYearStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponseYearStatusFailed", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponseYearStatusFailed), s)
}

// ToWithdrawResponseYearStatusSuccess mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponseYearStatusSuccess(s *record.WithdrawRecordYearStatusSuccess) *response.WithdrawResponseYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponseYearStatusSuccess", s)
	ret0, _ := ret[0].(*response.WithdrawResponseYearStatusSuccess)
	return ret0
}

// ToWithdrawResponseYearStatusSuccess indicates an expected call of ToWithdrawResponseYearStatusSuccess.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponseYearStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponseYearStatusSuccess", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponseYearStatusSuccess), s)
}

// ToWithdrawResponsesMonthStatusFailed mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponsesMonthStatusFailed(Withdraws []*record.WithdrawRecordMonthStatusFailed) []*response.WithdrawResponseMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponsesMonthStatusFailed", Withdraws)
	ret0, _ := ret[0].([]*response.WithdrawResponseMonthStatusFailed)
	return ret0
}

// ToWithdrawResponsesMonthStatusFailed indicates an expected call of ToWithdrawResponsesMonthStatusFailed.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponsesMonthStatusFailed(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponsesMonthStatusFailed", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponsesMonthStatusFailed), Withdraws)
}

// ToWithdrawResponsesMonthStatusSuccess mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponsesMonthStatusSuccess(Withdraws []*record.WithdrawRecordMonthStatusSuccess) []*response.WithdrawResponseMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponsesMonthStatusSuccess", Withdraws)
	ret0, _ := ret[0].([]*response.WithdrawResponseMonthStatusSuccess)
	return ret0
}

// ToWithdrawResponsesMonthStatusSuccess indicates an expected call of ToWithdrawResponsesMonthStatusSuccess.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponsesMonthStatusSuccess(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponsesMonthStatusSuccess", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponsesMonthStatusSuccess), Withdraws)
}

// ToWithdrawResponsesYearStatusFailed mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponsesYearStatusFailed(Withdraws []*record.WithdrawRecordYearStatusFailed) []*response.WithdrawResponseYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponsesYearStatusFailed", Withdraws)
	ret0, _ := ret[0].([]*response.WithdrawResponseYearStatusFailed)
	return ret0
}

// ToWithdrawResponsesYearStatusFailed indicates an expected call of ToWithdrawResponsesYearStatusFailed.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponsesYearStatusFailed(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponsesYearStatusFailed", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponsesYearStatusFailed), Withdraws)
}

// ToWithdrawResponsesYearStatusSuccess mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponsesYearStatusSuccess(Withdraws []*record.WithdrawRecordYearStatusSuccess) []*response.WithdrawResponseYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponsesYearStatusSuccess", Withdraws)
	ret0, _ := ret[0].([]*response.WithdrawResponseYearStatusSuccess)
	return ret0
}

// ToWithdrawResponsesYearStatusSuccess indicates an expected call of ToWithdrawResponsesYearStatusSuccess.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponsesYearStatusSuccess(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponsesYearStatusSuccess", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponsesYearStatusSuccess), Withdraws)
}

// ToWithdrawsAmountMonthlyResponses mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawsAmountMonthlyResponses(s []*record.WithdrawMonthlyAmount) []*response.WithdrawMonthlyAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsAmountMonthlyResponses", s)
	ret0, _ := ret[0].([]*response.WithdrawMonthlyAmountResponse)
	return ret0
}

// ToWithdrawsAmountMonthlyResponses indicates an expected call of ToWithdrawsAmountMonthlyResponses.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawsAmountMonthlyResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsAmountMonthlyResponses", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawsAmountMonthlyResponses), s)
}

// ToWithdrawsAmountYearlyResponses mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawsAmountYearlyResponses(s []*record.WithdrawYearlyAmount) []*response.WithdrawYearlyAmountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsAmountYearlyResponses", s)
	ret0, _ := ret[0].([]*response.WithdrawYearlyAmountResponse)
	return ret0
}

// ToWithdrawsAmountYearlyResponses indicates an expected call of ToWithdrawsAmountYearlyResponses.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawsAmountYearlyResponses(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsAmountYearlyResponses", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawsAmountYearlyResponses), s)
}

// ToWithdrawsResponse mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawsResponse(withdraws []*record.WithdrawRecord) []*response.WithdrawResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsResponse", withdraws)
	ret0, _ := ret[0].([]*response.WithdrawResponse)
	return ret0
}

// ToWithdrawsResponse indicates an expected call of ToWithdrawsResponse.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawsResponse(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsResponse", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawsResponse), withdraws)
}

// ToWithdrawsResponseDeleteAt mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawsResponseDeleteAt(withdraws []*record.WithdrawRecord) []*response.WithdrawResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsResponseDeleteAt", withdraws)
	ret0, _ := ret[0].([]*response.WithdrawResponseDeleteAt)
	return ret0
}

// ToWithdrawsResponseDeleteAt indicates an expected call of ToWithdrawsResponseDeleteAt.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawsResponseDeleteAt(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsResponseDeleteAt", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawsResponseDeleteAt), withdraws)
}

// MockMerchantResponseMapper is a mock of MerchantResponseMapper interface.
type MockMerchantResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantResponseMapperMockRecorder
	isgomock struct{}
}

// MockMerchantResponseMapperMockRecorder is the mock recorder for MockMerchantResponseMapper.
type MockMerchantResponseMapperMockRecorder struct {
	mock *MockMerchantResponseMapper
}

// NewMockMerchantResponseMapper creates a new mock instance.
func NewMockMerchantResponseMapper(ctrl *gomock.Controller) *MockMerchantResponseMapper {
	mock := &MockMerchantResponseMapper{ctrl: ctrl}
	mock.recorder = &MockMerchantResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantResponseMapper) EXPECT() *MockMerchantResponseMapperMockRecorder {
	return m.recorder
}

// ToMerchantMonthlyAmount mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantMonthlyAmount(ms *record.MerchantMonthlyAmount) *response.MerchantResponseMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyAmount", ms)
	ret0, _ := ret[0].(*response.MerchantResponseMonthlyAmount)
	return ret0
}

// ToMerchantMonthlyAmount indicates an expected call of ToMerchantMonthlyAmount.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantMonthlyAmount(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyAmount", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantMonthlyAmount), ms)
}

// ToMerchantMonthlyAmounts mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantMonthlyAmounts(ms []*record.MerchantMonthlyAmount) []*response.MerchantResponseMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyAmounts", ms)
	ret0, _ := ret[0].([]*response.MerchantResponseMonthlyAmount)
	return ret0
}

// ToMerchantMonthlyAmounts indicates an expected call of ToMerchantMonthlyAmounts.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantMonthlyAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyAmounts", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantMonthlyAmounts), ms)
}

// ToMerchantMonthlyPaymentMethod mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantMonthlyPaymentMethod(ms *record.MerchantMonthlyPaymentMethod) *response.MerchantResponseMonthlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyPaymentMethod", ms)
	ret0, _ := ret[0].(*response.MerchantResponseMonthlyPaymentMethod)
	return ret0
}

// ToMerchantMonthlyPaymentMethod indicates an expected call of ToMerchantMonthlyPaymentMethod.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantMonthlyPaymentMethod(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyPaymentMethod", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantMonthlyPaymentMethod), ms)
}

// ToMerchantMonthlyPaymentMethods mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantMonthlyPaymentMethods(ms []*record.MerchantMonthlyPaymentMethod) []*response.MerchantResponseMonthlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyPaymentMethods", ms)
	ret0, _ := ret[0].([]*response.MerchantResponseMonthlyPaymentMethod)
	return ret0
}

// ToMerchantMonthlyPaymentMethods indicates an expected call of ToMerchantMonthlyPaymentMethods.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantMonthlyPaymentMethods(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyPaymentMethods", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantMonthlyPaymentMethods), ms)
}

// ToMerchantMonthlyTotalAmount mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantMonthlyTotalAmount(ms *record.MerchantMonthlyTotalAmount) *response.MerchantResponseMonthlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyTotalAmount", ms)
	ret0, _ := ret[0].(*response.MerchantResponseMonthlyTotalAmount)
	return ret0
}

// ToMerchantMonthlyTotalAmount indicates an expected call of ToMerchantMonthlyTotalAmount.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantMonthlyTotalAmount(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyTotalAmount", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantMonthlyTotalAmount), ms)
}

// ToMerchantMonthlyTotalAmounts mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantMonthlyTotalAmounts(ms []*record.MerchantMonthlyTotalAmount) []*response.MerchantResponseMonthlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyTotalAmounts", ms)
	ret0, _ := ret[0].([]*response.MerchantResponseMonthlyTotalAmount)
	return ret0
}

// ToMerchantMonthlyTotalAmounts indicates an expected call of ToMerchantMonthlyTotalAmounts.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantMonthlyTotalAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyTotalAmounts", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantMonthlyTotalAmounts), ms)
}

// ToMerchantResponse mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantResponse(merchant *record.MerchantRecord) *response.MerchantResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantResponse", merchant)
	ret0, _ := ret[0].(*response.MerchantResponse)
	return ret0
}

// ToMerchantResponse indicates an expected call of ToMerchantResponse.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantResponse(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantResponse", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantResponse), merchant)
}

// ToMerchantResponseDeleteAt mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantResponseDeleteAt(merchant *record.MerchantRecord) *response.MerchantResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantResponseDeleteAt", merchant)
	ret0, _ := ret[0].(*response.MerchantResponseDeleteAt)
	return ret0
}

// ToMerchantResponseDeleteAt indicates an expected call of ToMerchantResponseDeleteAt.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantResponseDeleteAt(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantResponseDeleteAt", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantResponseDeleteAt), merchant)
}

// ToMerchantTransactionResponse mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantTransactionResponse(merchant *record.MerchantTransactionsRecord) *response.MerchantTransactionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantTransactionResponse", merchant)
	ret0, _ := ret[0].(*response.MerchantTransactionResponse)
	return ret0
}

// ToMerchantTransactionResponse indicates an expected call of ToMerchantTransactionResponse.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantTransactionResponse(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantTransactionResponse", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantTransactionResponse), merchant)
}

// ToMerchantYearlyAmount mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantYearlyAmount(ms *record.MerchantYearlyAmount) *response.MerchantResponseYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyAmount", ms)
	ret0, _ := ret[0].(*response.MerchantResponseYearlyAmount)
	return ret0
}

// ToMerchantYearlyAmount indicates an expected call of ToMerchantYearlyAmount.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantYearlyAmount(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyAmount", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantYearlyAmount), ms)
}

// ToMerchantYearlyAmounts mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantYearlyAmounts(ms []*record.MerchantYearlyAmount) []*response.MerchantResponseYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyAmounts", ms)
	ret0, _ := ret[0].([]*response.MerchantResponseYearlyAmount)
	return ret0
}

// ToMerchantYearlyAmounts indicates an expected call of ToMerchantYearlyAmounts.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantYearlyAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyAmounts", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantYearlyAmounts), ms)
}

// ToMerchantYearlyPaymentMethod mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantYearlyPaymentMethod(ms *record.MerchantYearlyPaymentMethod) *response.MerchantResponseYearlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyPaymentMethod", ms)
	ret0, _ := ret[0].(*response.MerchantResponseYearlyPaymentMethod)
	return ret0
}

// ToMerchantYearlyPaymentMethod indicates an expected call of ToMerchantYearlyPaymentMethod.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantYearlyPaymentMethod(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyPaymentMethod", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantYearlyPaymentMethod), ms)
}

// ToMerchantYearlyPaymentMethods mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantYearlyPaymentMethods(ms []*record.MerchantYearlyPaymentMethod) []*response.MerchantResponseYearlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyPaymentMethods", ms)
	ret0, _ := ret[0].([]*response.MerchantResponseYearlyPaymentMethod)
	return ret0
}

// ToMerchantYearlyPaymentMethods indicates an expected call of ToMerchantYearlyPaymentMethods.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantYearlyPaymentMethods(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyPaymentMethods", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantYearlyPaymentMethods), ms)
}

// ToMerchantYearlyTotalAmount mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantYearlyTotalAmount(ms *record.MerchantYearlyTotalAmount) *response.MerchantResponseYearlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyTotalAmount", ms)
	ret0, _ := ret[0].(*response.MerchantResponseYearlyTotalAmount)
	return ret0
}

// ToMerchantYearlyTotalAmount indicates an expected call of ToMerchantYearlyTotalAmount.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantYearlyTotalAmount(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyTotalAmount", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantYearlyTotalAmount), ms)
}

// ToMerchantYearlyTotalAmounts mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantYearlyTotalAmounts(ms []*record.MerchantYearlyTotalAmount) []*response.MerchantResponseYearlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyTotalAmounts", ms)
	ret0, _ := ret[0].([]*response.MerchantResponseYearlyTotalAmount)
	return ret0
}

// ToMerchantYearlyTotalAmounts indicates an expected call of ToMerchantYearlyTotalAmounts.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantYearlyTotalAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyTotalAmounts", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantYearlyTotalAmounts), ms)
}

// ToMerchantsResponse mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantsResponse(merchants []*record.MerchantRecord) []*response.MerchantResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsResponse", merchants)
	ret0, _ := ret[0].([]*response.MerchantResponse)
	return ret0
}

// ToMerchantsResponse indicates an expected call of ToMerchantsResponse.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantsResponse(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsResponse", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantsResponse), merchants)
}

// ToMerchantsResponseDeleteAt mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantsResponseDeleteAt(merchants []*record.MerchantRecord) []*response.MerchantResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsResponseDeleteAt", merchants)
	ret0, _ := ret[0].([]*response.MerchantResponseDeleteAt)
	return ret0
}

// ToMerchantsResponseDeleteAt indicates an expected call of ToMerchantsResponseDeleteAt.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantsResponseDeleteAt(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsResponseDeleteAt", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantsResponseDeleteAt), merchants)
}

// ToMerchantsTransactionResponse mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantsTransactionResponse(merchants []*record.MerchantTransactionsRecord) []*response.MerchantTransactionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsTransactionResponse", merchants)
	ret0, _ := ret[0].([]*response.MerchantTransactionResponse)
	return ret0
}

// ToMerchantsTransactionResponse indicates an expected call of ToMerchantsTransactionResponse.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantsTransactionResponse(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsTransactionResponse", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantsTransactionResponse), merchants)
}
