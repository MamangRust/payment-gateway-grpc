// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mapper/response/api/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/mapper/response/api/interfaces.go -destination=internal/mapper/response/api/mocks/mock.go
//

// Package mock_apimapper is a generated GoMock package.
package mock_apimapper

import (
	response "MamangRust/paymentgatewaygrpc/internal/domain/response"
	pb "MamangRust/paymentgatewaygrpc/internal/pb"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthResponseMapper is a mock of AuthResponseMapper interface.
type MockAuthResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockAuthResponseMapperMockRecorder
	isgomock struct{}
}

// MockAuthResponseMapperMockRecorder is the mock recorder for MockAuthResponseMapper.
type MockAuthResponseMapperMockRecorder struct {
	mock *MockAuthResponseMapper
}

// NewMockAuthResponseMapper creates a new mock instance.
func NewMockAuthResponseMapper(ctrl *gomock.Controller) *MockAuthResponseMapper {
	mock := &MockAuthResponseMapper{ctrl: ctrl}
	mock.recorder = &MockAuthResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthResponseMapper) EXPECT() *MockAuthResponseMapperMockRecorder {
	return m.recorder
}

// ToResponseGetMe mocks base method.
func (m *MockAuthResponseMapper) ToResponseGetMe(res *pb.ApiResponseGetMe) *response.ApiResponseGetMe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToResponseGetMe", res)
	ret0, _ := ret[0].(*response.ApiResponseGetMe)
	return ret0
}

// ToResponseGetMe indicates an expected call of ToResponseGetMe.
func (mr *MockAuthResponseMapperMockRecorder) ToResponseGetMe(res any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToResponseGetMe", reflect.TypeOf((*MockAuthResponseMapper)(nil).ToResponseGetMe), res)
}

// ToResponseLogin mocks base method.
func (m *MockAuthResponseMapper) ToResponseLogin(res *pb.ApiResponseLogin) *response.ApiResponseLogin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToResponseLogin", res)
	ret0, _ := ret[0].(*response.ApiResponseLogin)
	return ret0
}

// ToResponseLogin indicates an expected call of ToResponseLogin.
func (mr *MockAuthResponseMapperMockRecorder) ToResponseLogin(res any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToResponseLogin", reflect.TypeOf((*MockAuthResponseMapper)(nil).ToResponseLogin), res)
}

// ToResponseRefreshToken mocks base method.
func (m *MockAuthResponseMapper) ToResponseRefreshToken(res *pb.ApiResponseRefreshToken) *response.ApiResponseRefreshToken {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToResponseRefreshToken", res)
	ret0, _ := ret[0].(*response.ApiResponseRefreshToken)
	return ret0
}

// ToResponseRefreshToken indicates an expected call of ToResponseRefreshToken.
func (mr *MockAuthResponseMapperMockRecorder) ToResponseRefreshToken(res any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToResponseRefreshToken", reflect.TypeOf((*MockAuthResponseMapper)(nil).ToResponseRefreshToken), res)
}

// ToResponseRegister mocks base method.
func (m *MockAuthResponseMapper) ToResponseRegister(res *pb.ApiResponseRegister) *response.ApiResponseRegister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToResponseRegister", res)
	ret0, _ := ret[0].(*response.ApiResponseRegister)
	return ret0
}

// ToResponseRegister indicates an expected call of ToResponseRegister.
func (mr *MockAuthResponseMapperMockRecorder) ToResponseRegister(res any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToResponseRegister", reflect.TypeOf((*MockAuthResponseMapper)(nil).ToResponseRegister), res)
}

// MockRoleResponseMapper is a mock of RoleResponseMapper interface.
type MockRoleResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRoleResponseMapperMockRecorder
	isgomock struct{}
}

// MockRoleResponseMapperMockRecorder is the mock recorder for MockRoleResponseMapper.
type MockRoleResponseMapperMockRecorder struct {
	mock *MockRoleResponseMapper
}

// NewMockRoleResponseMapper creates a new mock instance.
func NewMockRoleResponseMapper(ctrl *gomock.Controller) *MockRoleResponseMapper {
	mock := &MockRoleResponseMapper{ctrl: ctrl}
	mock.recorder = &MockRoleResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleResponseMapper) EXPECT() *MockRoleResponseMapperMockRecorder {
	return m.recorder
}

// ToApiResponsePaginationRole mocks base method.
func (m *MockRoleResponseMapper) ToApiResponsePaginationRole(pbResponse *pb.ApiResponsePaginationRole) *response.ApiResponsePaginationRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationRole", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationRole)
	return ret0
}

// ToApiResponsePaginationRole indicates an expected call of ToApiResponsePaginationRole.
func (mr *MockRoleResponseMapperMockRecorder) ToApiResponsePaginationRole(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationRole", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToApiResponsePaginationRole), pbResponse)
}

// ToApiResponsePaginationRoleDeleteAt mocks base method.
func (m *MockRoleResponseMapper) ToApiResponsePaginationRoleDeleteAt(pbResponse *pb.ApiResponsePaginationRoleDeleteAt) *response.ApiResponsePaginationRoleDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationRoleDeleteAt", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationRoleDeleteAt)
	return ret0
}

// ToApiResponsePaginationRoleDeleteAt indicates an expected call of ToApiResponsePaginationRoleDeleteAt.
func (mr *MockRoleResponseMapperMockRecorder) ToApiResponsePaginationRoleDeleteAt(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationRoleDeleteAt", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToApiResponsePaginationRoleDeleteAt), pbResponse)
}

// ToApiResponseRole mocks base method.
func (m *MockRoleResponseMapper) ToApiResponseRole(pbResponse *pb.ApiResponseRole) *response.ApiResponseRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseRole", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseRole)
	return ret0
}

// ToApiResponseRole indicates an expected call of ToApiResponseRole.
func (mr *MockRoleResponseMapperMockRecorder) ToApiResponseRole(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseRole", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToApiResponseRole), pbResponse)
}

// ToApiResponseRoleAll mocks base method.
func (m *MockRoleResponseMapper) ToApiResponseRoleAll(pbResponse *pb.ApiResponseRoleAll) *response.ApiResponseRoleAll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseRoleAll", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseRoleAll)
	return ret0
}

// ToApiResponseRoleAll indicates an expected call of ToApiResponseRoleAll.
func (mr *MockRoleResponseMapperMockRecorder) ToApiResponseRoleAll(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseRoleAll", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToApiResponseRoleAll), pbResponse)
}

// ToApiResponseRoleDelete mocks base method.
func (m *MockRoleResponseMapper) ToApiResponseRoleDelete(pbResponse *pb.ApiResponseRoleDelete) *response.ApiResponseRoleDelete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseRoleDelete", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseRoleDelete)
	return ret0
}

// ToApiResponseRoleDelete indicates an expected call of ToApiResponseRoleDelete.
func (mr *MockRoleResponseMapperMockRecorder) ToApiResponseRoleDelete(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseRoleDelete", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToApiResponseRoleDelete), pbResponse)
}

// ToApiResponsesRole mocks base method.
func (m *MockRoleResponseMapper) ToApiResponsesRole(pbResponse *pb.ApiResponsesRole) *response.ApiResponsesRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsesRole", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsesRole)
	return ret0
}

// ToApiResponsesRole indicates an expected call of ToApiResponsesRole.
func (mr *MockRoleResponseMapperMockRecorder) ToApiResponsesRole(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsesRole", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToApiResponsesRole), pbResponse)
}

// MockCardResponseMapper is a mock of CardResponseMapper interface.
type MockCardResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockCardResponseMapperMockRecorder
	isgomock struct{}
}

// MockCardResponseMapperMockRecorder is the mock recorder for MockCardResponseMapper.
type MockCardResponseMapperMockRecorder struct {
	mock *MockCardResponseMapper
}

// NewMockCardResponseMapper creates a new mock instance.
func NewMockCardResponseMapper(ctrl *gomock.Controller) *MockCardResponseMapper {
	mock := &MockCardResponseMapper{ctrl: ctrl}
	mock.recorder = &MockCardResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardResponseMapper) EXPECT() *MockCardResponseMapperMockRecorder {
	return m.recorder
}

// ToApiResponseCard mocks base method.
func (m *MockCardResponseMapper) ToApiResponseCard(card *pb.ApiResponseCard) *response.ApiResponseCard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseCard", card)
	ret0, _ := ret[0].(*response.ApiResponseCard)
	return ret0
}

// ToApiResponseCard indicates an expected call of ToApiResponseCard.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponseCard(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseCard", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponseCard), card)
}

// ToApiResponseCardAll mocks base method.
func (m *MockCardResponseMapper) ToApiResponseCardAll(card *pb.ApiResponseCardAll) *response.ApiResponseCardAll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseCardAll", card)
	ret0, _ := ret[0].(*response.ApiResponseCardAll)
	return ret0
}

// ToApiResponseCardAll indicates an expected call of ToApiResponseCardAll.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponseCardAll(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseCardAll", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponseCardAll), card)
}

// ToApiResponseCardDeleteAt mocks base method.
func (m *MockCardResponseMapper) ToApiResponseCardDeleteAt(card *pb.ApiResponseCardDelete) *response.ApiResponseCardDelete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseCardDeleteAt", card)
	ret0, _ := ret[0].(*response.ApiResponseCardDelete)
	return ret0
}

// ToApiResponseCardDeleteAt indicates an expected call of ToApiResponseCardDeleteAt.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponseCardDeleteAt(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseCardDeleteAt", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponseCardDeleteAt), card)
}

// ToApiResponseDashboardCard mocks base method.
func (m *MockCardResponseMapper) ToApiResponseDashboardCard(dash *pb.ApiResponseDashboardCard) *response.ApiResponseDashboardCard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseDashboardCard", dash)
	ret0, _ := ret[0].(*response.ApiResponseDashboardCard)
	return ret0
}

// ToApiResponseDashboardCard indicates an expected call of ToApiResponseDashboardCard.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponseDashboardCard(dash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseDashboardCard", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponseDashboardCard), dash)
}

// ToApiResponseDashboardCardCardNumber mocks base method.
func (m *MockCardResponseMapper) ToApiResponseDashboardCardCardNumber(dash *pb.ApiResponseDashboardCardNumber) *response.ApiResponseDashboardCardNumber {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseDashboardCardCardNumber", dash)
	ret0, _ := ret[0].(*response.ApiResponseDashboardCardNumber)
	return ret0
}

// ToApiResponseDashboardCardCardNumber indicates an expected call of ToApiResponseDashboardCardCardNumber.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponseDashboardCardCardNumber(dash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseDashboardCardCardNumber", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponseDashboardCardCardNumber), dash)
}

// ToApiResponseMonthlyAmounts mocks base method.
func (m *MockCardResponseMapper) ToApiResponseMonthlyAmounts(cards *pb.ApiResponseMonthlyAmount) *response.ApiResponseMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMonthlyAmounts", cards)
	ret0, _ := ret[0].(*response.ApiResponseMonthlyAmount)
	return ret0
}

// ToApiResponseMonthlyAmounts indicates an expected call of ToApiResponseMonthlyAmounts.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponseMonthlyAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMonthlyAmounts", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponseMonthlyAmounts), cards)
}

// ToApiResponseMonthlyBalances mocks base method.
func (m *MockCardResponseMapper) ToApiResponseMonthlyBalances(cards *pb.ApiResponseMonthlyBalance) *response.ApiResponseMonthlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMonthlyBalances", cards)
	ret0, _ := ret[0].(*response.ApiResponseMonthlyBalance)
	return ret0
}

// ToApiResponseMonthlyBalances indicates an expected call of ToApiResponseMonthlyBalances.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponseMonthlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMonthlyBalances", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponseMonthlyBalances), cards)
}

// ToApiResponseYearlyAmounts mocks base method.
func (m *MockCardResponseMapper) ToApiResponseYearlyAmounts(cards *pb.ApiResponseYearlyAmount) *response.ApiResponseYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseYearlyAmounts", cards)
	ret0, _ := ret[0].(*response.ApiResponseYearlyAmount)
	return ret0
}

// ToApiResponseYearlyAmounts indicates an expected call of ToApiResponseYearlyAmounts.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponseYearlyAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseYearlyAmounts", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponseYearlyAmounts), cards)
}

// ToApiResponseYearlyBalances mocks base method.
func (m *MockCardResponseMapper) ToApiResponseYearlyBalances(cards *pb.ApiResponseYearlyBalance) *response.ApiResponseYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseYearlyBalances", cards)
	ret0, _ := ret[0].(*response.ApiResponseYearlyBalance)
	return ret0
}

// ToApiResponseYearlyBalances indicates an expected call of ToApiResponseYearlyBalances.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponseYearlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseYearlyBalances", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponseYearlyBalances), cards)
}

// ToApiResponsesCard mocks base method.
func (m *MockCardResponseMapper) ToApiResponsesCard(cards *pb.ApiResponsePaginationCard) *response.ApiResponsePaginationCard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsesCard", cards)
	ret0, _ := ret[0].(*response.ApiResponsePaginationCard)
	return ret0
}

// ToApiResponsesCard indicates an expected call of ToApiResponsesCard.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponsesCard(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsesCard", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponsesCard), cards)
}

// ToApiResponsesCardDeletedAt mocks base method.
func (m *MockCardResponseMapper) ToApiResponsesCardDeletedAt(cards *pb.ApiResponsePaginationCardDeleteAt) *response.ApiResponsePaginationCardDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsesCardDeletedAt", cards)
	ret0, _ := ret[0].(*response.ApiResponsePaginationCardDeleteAt)
	return ret0
}

// ToApiResponsesCardDeletedAt indicates an expected call of ToApiResponsesCardDeletedAt.
func (mr *MockCardResponseMapperMockRecorder) ToApiResponsesCardDeletedAt(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsesCardDeletedAt", reflect.TypeOf((*MockCardResponseMapper)(nil).ToApiResponsesCardDeletedAt), cards)
}

// MockMerchantResponseMapper is a mock of MerchantResponseMapper interface.
type MockMerchantResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantResponseMapperMockRecorder
	isgomock struct{}
}

// MockMerchantResponseMapperMockRecorder is the mock recorder for MockMerchantResponseMapper.
type MockMerchantResponseMapperMockRecorder struct {
	mock *MockMerchantResponseMapper
}

// NewMockMerchantResponseMapper creates a new mock instance.
func NewMockMerchantResponseMapper(ctrl *gomock.Controller) *MockMerchantResponseMapper {
	mock := &MockMerchantResponseMapper{ctrl: ctrl}
	mock.recorder = &MockMerchantResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantResponseMapper) EXPECT() *MockMerchantResponseMapperMockRecorder {
	return m.recorder
}

// ToApiResponseMerchant mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseMerchant(merchants *pb.ApiResponseMerchant) *response.ApiResponseMerchant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMerchant", merchants)
	ret0, _ := ret[0].(*response.ApiResponseMerchant)
	return ret0
}

// ToApiResponseMerchant indicates an expected call of ToApiResponseMerchant.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseMerchant(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMerchant", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseMerchant), merchants)
}

// ToApiResponseMerchantAll mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseMerchantAll(card *pb.ApiResponseMerchantAll) *response.ApiResponseMerchantAll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMerchantAll", card)
	ret0, _ := ret[0].(*response.ApiResponseMerchantAll)
	return ret0
}

// ToApiResponseMerchantAll indicates an expected call of ToApiResponseMerchantAll.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseMerchantAll(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMerchantAll", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseMerchantAll), card)
}

// ToApiResponseMerchantDeleteAt mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseMerchantDeleteAt(card *pb.ApiResponseMerchantDelete) *response.ApiResponseMerchantDelete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMerchantDeleteAt", card)
	ret0, _ := ret[0].(*response.ApiResponseMerchantDelete)
	return ret0
}

// ToApiResponseMerchantDeleteAt indicates an expected call of ToApiResponseMerchantDeleteAt.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseMerchantDeleteAt(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMerchantDeleteAt", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseMerchantDeleteAt), card)
}

// ToApiResponseMerchants mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseMerchants(merchants *pb.ApiResponsesMerchant) *response.ApiResponsesMerchant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMerchants", merchants)
	ret0, _ := ret[0].(*response.ApiResponsesMerchant)
	return ret0
}

// ToApiResponseMerchants indicates an expected call of ToApiResponseMerchants.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseMerchants(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMerchants", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseMerchants), merchants)
}

// ToApiResponseMerchantsTransactionResponse mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseMerchantsTransactionResponse(merchants *pb.ApiResponsePaginationMerchantTransaction) *response.ApiResponsePaginationMerchantTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMerchantsTransactionResponse", merchants)
	ret0, _ := ret[0].(*response.ApiResponsePaginationMerchantTransaction)
	return ret0
}

// ToApiResponseMerchantsTransactionResponse indicates an expected call of ToApiResponseMerchantsTransactionResponse.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseMerchantsTransactionResponse(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMerchantsTransactionResponse", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseMerchantsTransactionResponse), merchants)
}

// ToApiResponseMonthlyAmounts mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseMonthlyAmounts(ms *pb.ApiResponseMerchantMonthlyAmount) *response.ApiResponseMerchantMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMonthlyAmounts", ms)
	ret0, _ := ret[0].(*response.ApiResponseMerchantMonthlyAmount)
	return ret0
}

// ToApiResponseMonthlyAmounts indicates an expected call of ToApiResponseMonthlyAmounts.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseMonthlyAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMonthlyAmounts", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseMonthlyAmounts), ms)
}

// ToApiResponseMonthlyPaymentMethods mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseMonthlyPaymentMethods(ms *pb.ApiResponseMerchantMonthlyPaymentMethod) *response.ApiResponseMerchantMonthlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMonthlyPaymentMethods", ms)
	ret0, _ := ret[0].(*response.ApiResponseMerchantMonthlyPaymentMethod)
	return ret0
}

// ToApiResponseMonthlyPaymentMethods indicates an expected call of ToApiResponseMonthlyPaymentMethods.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseMonthlyPaymentMethods(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMonthlyPaymentMethods", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseMonthlyPaymentMethods), ms)
}

// ToApiResponseMonthlyTotalAmounts mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseMonthlyTotalAmounts(ms *pb.ApiResponseMerchantMonthlyTotalAmount) *response.ApiResponseMerchantMonthlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMonthlyTotalAmounts", ms)
	ret0, _ := ret[0].(*response.ApiResponseMerchantMonthlyTotalAmount)
	return ret0
}

// ToApiResponseMonthlyTotalAmounts indicates an expected call of ToApiResponseMonthlyTotalAmounts.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseMonthlyTotalAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMonthlyTotalAmounts", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseMonthlyTotalAmounts), ms)
}

// ToApiResponseYearlyAmounts mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseYearlyAmounts(ms *pb.ApiResponseMerchantYearlyAmount) *response.ApiResponseMerchantYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseYearlyAmounts", ms)
	ret0, _ := ret[0].(*response.ApiResponseMerchantYearlyAmount)
	return ret0
}

// ToApiResponseYearlyAmounts indicates an expected call of ToApiResponseYearlyAmounts.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseYearlyAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseYearlyAmounts", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseYearlyAmounts), ms)
}

// ToApiResponseYearlyPaymentMethods mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseYearlyPaymentMethods(ms *pb.ApiResponseMerchantYearlyPaymentMethod) *response.ApiResponseMerchantYearlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseYearlyPaymentMethods", ms)
	ret0, _ := ret[0].(*response.ApiResponseMerchantYearlyPaymentMethod)
	return ret0
}

// ToApiResponseYearlyPaymentMethods indicates an expected call of ToApiResponseYearlyPaymentMethods.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseYearlyPaymentMethods(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseYearlyPaymentMethods", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseYearlyPaymentMethods), ms)
}

// ToApiResponseYearlyTotalAmounts mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponseYearlyTotalAmounts(ms *pb.ApiResponseMerchantYearlyTotalAmount) *response.ApiResponseMerchantYearlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseYearlyTotalAmounts", ms)
	ret0, _ := ret[0].(*response.ApiResponseMerchantYearlyTotalAmount)
	return ret0
}

// ToApiResponseYearlyTotalAmounts indicates an expected call of ToApiResponseYearlyTotalAmounts.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponseYearlyTotalAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseYearlyTotalAmounts", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponseYearlyTotalAmounts), ms)
}

// ToApiResponsesMerchant mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponsesMerchant(merchants *pb.ApiResponsePaginationMerchant) *response.ApiResponsePaginationMerchant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsesMerchant", merchants)
	ret0, _ := ret[0].(*response.ApiResponsePaginationMerchant)
	return ret0
}

// ToApiResponsesMerchant indicates an expected call of ToApiResponsesMerchant.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponsesMerchant(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsesMerchant", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponsesMerchant), merchants)
}

// ToApiResponsesMerchantDeleteAt mocks base method.
func (m *MockMerchantResponseMapper) ToApiResponsesMerchantDeleteAt(merchants *pb.ApiResponsePaginationMerchantDeleteAt) *response.ApiResponsePaginationMerchantDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsesMerchantDeleteAt", merchants)
	ret0, _ := ret[0].(*response.ApiResponsePaginationMerchantDeleteAt)
	return ret0
}

// ToApiResponsesMerchantDeleteAt indicates an expected call of ToApiResponsesMerchantDeleteAt.
func (mr *MockMerchantResponseMapperMockRecorder) ToApiResponsesMerchantDeleteAt(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsesMerchantDeleteAt", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToApiResponsesMerchantDeleteAt), merchants)
}

// MockSaldoResponseMapper is a mock of SaldoResponseMapper interface.
type MockSaldoResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockSaldoResponseMapperMockRecorder
	isgomock struct{}
}

// MockSaldoResponseMapperMockRecorder is the mock recorder for MockSaldoResponseMapper.
type MockSaldoResponseMapperMockRecorder struct {
	mock *MockSaldoResponseMapper
}

// NewMockSaldoResponseMapper creates a new mock instance.
func NewMockSaldoResponseMapper(ctrl *gomock.Controller) *MockSaldoResponseMapper {
	mock := &MockSaldoResponseMapper{ctrl: ctrl}
	mock.recorder = &MockSaldoResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaldoResponseMapper) EXPECT() *MockSaldoResponseMapperMockRecorder {
	return m.recorder
}

// ToApiResponseMonthSaldoBalances mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponseMonthSaldoBalances(pbResponse *pb.ApiResponseMonthSaldoBalances) *response.ApiResponseMonthSaldoBalances {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMonthSaldoBalances", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseMonthSaldoBalances)
	return ret0
}

// ToApiResponseMonthSaldoBalances indicates an expected call of ToApiResponseMonthSaldoBalances.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponseMonthSaldoBalances(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMonthSaldoBalances", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponseMonthSaldoBalances), pbResponse)
}

// ToApiResponseMonthTotalSaldo mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponseMonthTotalSaldo(pbResponse *pb.ApiResponseMonthTotalSaldo) *response.ApiResponseMonthTotalSaldo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseMonthTotalSaldo", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseMonthTotalSaldo)
	return ret0
}

// ToApiResponseMonthTotalSaldo indicates an expected call of ToApiResponseMonthTotalSaldo.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponseMonthTotalSaldo(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseMonthTotalSaldo", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponseMonthTotalSaldo), pbResponse)
}

// ToApiResponsePaginationSaldo mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponsePaginationSaldo(pbResponse *pb.ApiResponsePaginationSaldo) *response.ApiResponsePaginationSaldo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationSaldo", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationSaldo)
	return ret0
}

// ToApiResponsePaginationSaldo indicates an expected call of ToApiResponsePaginationSaldo.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponsePaginationSaldo(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationSaldo", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponsePaginationSaldo), pbResponse)
}

// ToApiResponsePaginationSaldoDeleteAt mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponsePaginationSaldoDeleteAt(pbResponse *pb.ApiResponsePaginationSaldoDeleteAt) *response.ApiResponsePaginationSaldoDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationSaldoDeleteAt", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationSaldoDeleteAt)
	return ret0
}

// ToApiResponsePaginationSaldoDeleteAt indicates an expected call of ToApiResponsePaginationSaldoDeleteAt.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponsePaginationSaldoDeleteAt(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationSaldoDeleteAt", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponsePaginationSaldoDeleteAt), pbResponse)
}

// ToApiResponseSaldo mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponseSaldo(pbResponse *pb.ApiResponseSaldo) *response.ApiResponseSaldo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseSaldo", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseSaldo)
	return ret0
}

// ToApiResponseSaldo indicates an expected call of ToApiResponseSaldo.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponseSaldo(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseSaldo", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponseSaldo), pbResponse)
}

// ToApiResponseSaldoAll mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponseSaldoAll(pbResponse *pb.ApiResponseSaldoAll) *response.ApiResponseSaldoAll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseSaldoAll", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseSaldoAll)
	return ret0
}

// ToApiResponseSaldoAll indicates an expected call of ToApiResponseSaldoAll.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponseSaldoAll(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseSaldoAll", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponseSaldoAll), pbResponse)
}

// ToApiResponseSaldoDelete mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponseSaldoDelete(pbResponse *pb.ApiResponseSaldoDelete) *response.ApiResponseSaldoDelete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseSaldoDelete", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseSaldoDelete)
	return ret0
}

// ToApiResponseSaldoDelete indicates an expected call of ToApiResponseSaldoDelete.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponseSaldoDelete(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseSaldoDelete", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponseSaldoDelete), pbResponse)
}

// ToApiResponseYearSaldoBalances mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponseYearSaldoBalances(pbResponse *pb.ApiResponseYearSaldoBalances) *response.ApiResponseYearSaldoBalances {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseYearSaldoBalances", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseYearSaldoBalances)
	return ret0
}

// ToApiResponseYearSaldoBalances indicates an expected call of ToApiResponseYearSaldoBalances.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponseYearSaldoBalances(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseYearSaldoBalances", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponseYearSaldoBalances), pbResponse)
}

// ToApiResponseYearTotalSaldo mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponseYearTotalSaldo(pbResponse *pb.ApiResponseYearTotalSaldo) *response.ApiResponseYearTotalSaldo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseYearTotalSaldo", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseYearTotalSaldo)
	return ret0
}

// ToApiResponseYearTotalSaldo indicates an expected call of ToApiResponseYearTotalSaldo.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponseYearTotalSaldo(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseYearTotalSaldo", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponseYearTotalSaldo), pbResponse)
}

// ToApiResponsesSaldo mocks base method.
func (m *MockSaldoResponseMapper) ToApiResponsesSaldo(pbResponse *pb.ApiResponsesSaldo) *response.ApiResponsesSaldo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsesSaldo", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsesSaldo)
	return ret0
}

// ToApiResponsesSaldo indicates an expected call of ToApiResponsesSaldo.
func (mr *MockSaldoResponseMapperMockRecorder) ToApiResponsesSaldo(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsesSaldo", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToApiResponsesSaldo), pbResponse)
}

// MockTopupResponseMapper is a mock of TopupResponseMapper interface.
type MockTopupResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTopupResponseMapperMockRecorder
	isgomock struct{}
}

// MockTopupResponseMapperMockRecorder is the mock recorder for MockTopupResponseMapper.
type MockTopupResponseMapperMockRecorder struct {
	mock *MockTopupResponseMapper
}

// NewMockTopupResponseMapper creates a new mock instance.
func NewMockTopupResponseMapper(ctrl *gomock.Controller) *MockTopupResponseMapper {
	mock := &MockTopupResponseMapper{ctrl: ctrl}
	mock.recorder = &MockTopupResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupResponseMapper) EXPECT() *MockTopupResponseMapperMockRecorder {
	return m.recorder
}

// ToApiResponsePaginationTopup mocks base method.
func (m *MockTopupResponseMapper) ToApiResponsePaginationTopup(s *pb.ApiResponsePaginationTopup) *response.ApiResponsePaginationTopup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationTopup", s)
	ret0, _ := ret[0].(*response.ApiResponsePaginationTopup)
	return ret0
}

// ToApiResponsePaginationTopup indicates an expected call of ToApiResponsePaginationTopup.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponsePaginationTopup(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationTopup", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponsePaginationTopup), s)
}

// ToApiResponsePaginationTopupDeleteAt mocks base method.
func (m *MockTopupResponseMapper) ToApiResponsePaginationTopupDeleteAt(s *pb.ApiResponsePaginationTopupDeleteAt) *response.ApiResponsePaginationTopupDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationTopupDeleteAt", s)
	ret0, _ := ret[0].(*response.ApiResponsePaginationTopupDeleteAt)
	return ret0
}

// ToApiResponsePaginationTopupDeleteAt indicates an expected call of ToApiResponsePaginationTopupDeleteAt.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponsePaginationTopupDeleteAt(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationTopupDeleteAt", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponsePaginationTopupDeleteAt), s)
}

// ToApiResponseTopup mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopup(s *pb.ApiResponseTopup) *response.ApiResponseTopup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopup", s)
	ret0, _ := ret[0].(*response.ApiResponseTopup)
	return ret0
}

// ToApiResponseTopup indicates an expected call of ToApiResponseTopup.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopup(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopup", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopup), s)
}

// ToApiResponseTopupAll mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupAll(s *pb.ApiResponseTopupAll) *response.ApiResponseTopupAll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupAll", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupAll)
	return ret0
}

// ToApiResponseTopupAll indicates an expected call of ToApiResponseTopupAll.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupAll(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupAll", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupAll), s)
}

// ToApiResponseTopupDelete mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupDelete(s *pb.ApiResponseTopupDelete) *response.ApiResponseTopupDelete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupDelete", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupDelete)
	return ret0
}

// ToApiResponseTopupDelete indicates an expected call of ToApiResponseTopupDelete.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupDelete(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupDelete", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupDelete), s)
}

// ToApiResponseTopupMonthAmount mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupMonthAmount(s *pb.ApiResponseTopupMonthAmount) *response.ApiResponseTopupMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupMonthAmount", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupMonthAmount)
	return ret0
}

// ToApiResponseTopupMonthAmount indicates an expected call of ToApiResponseTopupMonthAmount.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupMonthAmount(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupMonthAmount", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupMonthAmount), s)
}

// ToApiResponseTopupMonthMethod mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupMonthMethod(s *pb.ApiResponseTopupMonthMethod) *response.ApiResponseTopupMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupMonthMethod", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupMonthMethod)
	return ret0
}

// ToApiResponseTopupMonthMethod indicates an expected call of ToApiResponseTopupMonthMethod.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupMonthMethod(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupMonthMethod", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupMonthMethod), s)
}

// ToApiResponseTopupMonthStatusFailed mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupMonthStatusFailed(s *pb.ApiResponseTopupMonthStatusFailed) *response.ApiResponseTopupMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupMonthStatusFailed", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupMonthStatusFailed)
	return ret0
}

// ToApiResponseTopupMonthStatusFailed indicates an expected call of ToApiResponseTopupMonthStatusFailed.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupMonthStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupMonthStatusFailed", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupMonthStatusFailed), s)
}

// ToApiResponseTopupMonthStatusSuccess mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupMonthStatusSuccess(s *pb.ApiResponseTopupMonthStatusSuccess) *response.ApiResponseTopupMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupMonthStatusSuccess", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupMonthStatusSuccess)
	return ret0
}

// ToApiResponseTopupMonthStatusSuccess indicates an expected call of ToApiResponseTopupMonthStatusSuccess.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupMonthStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupMonthStatusSuccess", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupMonthStatusSuccess), s)
}

// ToApiResponseTopupYearAmount mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupYearAmount(s *pb.ApiResponseTopupYearAmount) *response.ApiResponseTopupYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupYearAmount", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupYearAmount)
	return ret0
}

// ToApiResponseTopupYearAmount indicates an expected call of ToApiResponseTopupYearAmount.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupYearAmount(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupYearAmount", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupYearAmount), s)
}

// ToApiResponseTopupYearMethod mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupYearMethod(s *pb.ApiResponseTopupYearMethod) *response.ApiResponseTopupYearMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupYearMethod", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupYearMethod)
	return ret0
}

// ToApiResponseTopupYearMethod indicates an expected call of ToApiResponseTopupYearMethod.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupYearMethod(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupYearMethod", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupYearMethod), s)
}

// ToApiResponseTopupYearStatusFailed mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupYearStatusFailed(s *pb.ApiResponseTopupYearStatusFailed) *response.ApiResponseTopupYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupYearStatusFailed", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupYearStatusFailed)
	return ret0
}

// ToApiResponseTopupYearStatusFailed indicates an expected call of ToApiResponseTopupYearStatusFailed.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupYearStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupYearStatusFailed", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupYearStatusFailed), s)
}

// ToApiResponseTopupYearStatusSuccess mocks base method.
func (m *MockTopupResponseMapper) ToApiResponseTopupYearStatusSuccess(s *pb.ApiResponseTopupYearStatusSuccess) *response.ApiResponseTopupYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTopupYearStatusSuccess", s)
	ret0, _ := ret[0].(*response.ApiResponseTopupYearStatusSuccess)
	return ret0
}

// ToApiResponseTopupYearStatusSuccess indicates an expected call of ToApiResponseTopupYearStatusSuccess.
func (mr *MockTopupResponseMapperMockRecorder) ToApiResponseTopupYearStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTopupYearStatusSuccess", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToApiResponseTopupYearStatusSuccess), s)
}

// MockTransactionResponseMapper is a mock of TransactionResponseMapper interface.
type MockTransactionResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionResponseMapperMockRecorder
	isgomock struct{}
}

// MockTransactionResponseMapperMockRecorder is the mock recorder for MockTransactionResponseMapper.
type MockTransactionResponseMapperMockRecorder struct {
	mock *MockTransactionResponseMapper
}

// NewMockTransactionResponseMapper creates a new mock instance.
func NewMockTransactionResponseMapper(ctrl *gomock.Controller) *MockTransactionResponseMapper {
	mock := &MockTransactionResponseMapper{ctrl: ctrl}
	mock.recorder = &MockTransactionResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionResponseMapper) EXPECT() *MockTransactionResponseMapperMockRecorder {
	return m.recorder
}

// ToApiResponsePaginationTransaction mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponsePaginationTransaction(pbResponse *pb.ApiResponsePaginationTransaction) *response.ApiResponsePaginationTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationTransaction", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationTransaction)
	return ret0
}

// ToApiResponsePaginationTransaction indicates an expected call of ToApiResponsePaginationTransaction.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponsePaginationTransaction(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationTransaction", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponsePaginationTransaction), pbResponse)
}

// ToApiResponsePaginationTransactionDeleteAt mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponsePaginationTransactionDeleteAt(pbResponse *pb.ApiResponsePaginationTransactionDeleteAt) *response.ApiResponsePaginationTransactionDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationTransactionDeleteAt", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationTransactionDeleteAt)
	return ret0
}

// ToApiResponsePaginationTransactionDeleteAt indicates an expected call of ToApiResponsePaginationTransactionDeleteAt.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponsePaginationTransactionDeleteAt(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationTransactionDeleteAt", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponsePaginationTransactionDeleteAt), pbResponse)
}

// ToApiResponseTransaction mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransaction(pbResponse *pb.ApiResponseTransaction) *response.ApiResponseTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransaction", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransaction)
	return ret0
}

// ToApiResponseTransaction indicates an expected call of ToApiResponseTransaction.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransaction(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransaction", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransaction), pbResponse)
}

// ToApiResponseTransactionAll mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionAll(pbResponse *pb.ApiResponseTransactionAll) *response.ApiResponseTransactionAll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionAll", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionAll)
	return ret0
}

// ToApiResponseTransactionAll indicates an expected call of ToApiResponseTransactionAll.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionAll(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionAll", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionAll), pbResponse)
}

// ToApiResponseTransactionDelete mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionDelete(pbResponse *pb.ApiResponseTransactionDelete) *response.ApiResponseTransactionDelete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionDelete", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionDelete)
	return ret0
}

// ToApiResponseTransactionDelete indicates an expected call of ToApiResponseTransactionDelete.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionDelete(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionDelete", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionDelete), pbResponse)
}

// ToApiResponseTransactionMonthAmount mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionMonthAmount(pbResponse *pb.ApiResponseTransactionMonthAmount) *response.ApiResponseTransactionMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionMonthAmount", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionMonthAmount)
	return ret0
}

// ToApiResponseTransactionMonthAmount indicates an expected call of ToApiResponseTransactionMonthAmount.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionMonthAmount(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionMonthAmount", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionMonthAmount), pbResponse)
}

// ToApiResponseTransactionMonthMethod mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionMonthMethod(pbResponse *pb.ApiResponseTransactionMonthMethod) *response.ApiResponseTransactionMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionMonthMethod", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionMonthMethod)
	return ret0
}

// ToApiResponseTransactionMonthMethod indicates an expected call of ToApiResponseTransactionMonthMethod.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionMonthMethod(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionMonthMethod", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionMonthMethod), pbResponse)
}

// ToApiResponseTransactionMonthStatusFailed mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionMonthStatusFailed(pbResponse *pb.ApiResponseTransactionMonthStatusFailed) *response.ApiResponseTransactionMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionMonthStatusFailed", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionMonthStatusFailed)
	return ret0
}

// ToApiResponseTransactionMonthStatusFailed indicates an expected call of ToApiResponseTransactionMonthStatusFailed.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionMonthStatusFailed(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionMonthStatusFailed", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionMonthStatusFailed), pbResponse)
}

// ToApiResponseTransactionMonthStatusSuccess mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionMonthStatusSuccess(pbResponse *pb.ApiResponseTransactionMonthStatusSuccess) *response.ApiResponseTransactionMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionMonthStatusSuccess", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionMonthStatusSuccess)
	return ret0
}

// ToApiResponseTransactionMonthStatusSuccess indicates an expected call of ToApiResponseTransactionMonthStatusSuccess.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionMonthStatusSuccess(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionMonthStatusSuccess", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionMonthStatusSuccess), pbResponse)
}

// ToApiResponseTransactionYearAmount mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionYearAmount(pbResponse *pb.ApiResponseTransactionYearAmount) *response.ApiResponseTransactionYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionYearAmount", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionYearAmount)
	return ret0
}

// ToApiResponseTransactionYearAmount indicates an expected call of ToApiResponseTransactionYearAmount.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionYearAmount(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionYearAmount", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionYearAmount), pbResponse)
}

// ToApiResponseTransactionYearMethod mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionYearMethod(pbResponse *pb.ApiResponseTransactionYearMethod) *response.ApiResponseTransactionYearMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionYearMethod", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionYearMethod)
	return ret0
}

// ToApiResponseTransactionYearMethod indicates an expected call of ToApiResponseTransactionYearMethod.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionYearMethod(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionYearMethod", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionYearMethod), pbResponse)
}

// ToApiResponseTransactionYearStatusFailed mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionYearStatusFailed(pbResponse *pb.ApiResponseTransactionYearStatusFailed) *response.ApiResponseTransactionYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionYearStatusFailed", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionYearStatusFailed)
	return ret0
}

// ToApiResponseTransactionYearStatusFailed indicates an expected call of ToApiResponseTransactionYearStatusFailed.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionYearStatusFailed(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionYearStatusFailed", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionYearStatusFailed), pbResponse)
}

// ToApiResponseTransactionYearStatusSuccess mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactionYearStatusSuccess(pbResponse *pb.ApiResponseTransactionYearStatusSuccess) *response.ApiResponseTransactionYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactionYearStatusSuccess", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactionYearStatusSuccess)
	return ret0
}

// ToApiResponseTransactionYearStatusSuccess indicates an expected call of ToApiResponseTransactionYearStatusSuccess.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactionYearStatusSuccess(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactionYearStatusSuccess", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactionYearStatusSuccess), pbResponse)
}

// ToApiResponseTransactions mocks base method.
func (m *MockTransactionResponseMapper) ToApiResponseTransactions(pbResponse *pb.ApiResponseTransactions) *response.ApiResponseTransactions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransactions", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransactions)
	return ret0
}

// ToApiResponseTransactions indicates an expected call of ToApiResponseTransactions.
func (mr *MockTransactionResponseMapperMockRecorder) ToApiResponseTransactions(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransactions", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToApiResponseTransactions), pbResponse)
}

// MockTransferResponseMapper is a mock of TransferResponseMapper interface.
type MockTransferResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTransferResponseMapperMockRecorder
	isgomock struct{}
}

// MockTransferResponseMapperMockRecorder is the mock recorder for MockTransferResponseMapper.
type MockTransferResponseMapperMockRecorder struct {
	mock *MockTransferResponseMapper
}

// NewMockTransferResponseMapper creates a new mock instance.
func NewMockTransferResponseMapper(ctrl *gomock.Controller) *MockTransferResponseMapper {
	mock := &MockTransferResponseMapper{ctrl: ctrl}
	mock.recorder = &MockTransferResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferResponseMapper) EXPECT() *MockTransferResponseMapperMockRecorder {
	return m.recorder
}

// ToApiResponsePaginationTransfer mocks base method.
func (m *MockTransferResponseMapper) ToApiResponsePaginationTransfer(pbResponse *pb.ApiResponsePaginationTransfer) *response.ApiResponsePaginationTransfer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationTransfer", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationTransfer)
	return ret0
}

// ToApiResponsePaginationTransfer indicates an expected call of ToApiResponsePaginationTransfer.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponsePaginationTransfer(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationTransfer", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponsePaginationTransfer), pbResponse)
}

// ToApiResponsePaginationTransferDeleteAt mocks base method.
func (m *MockTransferResponseMapper) ToApiResponsePaginationTransferDeleteAt(pbResponse *pb.ApiResponsePaginationTransferDeleteAt) *response.ApiResponsePaginationTransferDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationTransferDeleteAt", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationTransferDeleteAt)
	return ret0
}

// ToApiResponsePaginationTransferDeleteAt indicates an expected call of ToApiResponsePaginationTransferDeleteAt.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponsePaginationTransferDeleteAt(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationTransferDeleteAt", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponsePaginationTransferDeleteAt), pbResponse)
}

// ToApiResponseTransfer mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransfer(pbResponse *pb.ApiResponseTransfer) *response.ApiResponseTransfer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransfer", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransfer)
	return ret0
}

// ToApiResponseTransfer indicates an expected call of ToApiResponseTransfer.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransfer(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransfer", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransfer), pbResponse)
}

// ToApiResponseTransferAll mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransferAll(pbResponse *pb.ApiResponseTransferAll) *response.ApiResponseTransferAll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransferAll", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransferAll)
	return ret0
}

// ToApiResponseTransferAll indicates an expected call of ToApiResponseTransferAll.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransferAll(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransferAll", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransferAll), pbResponse)
}

// ToApiResponseTransferDelete mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransferDelete(pbResponse *pb.ApiResponseTransferDelete) *response.ApiResponseTransferDelete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransferDelete", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransferDelete)
	return ret0
}

// ToApiResponseTransferDelete indicates an expected call of ToApiResponseTransferDelete.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransferDelete(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransferDelete", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransferDelete), pbResponse)
}

// ToApiResponseTransferMonthAmount mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransferMonthAmount(pbResponse *pb.ApiResponseTransferMonthAmount) *response.ApiResponseTransferMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransferMonthAmount", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransferMonthAmount)
	return ret0
}

// ToApiResponseTransferMonthAmount indicates an expected call of ToApiResponseTransferMonthAmount.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransferMonthAmount(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransferMonthAmount", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransferMonthAmount), pbResponse)
}

// ToApiResponseTransferMonthStatusFailed mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransferMonthStatusFailed(pbResponse *pb.ApiResponseTransferMonthStatusFailed) *response.ApiResponseTransferMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransferMonthStatusFailed", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransferMonthStatusFailed)
	return ret0
}

// ToApiResponseTransferMonthStatusFailed indicates an expected call of ToApiResponseTransferMonthStatusFailed.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransferMonthStatusFailed(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransferMonthStatusFailed", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransferMonthStatusFailed), pbResponse)
}

// ToApiResponseTransferMonthStatusSuccess mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransferMonthStatusSuccess(pbResponse *pb.ApiResponseTransferMonthStatusSuccess) *response.ApiResponseTransferMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransferMonthStatusSuccess", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransferMonthStatusSuccess)
	return ret0
}

// ToApiResponseTransferMonthStatusSuccess indicates an expected call of ToApiResponseTransferMonthStatusSuccess.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransferMonthStatusSuccess(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransferMonthStatusSuccess", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransferMonthStatusSuccess), pbResponse)
}

// ToApiResponseTransferYearAmount mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransferYearAmount(pbResponse *pb.ApiResponseTransferYearAmount) *response.ApiResponseTransferYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransferYearAmount", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransferYearAmount)
	return ret0
}

// ToApiResponseTransferYearAmount indicates an expected call of ToApiResponseTransferYearAmount.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransferYearAmount(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransferYearAmount", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransferYearAmount), pbResponse)
}

// ToApiResponseTransferYearStatusFailed mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransferYearStatusFailed(pbResponse *pb.ApiResponseTransferYearStatusFailed) *response.ApiResponseTransferYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransferYearStatusFailed", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransferYearStatusFailed)
	return ret0
}

// ToApiResponseTransferYearStatusFailed indicates an expected call of ToApiResponseTransferYearStatusFailed.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransferYearStatusFailed(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransferYearStatusFailed", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransferYearStatusFailed), pbResponse)
}

// ToApiResponseTransferYearStatusSuccess mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransferYearStatusSuccess(pbResponse *pb.ApiResponseTransferYearStatusSuccess) *response.ApiResponseTransferYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransferYearStatusSuccess", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransferYearStatusSuccess)
	return ret0
}

// ToApiResponseTransferYearStatusSuccess indicates an expected call of ToApiResponseTransferYearStatusSuccess.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransferYearStatusSuccess(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransferYearStatusSuccess", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransferYearStatusSuccess), pbResponse)
}

// ToApiResponseTransfers mocks base method.
func (m *MockTransferResponseMapper) ToApiResponseTransfers(pbResponse *pb.ApiResponseTransfers) *response.ApiResponseTransfers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseTransfers", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseTransfers)
	return ret0
}

// ToApiResponseTransfers indicates an expected call of ToApiResponseTransfers.
func (mr *MockTransferResponseMapperMockRecorder) ToApiResponseTransfers(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseTransfers", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToApiResponseTransfers), pbResponse)
}

// MockUserResponseMapper is a mock of UserResponseMapper interface.
type MockUserResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockUserResponseMapperMockRecorder
	isgomock struct{}
}

// MockUserResponseMapperMockRecorder is the mock recorder for MockUserResponseMapper.
type MockUserResponseMapperMockRecorder struct {
	mock *MockUserResponseMapper
}

// NewMockUserResponseMapper creates a new mock instance.
func NewMockUserResponseMapper(ctrl *gomock.Controller) *MockUserResponseMapper {
	mock := &MockUserResponseMapper{ctrl: ctrl}
	mock.recorder = &MockUserResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserResponseMapper) EXPECT() *MockUserResponseMapperMockRecorder {
	return m.recorder
}

// ToApiResponsePaginationUser mocks base method.
func (m *MockUserResponseMapper) ToApiResponsePaginationUser(pbResponse *pb.ApiResponsePaginationUser) *response.ApiResponsePaginationUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationUser", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationUser)
	return ret0
}

// ToApiResponsePaginationUser indicates an expected call of ToApiResponsePaginationUser.
func (mr *MockUserResponseMapperMockRecorder) ToApiResponsePaginationUser(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationUser", reflect.TypeOf((*MockUserResponseMapper)(nil).ToApiResponsePaginationUser), pbResponse)
}

// ToApiResponsePaginationUserDeleteAt mocks base method.
func (m *MockUserResponseMapper) ToApiResponsePaginationUserDeleteAt(pbResponse *pb.ApiResponsePaginationUserDeleteAt) *response.ApiResponsePaginationUserDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationUserDeleteAt", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationUserDeleteAt)
	return ret0
}

// ToApiResponsePaginationUserDeleteAt indicates an expected call of ToApiResponsePaginationUserDeleteAt.
func (mr *MockUserResponseMapperMockRecorder) ToApiResponsePaginationUserDeleteAt(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationUserDeleteAt", reflect.TypeOf((*MockUserResponseMapper)(nil).ToApiResponsePaginationUserDeleteAt), pbResponse)
}

// ToApiResponseUser mocks base method.
func (m *MockUserResponseMapper) ToApiResponseUser(pbResponse *pb.ApiResponseUser) *response.ApiResponseUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseUser", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseUser)
	return ret0
}

// ToApiResponseUser indicates an expected call of ToApiResponseUser.
func (mr *MockUserResponseMapperMockRecorder) ToApiResponseUser(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseUser", reflect.TypeOf((*MockUserResponseMapper)(nil).ToApiResponseUser), pbResponse)
}

// ToApiResponseUserAll mocks base method.
func (m *MockUserResponseMapper) ToApiResponseUserAll(pbResponse *pb.ApiResponseUserAll) *response.ApiResponseUserAll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseUserAll", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseUserAll)
	return ret0
}

// ToApiResponseUserAll indicates an expected call of ToApiResponseUserAll.
func (mr *MockUserResponseMapperMockRecorder) ToApiResponseUserAll(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseUserAll", reflect.TypeOf((*MockUserResponseMapper)(nil).ToApiResponseUserAll), pbResponse)
}

// ToApiResponseUserDelete mocks base method.
func (m *MockUserResponseMapper) ToApiResponseUserDelete(pbResponse *pb.ApiResponseUserDelete) *response.ApiResponseUserDelete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseUserDelete", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseUserDelete)
	return ret0
}

// ToApiResponseUserDelete indicates an expected call of ToApiResponseUserDelete.
func (mr *MockUserResponseMapperMockRecorder) ToApiResponseUserDelete(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseUserDelete", reflect.TypeOf((*MockUserResponseMapper)(nil).ToApiResponseUserDelete), pbResponse)
}

// ToApiResponseUserDeleteAt mocks base method.
func (m *MockUserResponseMapper) ToApiResponseUserDeleteAt(pbResponse *pb.ApiResponseUserDeleteAt) *response.ApiResponseUserDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseUserDeleteAt", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseUserDeleteAt)
	return ret0
}

// ToApiResponseUserDeleteAt indicates an expected call of ToApiResponseUserDeleteAt.
func (mr *MockUserResponseMapperMockRecorder) ToApiResponseUserDeleteAt(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseUserDeleteAt", reflect.TypeOf((*MockUserResponseMapper)(nil).ToApiResponseUserDeleteAt), pbResponse)
}

// ToApiResponsesUser mocks base method.
func (m *MockUserResponseMapper) ToApiResponsesUser(pbResponse *pb.ApiResponsesUser) *response.ApiResponsesUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsesUser", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsesUser)
	return ret0
}

// ToApiResponsesUser indicates an expected call of ToApiResponsesUser.
func (mr *MockUserResponseMapperMockRecorder) ToApiResponsesUser(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsesUser", reflect.TypeOf((*MockUserResponseMapper)(nil).ToApiResponsesUser), pbResponse)
}

// MockWithdrawResponseMapper is a mock of WithdrawResponseMapper interface.
type MockWithdrawResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawResponseMapperMockRecorder
	isgomock struct{}
}

// MockWithdrawResponseMapperMockRecorder is the mock recorder for MockWithdrawResponseMapper.
type MockWithdrawResponseMapperMockRecorder struct {
	mock *MockWithdrawResponseMapper
}

// NewMockWithdrawResponseMapper creates a new mock instance.
func NewMockWithdrawResponseMapper(ctrl *gomock.Controller) *MockWithdrawResponseMapper {
	mock := &MockWithdrawResponseMapper{ctrl: ctrl}
	mock.recorder = &MockWithdrawResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawResponseMapper) EXPECT() *MockWithdrawResponseMapperMockRecorder {
	return m.recorder
}

// ToApiResponsePaginationWithdraw mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponsePaginationWithdraw(pbResponse *pb.ApiResponsePaginationWithdraw) *response.ApiResponsePaginationWithdraw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationWithdraw", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationWithdraw)
	return ret0
}

// ToApiResponsePaginationWithdraw indicates an expected call of ToApiResponsePaginationWithdraw.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponsePaginationWithdraw(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationWithdraw", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponsePaginationWithdraw), pbResponse)
}

// ToApiResponsePaginationWithdrawDeleteAt mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponsePaginationWithdrawDeleteAt(pbResponse *pb.ApiResponsePaginationWithdrawDeleteAt) *response.ApiResponsePaginationWithdrawDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsePaginationWithdrawDeleteAt", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsePaginationWithdrawDeleteAt)
	return ret0
}

// ToApiResponsePaginationWithdrawDeleteAt indicates an expected call of ToApiResponsePaginationWithdrawDeleteAt.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponsePaginationWithdrawDeleteAt(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsePaginationWithdrawDeleteAt", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponsePaginationWithdrawDeleteAt), pbResponse)
}

// ToApiResponseWithdraw mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponseWithdraw(pbResponse *pb.ApiResponseWithdraw) *response.ApiResponseWithdraw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseWithdraw", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseWithdraw)
	return ret0
}

// ToApiResponseWithdraw indicates an expected call of ToApiResponseWithdraw.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponseWithdraw(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseWithdraw", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponseWithdraw), pbResponse)
}

// ToApiResponseWithdrawAll mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponseWithdrawAll(pbResponse *pb.ApiResponseWithdrawAll) *response.ApiResponseWithdrawAll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseWithdrawAll", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseWithdrawAll)
	return ret0
}

// ToApiResponseWithdrawAll indicates an expected call of ToApiResponseWithdrawAll.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponseWithdrawAll(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseWithdrawAll", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponseWithdrawAll), pbResponse)
}

// ToApiResponseWithdrawDelete mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponseWithdrawDelete(pbResponse *pb.ApiResponseWithdrawDelete) *response.ApiResponseWithdrawDelete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseWithdrawDelete", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseWithdrawDelete)
	return ret0
}

// ToApiResponseWithdrawDelete indicates an expected call of ToApiResponseWithdrawDelete.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponseWithdrawDelete(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseWithdrawDelete", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponseWithdrawDelete), pbResponse)
}

// ToApiResponseWithdrawMonthAmount mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponseWithdrawMonthAmount(pbResponse *pb.ApiResponseWithdrawMonthAmount) *response.ApiResponseWithdrawMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseWithdrawMonthAmount", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseWithdrawMonthAmount)
	return ret0
}

// ToApiResponseWithdrawMonthAmount indicates an expected call of ToApiResponseWithdrawMonthAmount.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponseWithdrawMonthAmount(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseWithdrawMonthAmount", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponseWithdrawMonthAmount), pbResponse)
}

// ToApiResponseWithdrawMonthStatusFailed mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponseWithdrawMonthStatusFailed(pbResponse *pb.ApiResponseWithdrawMonthStatusFailed) *response.ApiResponseWithdrawMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseWithdrawMonthStatusFailed", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseWithdrawMonthStatusFailed)
	return ret0
}

// ToApiResponseWithdrawMonthStatusFailed indicates an expected call of ToApiResponseWithdrawMonthStatusFailed.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponseWithdrawMonthStatusFailed(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseWithdrawMonthStatusFailed", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponseWithdrawMonthStatusFailed), pbResponse)
}

// ToApiResponseWithdrawMonthStatusSuccess mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponseWithdrawMonthStatusSuccess(pbResponse *pb.ApiResponseWithdrawMonthStatusSuccess) *response.ApiResponseWithdrawMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseWithdrawMonthStatusSuccess", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseWithdrawMonthStatusSuccess)
	return ret0
}

// ToApiResponseWithdrawMonthStatusSuccess indicates an expected call of ToApiResponseWithdrawMonthStatusSuccess.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponseWithdrawMonthStatusSuccess(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseWithdrawMonthStatusSuccess", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponseWithdrawMonthStatusSuccess), pbResponse)
}

// ToApiResponseWithdrawYearAmount mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponseWithdrawYearAmount(pbResponse *pb.ApiResponseWithdrawYearAmount) *response.ApiResponseWithdrawYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseWithdrawYearAmount", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseWithdrawYearAmount)
	return ret0
}

// ToApiResponseWithdrawYearAmount indicates an expected call of ToApiResponseWithdrawYearAmount.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponseWithdrawYearAmount(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseWithdrawYearAmount", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponseWithdrawYearAmount), pbResponse)
}

// ToApiResponseWithdrawYearStatusFailed mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponseWithdrawYearStatusFailed(pbResponse *pb.ApiResponseWithdrawYearStatusFailed) *response.ApiResponseWithdrawYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseWithdrawYearStatusFailed", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseWithdrawYearStatusFailed)
	return ret0
}

// ToApiResponseWithdrawYearStatusFailed indicates an expected call of ToApiResponseWithdrawYearStatusFailed.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponseWithdrawYearStatusFailed(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseWithdrawYearStatusFailed", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponseWithdrawYearStatusFailed), pbResponse)
}

// ToApiResponseWithdrawYearStatusSuccess mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponseWithdrawYearStatusSuccess(pbResponse *pb.ApiResponseWithdrawYearStatusSuccess) *response.ApiResponseWithdrawYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponseWithdrawYearStatusSuccess", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponseWithdrawYearStatusSuccess)
	return ret0
}

// ToApiResponseWithdrawYearStatusSuccess indicates an expected call of ToApiResponseWithdrawYearStatusSuccess.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponseWithdrawYearStatusSuccess(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponseWithdrawYearStatusSuccess", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponseWithdrawYearStatusSuccess), pbResponse)
}

// ToApiResponsesWithdraw mocks base method.
func (m *MockWithdrawResponseMapper) ToApiResponsesWithdraw(pbResponse *pb.ApiResponsesWithdraw) *response.ApiResponsesWithdraw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToApiResponsesWithdraw", pbResponse)
	ret0, _ := ret[0].(*response.ApiResponsesWithdraw)
	return ret0
}

// ToApiResponsesWithdraw indicates an expected call of ToApiResponsesWithdraw.
func (mr *MockWithdrawResponseMapperMockRecorder) ToApiResponsesWithdraw(pbResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToApiResponsesWithdraw", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToApiResponsesWithdraw), pbResponse)
}
