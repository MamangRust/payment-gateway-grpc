// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pb/merchant_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/pb/merchant_grpc.pb.go -destination=internal/pb/mocks/merchant_grpc_mock.go
//

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	pb "MamangRust/paymentgatewaygrpc/internal/pb"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMerchantServiceClient is a mock of MerchantServiceClient interface.
type MockMerchantServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantServiceClientMockRecorder
	isgomock struct{}
}

// MockMerchantServiceClientMockRecorder is the mock recorder for MockMerchantServiceClient.
type MockMerchantServiceClientMockRecorder struct {
	mock *MockMerchantServiceClient
}

// NewMockMerchantServiceClient creates a new mock instance.
func NewMockMerchantServiceClient(ctrl *gomock.Controller) *MockMerchantServiceClient {
	mock := &MockMerchantServiceClient{ctrl: ctrl}
	mock.recorder = &MockMerchantServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantServiceClient) EXPECT() *MockMerchantServiceClientMockRecorder {
	return m.recorder
}

// CreateMerchant mocks base method.
func (m *MockMerchantServiceClient) CreateMerchant(ctx context.Context, in *pb.CreateMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMerchant indicates an expected call of CreateMerchant.
func (mr *MockMerchantServiceClientMockRecorder) CreateMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).CreateMerchant), varargs...)
}

// DeleteAllMerchantPermanent mocks base method.
func (m *MockMerchantServiceClient) DeleteAllMerchantPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseMerchantAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllMerchantPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllMerchantPermanent indicates an expected call of DeleteAllMerchantPermanent.
func (mr *MockMerchantServiceClientMockRecorder) DeleteAllMerchantPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllMerchantPermanent", reflect.TypeOf((*MockMerchantServiceClient)(nil).DeleteAllMerchantPermanent), varargs...)
}

// DeleteMerchantPermanent mocks base method.
func (m *MockMerchantServiceClient) DeleteMerchantPermanent(ctx context.Context, in *pb.FindByIdMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponseMerchantDelete, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMerchantPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMerchantPermanent indicates an expected call of DeleteMerchantPermanent.
func (mr *MockMerchantServiceClientMockRecorder) DeleteMerchantPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMerchantPermanent", reflect.TypeOf((*MockMerchantServiceClient)(nil).DeleteMerchantPermanent), varargs...)
}

// FindAllMerchant mocks base method.
func (m *MockMerchantServiceClient) FindAllMerchant(ctx context.Context, in *pb.FindAllMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationMerchant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMerchant indicates an expected call of FindAllMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindAllMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindAllMerchant), varargs...)
}

// FindAllTransactionByApikey mocks base method.
func (m *MockMerchantServiceClient) FindAllTransactionByApikey(ctx context.Context, in *pb.FindAllMerchantApikey, opts ...grpc.CallOption) (*pb.ApiResponsePaginationMerchantTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTransactionByApikey", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransactionByApikey indicates an expected call of FindAllTransactionByApikey.
func (mr *MockMerchantServiceClientMockRecorder) FindAllTransactionByApikey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionByApikey", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindAllTransactionByApikey), varargs...)
}

// FindAllTransactionByMerchant mocks base method.
func (m *MockMerchantServiceClient) FindAllTransactionByMerchant(ctx context.Context, in *pb.FindAllMerchantTransaction, opts ...grpc.CallOption) (*pb.ApiResponsePaginationMerchantTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTransactionByMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransactionByMerchant indicates an expected call of FindAllTransactionByMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindAllTransactionByMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionByMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindAllTransactionByMerchant), varargs...)
}

// FindAllTransactionMerchant mocks base method.
func (m *MockMerchantServiceClient) FindAllTransactionMerchant(ctx context.Context, in *pb.FindAllMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationMerchantTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTransactionMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransactionMerchant indicates an expected call of FindAllTransactionMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindAllTransactionMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindAllTransactionMerchant), varargs...)
}

// FindByActive mocks base method.
func (m *MockMerchantServiceClient) FindByActive(ctx context.Context, in *pb.FindAllMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationMerchantDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByActive", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockMerchantServiceClientMockRecorder) FindByActive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindByActive), varargs...)
}

// FindByApiKey mocks base method.
func (m *MockMerchantServiceClient) FindByApiKey(ctx context.Context, in *pb.FindByApiKeyRequest, opts ...grpc.CallOption) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByApiKey", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByApiKey indicates an expected call of FindByApiKey.
func (mr *MockMerchantServiceClientMockRecorder) FindByApiKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByApiKey", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindByApiKey), varargs...)
}

// FindByIdMerchant mocks base method.
func (m *MockMerchantServiceClient) FindByIdMerchant(ctx context.Context, in *pb.FindByIdMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByIdMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdMerchant indicates an expected call of FindByIdMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindByIdMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindByIdMerchant), varargs...)
}

// FindByMerchantUserId mocks base method.
func (m *MockMerchantServiceClient) FindByMerchantUserId(ctx context.Context, in *pb.FindByMerchantUserIdRequest, opts ...grpc.CallOption) (*pb.ApiResponsesMerchant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByMerchantUserId", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsesMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMerchantUserId indicates an expected call of FindByMerchantUserId.
func (mr *MockMerchantServiceClientMockRecorder) FindByMerchantUserId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMerchantUserId", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindByMerchantUserId), varargs...)
}

// FindByTrashed mocks base method.
func (m *MockMerchantServiceClient) FindByTrashed(ctx context.Context, in *pb.FindAllMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationMerchantDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByTrashed", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockMerchantServiceClientMockRecorder) FindByTrashed(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindByTrashed), varargs...)
}

// FindMonthlyAmountByApikey mocks base method.
func (m *MockMerchantServiceClient) FindMonthlyAmountByApikey(ctx context.Context, in *pb.FindYearMerchantByApikey, opts ...grpc.CallOption) (*pb.ApiResponseMerchantMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyAmountByApikey", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmountByApikey indicates an expected call of FindMonthlyAmountByApikey.
func (mr *MockMerchantServiceClientMockRecorder) FindMonthlyAmountByApikey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmountByApikey", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindMonthlyAmountByApikey), varargs...)
}

// FindMonthlyAmountByMerchants mocks base method.
func (m *MockMerchantServiceClient) FindMonthlyAmountByMerchants(ctx context.Context, in *pb.FindYearMerchantById, opts ...grpc.CallOption) (*pb.ApiResponseMerchantMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyAmountByMerchants", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmountByMerchants indicates an expected call of FindMonthlyAmountByMerchants.
func (mr *MockMerchantServiceClientMockRecorder) FindMonthlyAmountByMerchants(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmountByMerchants", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindMonthlyAmountByMerchants), varargs...)
}

// FindMonthlyAmountMerchant mocks base method.
func (m *MockMerchantServiceClient) FindMonthlyAmountMerchant(ctx context.Context, in *pb.FindYearMerchant, opts ...grpc.CallOption) (*pb.ApiResponseMerchantMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyAmountMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmountMerchant indicates an expected call of FindMonthlyAmountMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindMonthlyAmountMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmountMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindMonthlyAmountMerchant), varargs...)
}

// FindMonthlyPaymentMethodByApikey mocks base method.
func (m *MockMerchantServiceClient) FindMonthlyPaymentMethodByApikey(ctx context.Context, in *pb.FindYearMerchantByApikey, opts ...grpc.CallOption) (*pb.ApiResponseMerchantMonthlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethodByApikey", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethodByApikey indicates an expected call of FindMonthlyPaymentMethodByApikey.
func (mr *MockMerchantServiceClientMockRecorder) FindMonthlyPaymentMethodByApikey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethodByApikey", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindMonthlyPaymentMethodByApikey), varargs...)
}

// FindMonthlyPaymentMethodByMerchants mocks base method.
func (m *MockMerchantServiceClient) FindMonthlyPaymentMethodByMerchants(ctx context.Context, in *pb.FindYearMerchantById, opts ...grpc.CallOption) (*pb.ApiResponseMerchantMonthlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethodByMerchants", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethodByMerchants indicates an expected call of FindMonthlyPaymentMethodByMerchants.
func (mr *MockMerchantServiceClientMockRecorder) FindMonthlyPaymentMethodByMerchants(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethodByMerchants", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindMonthlyPaymentMethodByMerchants), varargs...)
}

// FindMonthlyPaymentMethodsMerchant mocks base method.
func (m *MockMerchantServiceClient) FindMonthlyPaymentMethodsMerchant(ctx context.Context, in *pb.FindYearMerchant, opts ...grpc.CallOption) (*pb.ApiResponseMerchantMonthlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethodsMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethodsMerchant indicates an expected call of FindMonthlyPaymentMethodsMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindMonthlyPaymentMethodsMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethodsMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindMonthlyPaymentMethodsMerchant), varargs...)
}

// FindMonthlyTotalAmountByApikey mocks base method.
func (m *MockMerchantServiceClient) FindMonthlyTotalAmountByApikey(ctx context.Context, in *pb.FindYearMerchantByApikey, opts ...grpc.CallOption) (*pb.ApiResponseMerchantMonthlyTotalAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTotalAmountByApikey", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTotalAmountByApikey indicates an expected call of FindMonthlyTotalAmountByApikey.
func (mr *MockMerchantServiceClientMockRecorder) FindMonthlyTotalAmountByApikey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTotalAmountByApikey", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindMonthlyTotalAmountByApikey), varargs...)
}

// FindMonthlyTotalAmountByMerchants mocks base method.
func (m *MockMerchantServiceClient) FindMonthlyTotalAmountByMerchants(ctx context.Context, in *pb.FindYearMerchantById, opts ...grpc.CallOption) (*pb.ApiResponseMerchantMonthlyTotalAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTotalAmountByMerchants", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTotalAmountByMerchants indicates an expected call of FindMonthlyTotalAmountByMerchants.
func (mr *MockMerchantServiceClientMockRecorder) FindMonthlyTotalAmountByMerchants(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTotalAmountByMerchants", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindMonthlyTotalAmountByMerchants), varargs...)
}

// FindMonthlyTotalAmountMerchant mocks base method.
func (m *MockMerchantServiceClient) FindMonthlyTotalAmountMerchant(ctx context.Context, in *pb.FindYearMerchant, opts ...grpc.CallOption) (*pb.ApiResponseMerchantMonthlyTotalAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTotalAmountMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTotalAmountMerchant indicates an expected call of FindMonthlyTotalAmountMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindMonthlyTotalAmountMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTotalAmountMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindMonthlyTotalAmountMerchant), varargs...)
}

// FindYearlyAmountByApikey mocks base method.
func (m *MockMerchantServiceClient) FindYearlyAmountByApikey(ctx context.Context, in *pb.FindYearMerchantByApikey, opts ...grpc.CallOption) (*pb.ApiResponseMerchantYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyAmountByApikey", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmountByApikey indicates an expected call of FindYearlyAmountByApikey.
func (mr *MockMerchantServiceClientMockRecorder) FindYearlyAmountByApikey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmountByApikey", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindYearlyAmountByApikey), varargs...)
}

// FindYearlyAmountByMerchants mocks base method.
func (m *MockMerchantServiceClient) FindYearlyAmountByMerchants(ctx context.Context, in *pb.FindYearMerchantById, opts ...grpc.CallOption) (*pb.ApiResponseMerchantYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyAmountByMerchants", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmountByMerchants indicates an expected call of FindYearlyAmountByMerchants.
func (mr *MockMerchantServiceClientMockRecorder) FindYearlyAmountByMerchants(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmountByMerchants", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindYearlyAmountByMerchants), varargs...)
}

// FindYearlyAmountMerchant mocks base method.
func (m *MockMerchantServiceClient) FindYearlyAmountMerchant(ctx context.Context, in *pb.FindYearMerchant, opts ...grpc.CallOption) (*pb.ApiResponseMerchantYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyAmountMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmountMerchant indicates an expected call of FindYearlyAmountMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindYearlyAmountMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmountMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindYearlyAmountMerchant), varargs...)
}

// FindYearlyPaymentMethodByApikey mocks base method.
func (m *MockMerchantServiceClient) FindYearlyPaymentMethodByApikey(ctx context.Context, in *pb.FindYearMerchantByApikey, opts ...grpc.CallOption) (*pb.ApiResponseMerchantYearlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethodByApikey", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethodByApikey indicates an expected call of FindYearlyPaymentMethodByApikey.
func (mr *MockMerchantServiceClientMockRecorder) FindYearlyPaymentMethodByApikey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethodByApikey", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindYearlyPaymentMethodByApikey), varargs...)
}

// FindYearlyPaymentMethodByMerchants mocks base method.
func (m *MockMerchantServiceClient) FindYearlyPaymentMethodByMerchants(ctx context.Context, in *pb.FindYearMerchantById, opts ...grpc.CallOption) (*pb.ApiResponseMerchantYearlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethodByMerchants", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethodByMerchants indicates an expected call of FindYearlyPaymentMethodByMerchants.
func (mr *MockMerchantServiceClientMockRecorder) FindYearlyPaymentMethodByMerchants(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethodByMerchants", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindYearlyPaymentMethodByMerchants), varargs...)
}

// FindYearlyPaymentMethodMerchant mocks base method.
func (m *MockMerchantServiceClient) FindYearlyPaymentMethodMerchant(ctx context.Context, in *pb.FindYearMerchant, opts ...grpc.CallOption) (*pb.ApiResponseMerchantYearlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethodMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethodMerchant indicates an expected call of FindYearlyPaymentMethodMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindYearlyPaymentMethodMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethodMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindYearlyPaymentMethodMerchant), varargs...)
}

// FindYearlyTotalAmountByApikey mocks base method.
func (m *MockMerchantServiceClient) FindYearlyTotalAmountByApikey(ctx context.Context, in *pb.FindYearMerchantByApikey, opts ...grpc.CallOption) (*pb.ApiResponseMerchantYearlyTotalAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTotalAmountByApikey", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTotalAmountByApikey indicates an expected call of FindYearlyTotalAmountByApikey.
func (mr *MockMerchantServiceClientMockRecorder) FindYearlyTotalAmountByApikey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTotalAmountByApikey", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindYearlyTotalAmountByApikey), varargs...)
}

// FindYearlyTotalAmountByMerchants mocks base method.
func (m *MockMerchantServiceClient) FindYearlyTotalAmountByMerchants(ctx context.Context, in *pb.FindYearMerchantById, opts ...grpc.CallOption) (*pb.ApiResponseMerchantYearlyTotalAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTotalAmountByMerchants", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTotalAmountByMerchants indicates an expected call of FindYearlyTotalAmountByMerchants.
func (mr *MockMerchantServiceClientMockRecorder) FindYearlyTotalAmountByMerchants(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTotalAmountByMerchants", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindYearlyTotalAmountByMerchants), varargs...)
}

// FindYearlyTotalAmountMerchant mocks base method.
func (m *MockMerchantServiceClient) FindYearlyTotalAmountMerchant(ctx context.Context, in *pb.FindYearMerchant, opts ...grpc.CallOption) (*pb.ApiResponseMerchantYearlyTotalAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTotalAmountMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTotalAmountMerchant indicates an expected call of FindYearlyTotalAmountMerchant.
func (mr *MockMerchantServiceClientMockRecorder) FindYearlyTotalAmountMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTotalAmountMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).FindYearlyTotalAmountMerchant), varargs...)
}

// RestoreAllMerchant mocks base method.
func (m *MockMerchantServiceClient) RestoreAllMerchant(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseMerchantAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreAllMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllMerchant indicates an expected call of RestoreAllMerchant.
func (mr *MockMerchantServiceClientMockRecorder) RestoreAllMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).RestoreAllMerchant), varargs...)
}

// RestoreMerchant mocks base method.
func (m *MockMerchantServiceClient) RestoreMerchant(ctx context.Context, in *pb.FindByIdMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreMerchant indicates an expected call of RestoreMerchant.
func (mr *MockMerchantServiceClientMockRecorder) RestoreMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).RestoreMerchant), varargs...)
}

// TrashedMerchant mocks base method.
func (m *MockMerchantServiceClient) TrashedMerchant(ctx context.Context, in *pb.FindByIdMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrashedMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedMerchant indicates an expected call of TrashedMerchant.
func (mr *MockMerchantServiceClientMockRecorder) TrashedMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).TrashedMerchant), varargs...)
}

// UpdateMerchant mocks base method.
func (m *MockMerchantServiceClient) UpdateMerchant(ctx context.Context, in *pb.UpdateMerchantRequest, opts ...grpc.CallOption) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMerchant", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMerchant indicates an expected call of UpdateMerchant.
func (mr *MockMerchantServiceClientMockRecorder) UpdateMerchant(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchant", reflect.TypeOf((*MockMerchantServiceClient)(nil).UpdateMerchant), varargs...)
}

// MockMerchantServiceServer is a mock of MerchantServiceServer interface.
type MockMerchantServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantServiceServerMockRecorder
	isgomock struct{}
}

// MockMerchantServiceServerMockRecorder is the mock recorder for MockMerchantServiceServer.
type MockMerchantServiceServerMockRecorder struct {
	mock *MockMerchantServiceServer
}

// NewMockMerchantServiceServer creates a new mock instance.
func NewMockMerchantServiceServer(ctrl *gomock.Controller) *MockMerchantServiceServer {
	mock := &MockMerchantServiceServer{ctrl: ctrl}
	mock.recorder = &MockMerchantServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantServiceServer) EXPECT() *MockMerchantServiceServerMockRecorder {
	return m.recorder
}

// CreateMerchant mocks base method.
func (m *MockMerchantServiceServer) CreateMerchant(arg0 context.Context, arg1 *pb.CreateMerchantRequest) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMerchant indicates an expected call of CreateMerchant.
func (mr *MockMerchantServiceServerMockRecorder) CreateMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).CreateMerchant), arg0, arg1)
}

// DeleteAllMerchantPermanent mocks base method.
func (m *MockMerchantServiceServer) DeleteAllMerchantPermanent(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseMerchantAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllMerchantPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllMerchantPermanent indicates an expected call of DeleteAllMerchantPermanent.
func (mr *MockMerchantServiceServerMockRecorder) DeleteAllMerchantPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllMerchantPermanent", reflect.TypeOf((*MockMerchantServiceServer)(nil).DeleteAllMerchantPermanent), arg0, arg1)
}

// DeleteMerchantPermanent mocks base method.
func (m *MockMerchantServiceServer) DeleteMerchantPermanent(arg0 context.Context, arg1 *pb.FindByIdMerchantRequest) (*pb.ApiResponseMerchantDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMerchantPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMerchantPermanent indicates an expected call of DeleteMerchantPermanent.
func (mr *MockMerchantServiceServerMockRecorder) DeleteMerchantPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMerchantPermanent", reflect.TypeOf((*MockMerchantServiceServer)(nil).DeleteMerchantPermanent), arg0, arg1)
}

// FindAllMerchant mocks base method.
func (m *MockMerchantServiceServer) FindAllMerchant(arg0 context.Context, arg1 *pb.FindAllMerchantRequest) (*pb.ApiResponsePaginationMerchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMerchant indicates an expected call of FindAllMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindAllMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindAllMerchant), arg0, arg1)
}

// FindAllTransactionByApikey mocks base method.
func (m *MockMerchantServiceServer) FindAllTransactionByApikey(arg0 context.Context, arg1 *pb.FindAllMerchantApikey) (*pb.ApiResponsePaginationMerchantTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactionByApikey", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransactionByApikey indicates an expected call of FindAllTransactionByApikey.
func (mr *MockMerchantServiceServerMockRecorder) FindAllTransactionByApikey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionByApikey", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindAllTransactionByApikey), arg0, arg1)
}

// FindAllTransactionByMerchant mocks base method.
func (m *MockMerchantServiceServer) FindAllTransactionByMerchant(arg0 context.Context, arg1 *pb.FindAllMerchantTransaction) (*pb.ApiResponsePaginationMerchantTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactionByMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransactionByMerchant indicates an expected call of FindAllTransactionByMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindAllTransactionByMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionByMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindAllTransactionByMerchant), arg0, arg1)
}

// FindAllTransactionMerchant mocks base method.
func (m *MockMerchantServiceServer) FindAllTransactionMerchant(arg0 context.Context, arg1 *pb.FindAllMerchantRequest) (*pb.ApiResponsePaginationMerchantTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactionMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransactionMerchant indicates an expected call of FindAllTransactionMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindAllTransactionMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindAllTransactionMerchant), arg0, arg1)
}

// FindByActive mocks base method.
func (m *MockMerchantServiceServer) FindByActive(arg0 context.Context, arg1 *pb.FindAllMerchantRequest) (*pb.ApiResponsePaginationMerchantDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockMerchantServiceServerMockRecorder) FindByActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindByActive), arg0, arg1)
}

// FindByApiKey mocks base method.
func (m *MockMerchantServiceServer) FindByApiKey(arg0 context.Context, arg1 *pb.FindByApiKeyRequest) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByApiKey", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByApiKey indicates an expected call of FindByApiKey.
func (mr *MockMerchantServiceServerMockRecorder) FindByApiKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByApiKey", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindByApiKey), arg0, arg1)
}

// FindByIdMerchant mocks base method.
func (m *MockMerchantServiceServer) FindByIdMerchant(arg0 context.Context, arg1 *pb.FindByIdMerchantRequest) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdMerchant indicates an expected call of FindByIdMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindByIdMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindByIdMerchant), arg0, arg1)
}

// FindByMerchantUserId mocks base method.
func (m *MockMerchantServiceServer) FindByMerchantUserId(arg0 context.Context, arg1 *pb.FindByMerchantUserIdRequest) (*pb.ApiResponsesMerchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMerchantUserId", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsesMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMerchantUserId indicates an expected call of FindByMerchantUserId.
func (mr *MockMerchantServiceServerMockRecorder) FindByMerchantUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMerchantUserId", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindByMerchantUserId), arg0, arg1)
}

// FindByTrashed mocks base method.
func (m *MockMerchantServiceServer) FindByTrashed(arg0 context.Context, arg1 *pb.FindAllMerchantRequest) (*pb.ApiResponsePaginationMerchantDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationMerchantDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockMerchantServiceServerMockRecorder) FindByTrashed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindByTrashed), arg0, arg1)
}

// FindMonthlyAmountByApikey mocks base method.
func (m *MockMerchantServiceServer) FindMonthlyAmountByApikey(arg0 context.Context, arg1 *pb.FindYearMerchantByApikey) (*pb.ApiResponseMerchantMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyAmountByApikey", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmountByApikey indicates an expected call of FindMonthlyAmountByApikey.
func (mr *MockMerchantServiceServerMockRecorder) FindMonthlyAmountByApikey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmountByApikey", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindMonthlyAmountByApikey), arg0, arg1)
}

// FindMonthlyAmountByMerchants mocks base method.
func (m *MockMerchantServiceServer) FindMonthlyAmountByMerchants(arg0 context.Context, arg1 *pb.FindYearMerchantById) (*pb.ApiResponseMerchantMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyAmountByMerchants", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmountByMerchants indicates an expected call of FindMonthlyAmountByMerchants.
func (mr *MockMerchantServiceServerMockRecorder) FindMonthlyAmountByMerchants(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmountByMerchants", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindMonthlyAmountByMerchants), arg0, arg1)
}

// FindMonthlyAmountMerchant mocks base method.
func (m *MockMerchantServiceServer) FindMonthlyAmountMerchant(arg0 context.Context, arg1 *pb.FindYearMerchant) (*pb.ApiResponseMerchantMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyAmountMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmountMerchant indicates an expected call of FindMonthlyAmountMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindMonthlyAmountMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmountMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindMonthlyAmountMerchant), arg0, arg1)
}

// FindMonthlyPaymentMethodByApikey mocks base method.
func (m *MockMerchantServiceServer) FindMonthlyPaymentMethodByApikey(arg0 context.Context, arg1 *pb.FindYearMerchantByApikey) (*pb.ApiResponseMerchantMonthlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethodByApikey", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethodByApikey indicates an expected call of FindMonthlyPaymentMethodByApikey.
func (mr *MockMerchantServiceServerMockRecorder) FindMonthlyPaymentMethodByApikey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethodByApikey", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindMonthlyPaymentMethodByApikey), arg0, arg1)
}

// FindMonthlyPaymentMethodByMerchants mocks base method.
func (m *MockMerchantServiceServer) FindMonthlyPaymentMethodByMerchants(arg0 context.Context, arg1 *pb.FindYearMerchantById) (*pb.ApiResponseMerchantMonthlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethodByMerchants", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethodByMerchants indicates an expected call of FindMonthlyPaymentMethodByMerchants.
func (mr *MockMerchantServiceServerMockRecorder) FindMonthlyPaymentMethodByMerchants(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethodByMerchants", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindMonthlyPaymentMethodByMerchants), arg0, arg1)
}

// FindMonthlyPaymentMethodsMerchant mocks base method.
func (m *MockMerchantServiceServer) FindMonthlyPaymentMethodsMerchant(arg0 context.Context, arg1 *pb.FindYearMerchant) (*pb.ApiResponseMerchantMonthlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethodsMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethodsMerchant indicates an expected call of FindMonthlyPaymentMethodsMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindMonthlyPaymentMethodsMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethodsMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindMonthlyPaymentMethodsMerchant), arg0, arg1)
}

// FindMonthlyTotalAmountByApikey mocks base method.
func (m *MockMerchantServiceServer) FindMonthlyTotalAmountByApikey(arg0 context.Context, arg1 *pb.FindYearMerchantByApikey) (*pb.ApiResponseMerchantMonthlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTotalAmountByApikey", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTotalAmountByApikey indicates an expected call of FindMonthlyTotalAmountByApikey.
func (mr *MockMerchantServiceServerMockRecorder) FindMonthlyTotalAmountByApikey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTotalAmountByApikey", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindMonthlyTotalAmountByApikey), arg0, arg1)
}

// FindMonthlyTotalAmountByMerchants mocks base method.
func (m *MockMerchantServiceServer) FindMonthlyTotalAmountByMerchants(arg0 context.Context, arg1 *pb.FindYearMerchantById) (*pb.ApiResponseMerchantMonthlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTotalAmountByMerchants", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTotalAmountByMerchants indicates an expected call of FindMonthlyTotalAmountByMerchants.
func (mr *MockMerchantServiceServerMockRecorder) FindMonthlyTotalAmountByMerchants(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTotalAmountByMerchants", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindMonthlyTotalAmountByMerchants), arg0, arg1)
}

// FindMonthlyTotalAmountMerchant mocks base method.
func (m *MockMerchantServiceServer) FindMonthlyTotalAmountMerchant(arg0 context.Context, arg1 *pb.FindYearMerchant) (*pb.ApiResponseMerchantMonthlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTotalAmountMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantMonthlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTotalAmountMerchant indicates an expected call of FindMonthlyTotalAmountMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindMonthlyTotalAmountMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTotalAmountMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindMonthlyTotalAmountMerchant), arg0, arg1)
}

// FindYearlyAmountByApikey mocks base method.
func (m *MockMerchantServiceServer) FindYearlyAmountByApikey(arg0 context.Context, arg1 *pb.FindYearMerchantByApikey) (*pb.ApiResponseMerchantYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyAmountByApikey", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmountByApikey indicates an expected call of FindYearlyAmountByApikey.
func (mr *MockMerchantServiceServerMockRecorder) FindYearlyAmountByApikey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmountByApikey", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindYearlyAmountByApikey), arg0, arg1)
}

// FindYearlyAmountByMerchants mocks base method.
func (m *MockMerchantServiceServer) FindYearlyAmountByMerchants(arg0 context.Context, arg1 *pb.FindYearMerchantById) (*pb.ApiResponseMerchantYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyAmountByMerchants", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmountByMerchants indicates an expected call of FindYearlyAmountByMerchants.
func (mr *MockMerchantServiceServerMockRecorder) FindYearlyAmountByMerchants(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmountByMerchants", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindYearlyAmountByMerchants), arg0, arg1)
}

// FindYearlyAmountMerchant mocks base method.
func (m *MockMerchantServiceServer) FindYearlyAmountMerchant(arg0 context.Context, arg1 *pb.FindYearMerchant) (*pb.ApiResponseMerchantYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyAmountMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmountMerchant indicates an expected call of FindYearlyAmountMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindYearlyAmountMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmountMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindYearlyAmountMerchant), arg0, arg1)
}

// FindYearlyPaymentMethodByApikey mocks base method.
func (m *MockMerchantServiceServer) FindYearlyPaymentMethodByApikey(arg0 context.Context, arg1 *pb.FindYearMerchantByApikey) (*pb.ApiResponseMerchantYearlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethodByApikey", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethodByApikey indicates an expected call of FindYearlyPaymentMethodByApikey.
func (mr *MockMerchantServiceServerMockRecorder) FindYearlyPaymentMethodByApikey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethodByApikey", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindYearlyPaymentMethodByApikey), arg0, arg1)
}

// FindYearlyPaymentMethodByMerchants mocks base method.
func (m *MockMerchantServiceServer) FindYearlyPaymentMethodByMerchants(arg0 context.Context, arg1 *pb.FindYearMerchantById) (*pb.ApiResponseMerchantYearlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethodByMerchants", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethodByMerchants indicates an expected call of FindYearlyPaymentMethodByMerchants.
func (mr *MockMerchantServiceServerMockRecorder) FindYearlyPaymentMethodByMerchants(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethodByMerchants", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindYearlyPaymentMethodByMerchants), arg0, arg1)
}

// FindYearlyPaymentMethodMerchant mocks base method.
func (m *MockMerchantServiceServer) FindYearlyPaymentMethodMerchant(arg0 context.Context, arg1 *pb.FindYearMerchant) (*pb.ApiResponseMerchantYearlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethodMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethodMerchant indicates an expected call of FindYearlyPaymentMethodMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindYearlyPaymentMethodMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethodMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindYearlyPaymentMethodMerchant), arg0, arg1)
}

// FindYearlyTotalAmountByApikey mocks base method.
func (m *MockMerchantServiceServer) FindYearlyTotalAmountByApikey(arg0 context.Context, arg1 *pb.FindYearMerchantByApikey) (*pb.ApiResponseMerchantYearlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTotalAmountByApikey", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTotalAmountByApikey indicates an expected call of FindYearlyTotalAmountByApikey.
func (mr *MockMerchantServiceServerMockRecorder) FindYearlyTotalAmountByApikey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTotalAmountByApikey", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindYearlyTotalAmountByApikey), arg0, arg1)
}

// FindYearlyTotalAmountByMerchants mocks base method.
func (m *MockMerchantServiceServer) FindYearlyTotalAmountByMerchants(arg0 context.Context, arg1 *pb.FindYearMerchantById) (*pb.ApiResponseMerchantYearlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTotalAmountByMerchants", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTotalAmountByMerchants indicates an expected call of FindYearlyTotalAmountByMerchants.
func (mr *MockMerchantServiceServerMockRecorder) FindYearlyTotalAmountByMerchants(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTotalAmountByMerchants", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindYearlyTotalAmountByMerchants), arg0, arg1)
}

// FindYearlyTotalAmountMerchant mocks base method.
func (m *MockMerchantServiceServer) FindYearlyTotalAmountMerchant(arg0 context.Context, arg1 *pb.FindYearMerchant) (*pb.ApiResponseMerchantYearlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTotalAmountMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantYearlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTotalAmountMerchant indicates an expected call of FindYearlyTotalAmountMerchant.
func (mr *MockMerchantServiceServerMockRecorder) FindYearlyTotalAmountMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTotalAmountMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).FindYearlyTotalAmountMerchant), arg0, arg1)
}

// RestoreAllMerchant mocks base method.
func (m *MockMerchantServiceServer) RestoreAllMerchant(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseMerchantAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchantAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllMerchant indicates an expected call of RestoreAllMerchant.
func (mr *MockMerchantServiceServerMockRecorder) RestoreAllMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).RestoreAllMerchant), arg0, arg1)
}

// RestoreMerchant mocks base method.
func (m *MockMerchantServiceServer) RestoreMerchant(arg0 context.Context, arg1 *pb.FindByIdMerchantRequest) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreMerchant indicates an expected call of RestoreMerchant.
func (mr *MockMerchantServiceServerMockRecorder) RestoreMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).RestoreMerchant), arg0, arg1)
}

// TrashedMerchant mocks base method.
func (m *MockMerchantServiceServer) TrashedMerchant(arg0 context.Context, arg1 *pb.FindByIdMerchantRequest) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedMerchant indicates an expected call of TrashedMerchant.
func (mr *MockMerchantServiceServerMockRecorder) TrashedMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).TrashedMerchant), arg0, arg1)
}

// UpdateMerchant mocks base method.
func (m *MockMerchantServiceServer) UpdateMerchant(arg0 context.Context, arg1 *pb.UpdateMerchantRequest) (*pb.ApiResponseMerchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMerchant", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMerchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMerchant indicates an expected call of UpdateMerchant.
func (mr *MockMerchantServiceServerMockRecorder) UpdateMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchant", reflect.TypeOf((*MockMerchantServiceServer)(nil).UpdateMerchant), arg0, arg1)
}

// mustEmbedUnimplementedMerchantServiceServer mocks base method.
func (m *MockMerchantServiceServer) mustEmbedUnimplementedMerchantServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMerchantServiceServer")
}

// mustEmbedUnimplementedMerchantServiceServer indicates an expected call of mustEmbedUnimplementedMerchantServiceServer.
func (mr *MockMerchantServiceServerMockRecorder) mustEmbedUnimplementedMerchantServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMerchantServiceServer", reflect.TypeOf((*MockMerchantServiceServer)(nil).mustEmbedUnimplementedMerchantServiceServer))
}

// MockUnsafeMerchantServiceServer is a mock of UnsafeMerchantServiceServer interface.
type MockUnsafeMerchantServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMerchantServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeMerchantServiceServerMockRecorder is the mock recorder for MockUnsafeMerchantServiceServer.
type MockUnsafeMerchantServiceServerMockRecorder struct {
	mock *MockUnsafeMerchantServiceServer
}

// NewMockUnsafeMerchantServiceServer creates a new mock instance.
func NewMockUnsafeMerchantServiceServer(ctrl *gomock.Controller) *MockUnsafeMerchantServiceServer {
	mock := &MockUnsafeMerchantServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMerchantServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMerchantServiceServer) EXPECT() *MockUnsafeMerchantServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMerchantServiceServer mocks base method.
func (m *MockUnsafeMerchantServiceServer) mustEmbedUnimplementedMerchantServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMerchantServiceServer")
}

// mustEmbedUnimplementedMerchantServiceServer indicates an expected call of mustEmbedUnimplementedMerchantServiceServer.
func (mr *MockUnsafeMerchantServiceServerMockRecorder) mustEmbedUnimplementedMerchantServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMerchantServiceServer", reflect.TypeOf((*MockUnsafeMerchantServiceServer)(nil).mustEmbedUnimplementedMerchantServiceServer))
}
