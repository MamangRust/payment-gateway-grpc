// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pb/transaction_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/pb/transaction_grpc.pb.go -destination=internal/pb/mocks/transaction_grpc_mock.go
//

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	pb "MamangRust/paymentgatewaygrpc/internal/pb"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTransactionServiceClient is a mock of TransactionServiceClient interface.
type MockTransactionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceClientMockRecorder
	isgomock struct{}
}

// MockTransactionServiceClientMockRecorder is the mock recorder for MockTransactionServiceClient.
type MockTransactionServiceClientMockRecorder struct {
	mock *MockTransactionServiceClient
}

// NewMockTransactionServiceClient creates a new mock instance.
func NewMockTransactionServiceClient(ctrl *gomock.Controller) *MockTransactionServiceClient {
	mock := &MockTransactionServiceClient{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceClient) EXPECT() *MockTransactionServiceClientMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionServiceClient) CreateTransaction(ctx context.Context, in *pb.CreateTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransaction", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionServiceClientMockRecorder) CreateTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).CreateTransaction), varargs...)
}

// DeleteAllTransactionPermanent mocks base method.
func (m *MockTransactionServiceClient) DeleteAllTransactionPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseTransactionAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllTransactionPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTransactionPermanent indicates an expected call of DeleteAllTransactionPermanent.
func (mr *MockTransactionServiceClientMockRecorder) DeleteAllTransactionPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTransactionPermanent", reflect.TypeOf((*MockTransactionServiceClient)(nil).DeleteAllTransactionPermanent), varargs...)
}

// DeleteTransactionPermanent mocks base method.
func (m *MockTransactionServiceClient) DeleteTransactionPermanent(ctx context.Context, in *pb.FindByIdTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransactionDelete, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTransactionPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransactionPermanent indicates an expected call of DeleteTransactionPermanent.
func (mr *MockTransactionServiceClientMockRecorder) DeleteTransactionPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionPermanent", reflect.TypeOf((*MockTransactionServiceClient)(nil).DeleteTransactionPermanent), varargs...)
}

// FindAllTransaction mocks base method.
func (m *MockTransactionServiceClient) FindAllTransaction(ctx context.Context, in *pb.FindAllTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTransaction", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransaction indicates an expected call of FindAllTransaction.
func (mr *MockTransactionServiceClientMockRecorder) FindAllTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindAllTransaction), varargs...)
}

// FindAllTransactionByCardNumber mocks base method.
func (m *MockTransactionServiceClient) FindAllTransactionByCardNumber(ctx context.Context, in *pb.FindAllTransactionCardNumberRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTransactionByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransactionByCardNumber indicates an expected call of FindAllTransactionByCardNumber.
func (mr *MockTransactionServiceClientMockRecorder) FindAllTransactionByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionByCardNumber", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindAllTransactionByCardNumber), varargs...)
}

// FindByActiveTransaction mocks base method.
func (m *MockTransactionServiceClient) FindByActiveTransaction(ctx context.Context, in *pb.FindAllTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransactionDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByActiveTransaction", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransactionDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActiveTransaction indicates an expected call of FindByActiveTransaction.
func (mr *MockTransactionServiceClientMockRecorder) FindByActiveTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindByActiveTransaction), varargs...)
}

// FindByIdTransaction mocks base method.
func (m *MockTransactionServiceClient) FindByIdTransaction(ctx context.Context, in *pb.FindByIdTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByIdTransaction", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdTransaction indicates an expected call of FindByIdTransaction.
func (mr *MockTransactionServiceClientMockRecorder) FindByIdTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindByIdTransaction), varargs...)
}

// FindByTrashedTransaction mocks base method.
func (m *MockTransactionServiceClient) FindByTrashedTransaction(ctx context.Context, in *pb.FindAllTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransactionDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByTrashedTransaction", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransactionDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashedTransaction indicates an expected call of FindByTrashedTransaction.
func (mr *MockTransactionServiceClientMockRecorder) FindByTrashedTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindByTrashedTransaction), varargs...)
}

// FindMonthlyAmounts mocks base method.
func (m *MockTransactionServiceClient) FindMonthlyAmounts(ctx context.Context, in *pb.FindYearTransactionStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransactionMonthAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyAmounts", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmounts indicates an expected call of FindMonthlyAmounts.
func (mr *MockTransactionServiceClientMockRecorder) FindMonthlyAmounts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmounts", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindMonthlyAmounts), varargs...)
}

// FindMonthlyAmountsByCardNumber mocks base method.
func (m *MockTransactionServiceClient) FindMonthlyAmountsByCardNumber(ctx context.Context, in *pb.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransactionMonthAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyAmountsByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmountsByCardNumber indicates an expected call of FindMonthlyAmountsByCardNumber.
func (mr *MockTransactionServiceClientMockRecorder) FindMonthlyAmountsByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmountsByCardNumber", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindMonthlyAmountsByCardNumber), varargs...)
}

// FindMonthlyPaymentMethods mocks base method.
func (m *MockTransactionServiceClient) FindMonthlyPaymentMethods(ctx context.Context, in *pb.FindYearTransactionStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransactionMonthMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethods", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethods indicates an expected call of FindMonthlyPaymentMethods.
func (mr *MockTransactionServiceClientMockRecorder) FindMonthlyPaymentMethods(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethods", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindMonthlyPaymentMethods), varargs...)
}

// FindMonthlyPaymentMethodsByCardNumber mocks base method.
func (m *MockTransactionServiceClient) FindMonthlyPaymentMethodsByCardNumber(ctx context.Context, in *pb.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransactionMonthMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethodsByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethodsByCardNumber indicates an expected call of FindMonthlyPaymentMethodsByCardNumber.
func (mr *MockTransactionServiceClientMockRecorder) FindMonthlyPaymentMethodsByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethodsByCardNumber", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindMonthlyPaymentMethodsByCardNumber), varargs...)
}

// FindMonthlyTransactionStatusFailed mocks base method.
func (m *MockTransactionServiceClient) FindMonthlyTransactionStatusFailed(ctx context.Context, in *pb.FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransactionMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransactionStatusFailed", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionStatusFailed indicates an expected call of FindMonthlyTransactionStatusFailed.
func (mr *MockTransactionServiceClientMockRecorder) FindMonthlyTransactionStatusFailed(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionStatusFailed", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindMonthlyTransactionStatusFailed), varargs...)
}

// FindMonthlyTransactionStatusFailedByCardNumber mocks base method.
func (m *MockTransactionServiceClient) FindMonthlyTransactionStatusFailedByCardNumber(ctx context.Context, in *pb.FindMonthlyTransactionStatusCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseTransactionMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransactionStatusFailedByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionStatusFailedByCardNumber indicates an expected call of FindMonthlyTransactionStatusFailedByCardNumber.
func (mr *MockTransactionServiceClientMockRecorder) FindMonthlyTransactionStatusFailedByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionStatusFailedByCardNumber", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindMonthlyTransactionStatusFailedByCardNumber), varargs...)
}

// FindMonthlyTransactionStatusSuccess mocks base method.
func (m *MockTransactionServiceClient) FindMonthlyTransactionStatusSuccess(ctx context.Context, in *pb.FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransactionMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransactionStatusSuccess", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionStatusSuccess indicates an expected call of FindMonthlyTransactionStatusSuccess.
func (mr *MockTransactionServiceClientMockRecorder) FindMonthlyTransactionStatusSuccess(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionStatusSuccess", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindMonthlyTransactionStatusSuccess), varargs...)
}

// FindMonthlyTransactionStatusSuccessByCardNumber mocks base method.
func (m *MockTransactionServiceClient) FindMonthlyTransactionStatusSuccessByCardNumber(ctx context.Context, in *pb.FindMonthlyTransactionStatusCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseTransactionMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransactionStatusSuccessByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionStatusSuccessByCardNumber indicates an expected call of FindMonthlyTransactionStatusSuccessByCardNumber.
func (mr *MockTransactionServiceClientMockRecorder) FindMonthlyTransactionStatusSuccessByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionStatusSuccessByCardNumber", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindMonthlyTransactionStatusSuccessByCardNumber), varargs...)
}

// FindTransactionByMerchantId mocks base method.
func (m *MockTransactionServiceClient) FindTransactionByMerchantId(ctx context.Context, in *pb.FindTransactionByMerchantIdRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransactions, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindTransactionByMerchantId", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransactionByMerchantId indicates an expected call of FindTransactionByMerchantId.
func (mr *MockTransactionServiceClientMockRecorder) FindTransactionByMerchantId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionByMerchantId", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindTransactionByMerchantId), varargs...)
}

// FindYearlyAmounts mocks base method.
func (m *MockTransactionServiceClient) FindYearlyAmounts(ctx context.Context, in *pb.FindYearTransactionStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransactionYearAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyAmounts", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmounts indicates an expected call of FindYearlyAmounts.
func (mr *MockTransactionServiceClientMockRecorder) FindYearlyAmounts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmounts", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindYearlyAmounts), varargs...)
}

// FindYearlyAmountsByCardNumber mocks base method.
func (m *MockTransactionServiceClient) FindYearlyAmountsByCardNumber(ctx context.Context, in *pb.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransactionYearAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyAmountsByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmountsByCardNumber indicates an expected call of FindYearlyAmountsByCardNumber.
func (mr *MockTransactionServiceClientMockRecorder) FindYearlyAmountsByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmountsByCardNumber", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindYearlyAmountsByCardNumber), varargs...)
}

// FindYearlyPaymentMethods mocks base method.
func (m *MockTransactionServiceClient) FindYearlyPaymentMethods(ctx context.Context, in *pb.FindYearTransactionStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransactionYearMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethods", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethods indicates an expected call of FindYearlyPaymentMethods.
func (mr *MockTransactionServiceClientMockRecorder) FindYearlyPaymentMethods(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethods", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindYearlyPaymentMethods), varargs...)
}

// FindYearlyPaymentMethodsByCardNumber mocks base method.
func (m *MockTransactionServiceClient) FindYearlyPaymentMethodsByCardNumber(ctx context.Context, in *pb.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransactionYearMethod, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethodsByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethodsByCardNumber indicates an expected call of FindYearlyPaymentMethodsByCardNumber.
func (mr *MockTransactionServiceClientMockRecorder) FindYearlyPaymentMethodsByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethodsByCardNumber", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindYearlyPaymentMethodsByCardNumber), varargs...)
}

// FindYearlyTransactionStatusFailed mocks base method.
func (m *MockTransactionServiceClient) FindYearlyTransactionStatusFailed(ctx context.Context, in *pb.FindYearTransactionStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransactionYearStatusFailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransactionStatusFailed", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionStatusFailed indicates an expected call of FindYearlyTransactionStatusFailed.
func (mr *MockTransactionServiceClientMockRecorder) FindYearlyTransactionStatusFailed(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionStatusFailed", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindYearlyTransactionStatusFailed), varargs...)
}

// FindYearlyTransactionStatusFailedByCardNumber mocks base method.
func (m *MockTransactionServiceClient) FindYearlyTransactionStatusFailedByCardNumber(ctx context.Context, in *pb.FindYearTransactionStatusCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseTransactionYearStatusFailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransactionStatusFailedByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionStatusFailedByCardNumber indicates an expected call of FindYearlyTransactionStatusFailedByCardNumber.
func (mr *MockTransactionServiceClientMockRecorder) FindYearlyTransactionStatusFailedByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionStatusFailedByCardNumber", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindYearlyTransactionStatusFailedByCardNumber), varargs...)
}

// FindYearlyTransactionStatusSuccess mocks base method.
func (m *MockTransactionServiceClient) FindYearlyTransactionStatusSuccess(ctx context.Context, in *pb.FindYearTransactionStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransactionYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransactionStatusSuccess", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionStatusSuccess indicates an expected call of FindYearlyTransactionStatusSuccess.
func (mr *MockTransactionServiceClientMockRecorder) FindYearlyTransactionStatusSuccess(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionStatusSuccess", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindYearlyTransactionStatusSuccess), varargs...)
}

// FindYearlyTransactionStatusSuccessByCardNumber mocks base method.
func (m *MockTransactionServiceClient) FindYearlyTransactionStatusSuccessByCardNumber(ctx context.Context, in *pb.FindYearTransactionStatusCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseTransactionYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransactionStatusSuccessByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionStatusSuccessByCardNumber indicates an expected call of FindYearlyTransactionStatusSuccessByCardNumber.
func (mr *MockTransactionServiceClientMockRecorder) FindYearlyTransactionStatusSuccessByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionStatusSuccessByCardNumber", reflect.TypeOf((*MockTransactionServiceClient)(nil).FindYearlyTransactionStatusSuccessByCardNumber), varargs...)
}

// RestoreAllTransaction mocks base method.
func (m *MockTransactionServiceClient) RestoreAllTransaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseTransactionAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreAllTransaction", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTransaction indicates an expected call of RestoreAllTransaction.
func (mr *MockTransactionServiceClientMockRecorder) RestoreAllTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).RestoreAllTransaction), varargs...)
}

// RestoreTransaction mocks base method.
func (m *MockTransactionServiceClient) RestoreTransaction(ctx context.Context, in *pb.FindByIdTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreTransaction", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransaction indicates an expected call of RestoreTransaction.
func (mr *MockTransactionServiceClientMockRecorder) RestoreTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).RestoreTransaction), varargs...)
}

// TrashedTransaction mocks base method.
func (m *MockTransactionServiceClient) TrashedTransaction(ctx context.Context, in *pb.FindByIdTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrashedTransaction", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransaction indicates an expected call of TrashedTransaction.
func (mr *MockTransactionServiceClientMockRecorder) TrashedTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).TrashedTransaction), varargs...)
}

// UpdateTransaction mocks base method.
func (m *MockTransactionServiceClient) UpdateTransaction(ctx context.Context, in *pb.UpdateTransactionRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransaction", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionServiceClientMockRecorder) UpdateTransaction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).UpdateTransaction), varargs...)
}

// MockTransactionServiceServer is a mock of TransactionServiceServer interface.
type MockTransactionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceServerMockRecorder
	isgomock struct{}
}

// MockTransactionServiceServerMockRecorder is the mock recorder for MockTransactionServiceServer.
type MockTransactionServiceServerMockRecorder struct {
	mock *MockTransactionServiceServer
}

// NewMockTransactionServiceServer creates a new mock instance.
func NewMockTransactionServiceServer(ctrl *gomock.Controller) *MockTransactionServiceServer {
	mock := &MockTransactionServiceServer{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceServer) EXPECT() *MockTransactionServiceServerMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionServiceServer) CreateTransaction(arg0 context.Context, arg1 *pb.CreateTransactionRequest) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionServiceServerMockRecorder) CreateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).CreateTransaction), arg0, arg1)
}

// DeleteAllTransactionPermanent mocks base method.
func (m *MockTransactionServiceServer) DeleteAllTransactionPermanent(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseTransactionAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTransactionPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTransactionPermanent indicates an expected call of DeleteAllTransactionPermanent.
func (mr *MockTransactionServiceServerMockRecorder) DeleteAllTransactionPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTransactionPermanent", reflect.TypeOf((*MockTransactionServiceServer)(nil).DeleteAllTransactionPermanent), arg0, arg1)
}

// DeleteTransactionPermanent mocks base method.
func (m *MockTransactionServiceServer) DeleteTransactionPermanent(arg0 context.Context, arg1 *pb.FindByIdTransactionRequest) (*pb.ApiResponseTransactionDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransactionPermanent indicates an expected call of DeleteTransactionPermanent.
func (mr *MockTransactionServiceServerMockRecorder) DeleteTransactionPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionPermanent", reflect.TypeOf((*MockTransactionServiceServer)(nil).DeleteTransactionPermanent), arg0, arg1)
}

// FindAllTransaction mocks base method.
func (m *MockTransactionServiceServer) FindAllTransaction(arg0 context.Context, arg1 *pb.FindAllTransactionRequest) (*pb.ApiResponsePaginationTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransaction indicates an expected call of FindAllTransaction.
func (mr *MockTransactionServiceServerMockRecorder) FindAllTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindAllTransaction), arg0, arg1)
}

// FindAllTransactionByCardNumber mocks base method.
func (m *MockTransactionServiceServer) FindAllTransactionByCardNumber(arg0 context.Context, arg1 *pb.FindAllTransactionCardNumberRequest) (*pb.ApiResponsePaginationTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactionByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransactionByCardNumber indicates an expected call of FindAllTransactionByCardNumber.
func (mr *MockTransactionServiceServerMockRecorder) FindAllTransactionByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionByCardNumber", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindAllTransactionByCardNumber), arg0, arg1)
}

// FindByActiveTransaction mocks base method.
func (m *MockTransactionServiceServer) FindByActiveTransaction(arg0 context.Context, arg1 *pb.FindAllTransactionRequest) (*pb.ApiResponsePaginationTransactionDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActiveTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransactionDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActiveTransaction indicates an expected call of FindByActiveTransaction.
func (mr *MockTransactionServiceServerMockRecorder) FindByActiveTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindByActiveTransaction), arg0, arg1)
}

// FindByIdTransaction mocks base method.
func (m *MockTransactionServiceServer) FindByIdTransaction(arg0 context.Context, arg1 *pb.FindByIdTransactionRequest) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdTransaction indicates an expected call of FindByIdTransaction.
func (mr *MockTransactionServiceServerMockRecorder) FindByIdTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindByIdTransaction), arg0, arg1)
}

// FindByTrashedTransaction mocks base method.
func (m *MockTransactionServiceServer) FindByTrashedTransaction(arg0 context.Context, arg1 *pb.FindAllTransactionRequest) (*pb.ApiResponsePaginationTransactionDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashedTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransactionDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashedTransaction indicates an expected call of FindByTrashedTransaction.
func (mr *MockTransactionServiceServerMockRecorder) FindByTrashedTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindByTrashedTransaction), arg0, arg1)
}

// FindMonthlyAmounts mocks base method.
func (m *MockTransactionServiceServer) FindMonthlyAmounts(arg0 context.Context, arg1 *pb.FindYearTransactionStatus) (*pb.ApiResponseTransactionMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyAmounts", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmounts indicates an expected call of FindMonthlyAmounts.
func (mr *MockTransactionServiceServerMockRecorder) FindMonthlyAmounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmounts", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindMonthlyAmounts), arg0, arg1)
}

// FindMonthlyAmountsByCardNumber mocks base method.
func (m *MockTransactionServiceServer) FindMonthlyAmountsByCardNumber(arg0 context.Context, arg1 *pb.FindByYearCardNumberTransactionRequest) (*pb.ApiResponseTransactionMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyAmountsByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyAmountsByCardNumber indicates an expected call of FindMonthlyAmountsByCardNumber.
func (mr *MockTransactionServiceServerMockRecorder) FindMonthlyAmountsByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyAmountsByCardNumber", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindMonthlyAmountsByCardNumber), arg0, arg1)
}

// FindMonthlyPaymentMethods mocks base method.
func (m *MockTransactionServiceServer) FindMonthlyPaymentMethods(arg0 context.Context, arg1 *pb.FindYearTransactionStatus) (*pb.ApiResponseTransactionMonthMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethods", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethods indicates an expected call of FindMonthlyPaymentMethods.
func (mr *MockTransactionServiceServerMockRecorder) FindMonthlyPaymentMethods(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethods", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindMonthlyPaymentMethods), arg0, arg1)
}

// FindMonthlyPaymentMethodsByCardNumber mocks base method.
func (m *MockTransactionServiceServer) FindMonthlyPaymentMethodsByCardNumber(arg0 context.Context, arg1 *pb.FindByYearCardNumberTransactionRequest) (*pb.ApiResponseTransactionMonthMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyPaymentMethodsByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyPaymentMethodsByCardNumber indicates an expected call of FindMonthlyPaymentMethodsByCardNumber.
func (mr *MockTransactionServiceServerMockRecorder) FindMonthlyPaymentMethodsByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyPaymentMethodsByCardNumber", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindMonthlyPaymentMethodsByCardNumber), arg0, arg1)
}

// FindMonthlyTransactionStatusFailed mocks base method.
func (m *MockTransactionServiceServer) FindMonthlyTransactionStatusFailed(arg0 context.Context, arg1 *pb.FindMonthlyTransactionStatus) (*pb.ApiResponseTransactionMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransactionStatusFailed", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionStatusFailed indicates an expected call of FindMonthlyTransactionStatusFailed.
func (mr *MockTransactionServiceServerMockRecorder) FindMonthlyTransactionStatusFailed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionStatusFailed", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindMonthlyTransactionStatusFailed), arg0, arg1)
}

// FindMonthlyTransactionStatusFailedByCardNumber mocks base method.
func (m *MockTransactionServiceServer) FindMonthlyTransactionStatusFailedByCardNumber(arg0 context.Context, arg1 *pb.FindMonthlyTransactionStatusCardNumber) (*pb.ApiResponseTransactionMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransactionStatusFailedByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionStatusFailedByCardNumber indicates an expected call of FindMonthlyTransactionStatusFailedByCardNumber.
func (mr *MockTransactionServiceServerMockRecorder) FindMonthlyTransactionStatusFailedByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionStatusFailedByCardNumber", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindMonthlyTransactionStatusFailedByCardNumber), arg0, arg1)
}

// FindMonthlyTransactionStatusSuccess mocks base method.
func (m *MockTransactionServiceServer) FindMonthlyTransactionStatusSuccess(arg0 context.Context, arg1 *pb.FindMonthlyTransactionStatus) (*pb.ApiResponseTransactionMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransactionStatusSuccess", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionStatusSuccess indicates an expected call of FindMonthlyTransactionStatusSuccess.
func (mr *MockTransactionServiceServerMockRecorder) FindMonthlyTransactionStatusSuccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionStatusSuccess", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindMonthlyTransactionStatusSuccess), arg0, arg1)
}

// FindMonthlyTransactionStatusSuccessByCardNumber mocks base method.
func (m *MockTransactionServiceServer) FindMonthlyTransactionStatusSuccessByCardNumber(arg0 context.Context, arg1 *pb.FindMonthlyTransactionStatusCardNumber) (*pb.ApiResponseTransactionMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransactionStatusSuccessByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionStatusSuccessByCardNumber indicates an expected call of FindMonthlyTransactionStatusSuccessByCardNumber.
func (mr *MockTransactionServiceServerMockRecorder) FindMonthlyTransactionStatusSuccessByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionStatusSuccessByCardNumber", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindMonthlyTransactionStatusSuccessByCardNumber), arg0, arg1)
}

// FindTransactionByMerchantId mocks base method.
func (m *MockTransactionServiceServer) FindTransactionByMerchantId(arg0 context.Context, arg1 *pb.FindTransactionByMerchantIdRequest) (*pb.ApiResponseTransactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactionByMerchantId", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransactionByMerchantId indicates an expected call of FindTransactionByMerchantId.
func (mr *MockTransactionServiceServerMockRecorder) FindTransactionByMerchantId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionByMerchantId", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindTransactionByMerchantId), arg0, arg1)
}

// FindYearlyAmounts mocks base method.
func (m *MockTransactionServiceServer) FindYearlyAmounts(arg0 context.Context, arg1 *pb.FindYearTransactionStatus) (*pb.ApiResponseTransactionYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyAmounts", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmounts indicates an expected call of FindYearlyAmounts.
func (mr *MockTransactionServiceServerMockRecorder) FindYearlyAmounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmounts", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindYearlyAmounts), arg0, arg1)
}

// FindYearlyAmountsByCardNumber mocks base method.
func (m *MockTransactionServiceServer) FindYearlyAmountsByCardNumber(arg0 context.Context, arg1 *pb.FindByYearCardNumberTransactionRequest) (*pb.ApiResponseTransactionYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyAmountsByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyAmountsByCardNumber indicates an expected call of FindYearlyAmountsByCardNumber.
func (mr *MockTransactionServiceServerMockRecorder) FindYearlyAmountsByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyAmountsByCardNumber", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindYearlyAmountsByCardNumber), arg0, arg1)
}

// FindYearlyPaymentMethods mocks base method.
func (m *MockTransactionServiceServer) FindYearlyPaymentMethods(arg0 context.Context, arg1 *pb.FindYearTransactionStatus) (*pb.ApiResponseTransactionYearMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethods", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethods indicates an expected call of FindYearlyPaymentMethods.
func (mr *MockTransactionServiceServerMockRecorder) FindYearlyPaymentMethods(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethods", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindYearlyPaymentMethods), arg0, arg1)
}

// FindYearlyPaymentMethodsByCardNumber mocks base method.
func (m *MockTransactionServiceServer) FindYearlyPaymentMethodsByCardNumber(arg0 context.Context, arg1 *pb.FindByYearCardNumberTransactionRequest) (*pb.ApiResponseTransactionYearMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyPaymentMethodsByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyPaymentMethodsByCardNumber indicates an expected call of FindYearlyPaymentMethodsByCardNumber.
func (mr *MockTransactionServiceServerMockRecorder) FindYearlyPaymentMethodsByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyPaymentMethodsByCardNumber", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindYearlyPaymentMethodsByCardNumber), arg0, arg1)
}

// FindYearlyTransactionStatusFailed mocks base method.
func (m *MockTransactionServiceServer) FindYearlyTransactionStatusFailed(arg0 context.Context, arg1 *pb.FindYearTransactionStatus) (*pb.ApiResponseTransactionYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransactionStatusFailed", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionStatusFailed indicates an expected call of FindYearlyTransactionStatusFailed.
func (mr *MockTransactionServiceServerMockRecorder) FindYearlyTransactionStatusFailed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionStatusFailed", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindYearlyTransactionStatusFailed), arg0, arg1)
}

// FindYearlyTransactionStatusFailedByCardNumber mocks base method.
func (m *MockTransactionServiceServer) FindYearlyTransactionStatusFailedByCardNumber(arg0 context.Context, arg1 *pb.FindYearTransactionStatusCardNumber) (*pb.ApiResponseTransactionYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransactionStatusFailedByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionStatusFailedByCardNumber indicates an expected call of FindYearlyTransactionStatusFailedByCardNumber.
func (mr *MockTransactionServiceServerMockRecorder) FindYearlyTransactionStatusFailedByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionStatusFailedByCardNumber", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindYearlyTransactionStatusFailedByCardNumber), arg0, arg1)
}

// FindYearlyTransactionStatusSuccess mocks base method.
func (m *MockTransactionServiceServer) FindYearlyTransactionStatusSuccess(arg0 context.Context, arg1 *pb.FindYearTransactionStatus) (*pb.ApiResponseTransactionYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransactionStatusSuccess", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionStatusSuccess indicates an expected call of FindYearlyTransactionStatusSuccess.
func (mr *MockTransactionServiceServerMockRecorder) FindYearlyTransactionStatusSuccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionStatusSuccess", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindYearlyTransactionStatusSuccess), arg0, arg1)
}

// FindYearlyTransactionStatusSuccessByCardNumber mocks base method.
func (m *MockTransactionServiceServer) FindYearlyTransactionStatusSuccessByCardNumber(arg0 context.Context, arg1 *pb.FindYearTransactionStatusCardNumber) (*pb.ApiResponseTransactionYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransactionStatusSuccessByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionStatusSuccessByCardNumber indicates an expected call of FindYearlyTransactionStatusSuccessByCardNumber.
func (mr *MockTransactionServiceServerMockRecorder) FindYearlyTransactionStatusSuccessByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionStatusSuccessByCardNumber", reflect.TypeOf((*MockTransactionServiceServer)(nil).FindYearlyTransactionStatusSuccessByCardNumber), arg0, arg1)
}

// RestoreAllTransaction mocks base method.
func (m *MockTransactionServiceServer) RestoreAllTransaction(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseTransactionAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransactionAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTransaction indicates an expected call of RestoreAllTransaction.
func (mr *MockTransactionServiceServerMockRecorder) RestoreAllTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).RestoreAllTransaction), arg0, arg1)
}

// RestoreTransaction mocks base method.
func (m *MockTransactionServiceServer) RestoreTransaction(arg0 context.Context, arg1 *pb.FindByIdTransactionRequest) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransaction indicates an expected call of RestoreTransaction.
func (mr *MockTransactionServiceServerMockRecorder) RestoreTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).RestoreTransaction), arg0, arg1)
}

// TrashedTransaction mocks base method.
func (m *MockTransactionServiceServer) TrashedTransaction(arg0 context.Context, arg1 *pb.FindByIdTransactionRequest) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransaction indicates an expected call of TrashedTransaction.
func (mr *MockTransactionServiceServerMockRecorder) TrashedTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).TrashedTransaction), arg0, arg1)
}

// UpdateTransaction mocks base method.
func (m *MockTransactionServiceServer) UpdateTransaction(arg0 context.Context, arg1 *pb.UpdateTransactionRequest) (*pb.ApiResponseTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionServiceServerMockRecorder) UpdateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).UpdateTransaction), arg0, arg1)
}

// mustEmbedUnimplementedTransactionServiceServer mocks base method.
func (m *MockTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTransactionServiceServer")
}

// mustEmbedUnimplementedTransactionServiceServer indicates an expected call of mustEmbedUnimplementedTransactionServiceServer.
func (mr *MockTransactionServiceServerMockRecorder) mustEmbedUnimplementedTransactionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTransactionServiceServer", reflect.TypeOf((*MockTransactionServiceServer)(nil).mustEmbedUnimplementedTransactionServiceServer))
}

// MockUnsafeTransactionServiceServer is a mock of UnsafeTransactionServiceServer interface.
type MockUnsafeTransactionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTransactionServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeTransactionServiceServerMockRecorder is the mock recorder for MockUnsafeTransactionServiceServer.
type MockUnsafeTransactionServiceServerMockRecorder struct {
	mock *MockUnsafeTransactionServiceServer
}

// NewMockUnsafeTransactionServiceServer creates a new mock instance.
func NewMockUnsafeTransactionServiceServer(ctrl *gomock.Controller) *MockUnsafeTransactionServiceServer {
	mock := &MockUnsafeTransactionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTransactionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTransactionServiceServer) EXPECT() *MockUnsafeTransactionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTransactionServiceServer mocks base method.
func (m *MockUnsafeTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTransactionServiceServer")
}

// mustEmbedUnimplementedTransactionServiceServer indicates an expected call of mustEmbedUnimplementedTransactionServiceServer.
func (mr *MockUnsafeTransactionServiceServerMockRecorder) mustEmbedUnimplementedTransactionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTransactionServiceServer", reflect.TypeOf((*MockUnsafeTransactionServiceServer)(nil).mustEmbedUnimplementedTransactionServiceServer))
}
