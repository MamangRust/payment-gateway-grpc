// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pb/card_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/pb/card_grpc.pb.go -destination=internal/pb/mocks/card_grpc_mock.go
//

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	pb "MamangRust/paymentgatewaygrpc/internal/pb"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockCardServiceClient is a mock of CardServiceClient interface.
type MockCardServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCardServiceClientMockRecorder
	isgomock struct{}
}

// MockCardServiceClientMockRecorder is the mock recorder for MockCardServiceClient.
type MockCardServiceClientMockRecorder struct {
	mock *MockCardServiceClient
}

// NewMockCardServiceClient creates a new mock instance.
func NewMockCardServiceClient(ctrl *gomock.Controller) *MockCardServiceClient {
	mock := &MockCardServiceClient{ctrl: ctrl}
	mock.recorder = &MockCardServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardServiceClient) EXPECT() *MockCardServiceClientMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardServiceClient) CreateCard(ctx context.Context, in *pb.CreateCardRequest, opts ...grpc.CallOption) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardServiceClientMockRecorder) CreateCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardServiceClient)(nil).CreateCard), varargs...)
}

// DashboardCard mocks base method.
func (m *MockCardServiceClient) DashboardCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseDashboardCard, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseDashboardCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardCard indicates an expected call of DashboardCard.
func (mr *MockCardServiceClientMockRecorder) DashboardCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardCard", reflect.TypeOf((*MockCardServiceClient)(nil).DashboardCard), varargs...)
}

// DashboardCardNumber mocks base method.
func (m *MockCardServiceClient) DashboardCardNumber(ctx context.Context, in *pb.FindByCardNumberRequest, opts ...grpc.CallOption) (*pb.ApiResponseDashboardCardNumber, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseDashboardCardNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardCardNumber indicates an expected call of DashboardCardNumber.
func (mr *MockCardServiceClientMockRecorder) DashboardCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).DashboardCardNumber), varargs...)
}

// DeleteAllCardPermanent mocks base method.
func (m *MockCardServiceClient) DeleteAllCardPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseCardAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllCardPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCardAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllCardPermanent indicates an expected call of DeleteAllCardPermanent.
func (mr *MockCardServiceClientMockRecorder) DeleteAllCardPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCardPermanent", reflect.TypeOf((*MockCardServiceClient)(nil).DeleteAllCardPermanent), varargs...)
}

// DeleteCardPermanent mocks base method.
func (m *MockCardServiceClient) DeleteCardPermanent(ctx context.Context, in *pb.FindByIdCardRequest, opts ...grpc.CallOption) (*pb.ApiResponseCardDelete, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCardPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCardDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCardPermanent indicates an expected call of DeleteCardPermanent.
func (mr *MockCardServiceClientMockRecorder) DeleteCardPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardPermanent", reflect.TypeOf((*MockCardServiceClient)(nil).DeleteCardPermanent), varargs...)
}

// FindAllCard mocks base method.
func (m *MockCardServiceClient) FindAllCard(ctx context.Context, in *pb.FindAllCardRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationCard, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCard indicates an expected call of FindAllCard.
func (mr *MockCardServiceClientMockRecorder) FindAllCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCard", reflect.TypeOf((*MockCardServiceClient)(nil).FindAllCard), varargs...)
}

// FindByActiveCard mocks base method.
func (m *MockCardServiceClient) FindByActiveCard(ctx context.Context, in *pb.FindAllCardRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationCardDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByActiveCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationCardDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActiveCard indicates an expected call of FindByActiveCard.
func (mr *MockCardServiceClientMockRecorder) FindByActiveCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveCard", reflect.TypeOf((*MockCardServiceClient)(nil).FindByActiveCard), varargs...)
}

// FindByCardNumber mocks base method.
func (m *MockCardServiceClient) FindByCardNumber(ctx context.Context, in *pb.FindByCardNumberRequest, opts ...grpc.CallOption) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindByCardNumber), varargs...)
}

// FindByIdCard mocks base method.
func (m *MockCardServiceClient) FindByIdCard(ctx context.Context, in *pb.FindByIdCardRequest, opts ...grpc.CallOption) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByIdCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdCard indicates an expected call of FindByIdCard.
func (mr *MockCardServiceClientMockRecorder) FindByIdCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdCard", reflect.TypeOf((*MockCardServiceClient)(nil).FindByIdCard), varargs...)
}

// FindByTrashedCard mocks base method.
func (m *MockCardServiceClient) FindByTrashedCard(ctx context.Context, in *pb.FindAllCardRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationCardDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByTrashedCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationCardDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashedCard indicates an expected call of FindByTrashedCard.
func (mr *MockCardServiceClientMockRecorder) FindByTrashedCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedCard", reflect.TypeOf((*MockCardServiceClient)(nil).FindByTrashedCard), varargs...)
}

// FindByUserIdCard mocks base method.
func (m *MockCardServiceClient) FindByUserIdCard(ctx context.Context, in *pb.FindByUserIdCardRequest, opts ...grpc.CallOption) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByUserIdCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIdCard indicates an expected call of FindByUserIdCard.
func (mr *MockCardServiceClientMockRecorder) FindByUserIdCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdCard", reflect.TypeOf((*MockCardServiceClient)(nil).FindByUserIdCard), varargs...)
}

// FindMonthlyBalance mocks base method.
func (m *MockCardServiceClient) FindMonthlyBalance(ctx context.Context, in *pb.FindYearBalance, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyBalance, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyBalance", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyBalance indicates an expected call of FindMonthlyBalance.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyBalance(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyBalance", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyBalance), varargs...)
}

// FindMonthlyBalanceByCardNumber mocks base method.
func (m *MockCardServiceClient) FindMonthlyBalanceByCardNumber(ctx context.Context, in *pb.FindYearBalanceCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyBalance, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyBalanceByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyBalanceByCardNumber indicates an expected call of FindMonthlyBalanceByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyBalanceByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyBalanceByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyBalanceByCardNumber), varargs...)
}

// FindMonthlyTopupAmount mocks base method.
func (m *MockCardServiceClient) FindMonthlyTopupAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTopupAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTopupAmount indicates an expected call of FindMonthlyTopupAmount.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyTopupAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTopupAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyTopupAmount), varargs...)
}

// FindMonthlyTopupAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindMonthlyTopupAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTopupAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTopupAmountByCardNumber indicates an expected call of FindMonthlyTopupAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyTopupAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyTopupAmountByCardNumber), varargs...)
}

// FindMonthlyTransactionAmount mocks base method.
func (m *MockCardServiceClient) FindMonthlyTransactionAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransactionAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionAmount indicates an expected call of FindMonthlyTransactionAmount.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyTransactionAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyTransactionAmount), varargs...)
}

// FindMonthlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindMonthlyTransactionAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransactionAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionAmountByCardNumber indicates an expected call of FindMonthlyTransactionAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyTransactionAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyTransactionAmountByCardNumber), varargs...)
}

// FindMonthlyTransferReceiverAmount mocks base method.
func (m *MockCardServiceClient) FindMonthlyTransferReceiverAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferReceiverAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferReceiverAmount indicates an expected call of FindMonthlyTransferReceiverAmount.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyTransferReceiverAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferReceiverAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyTransferReceiverAmount), varargs...)
}

// FindMonthlyTransferReceiverAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindMonthlyTransferReceiverAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferReceiverAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferReceiverAmountByCardNumber indicates an expected call of FindMonthlyTransferReceiverAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyTransferReceiverAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferReceiverAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyTransferReceiverAmountByCardNumber), varargs...)
}

// FindMonthlyTransferSenderAmount mocks base method.
func (m *MockCardServiceClient) FindMonthlyTransferSenderAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferSenderAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferSenderAmount indicates an expected call of FindMonthlyTransferSenderAmount.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyTransferSenderAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferSenderAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyTransferSenderAmount), varargs...)
}

// FindMonthlyTransferSenderAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindMonthlyTransferSenderAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferSenderAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferSenderAmountByCardNumber indicates an expected call of FindMonthlyTransferSenderAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyTransferSenderAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferSenderAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyTransferSenderAmountByCardNumber), varargs...)
}

// FindMonthlyWithdrawAmount mocks base method.
func (m *MockCardServiceClient) FindMonthlyWithdrawAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyWithdrawAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyWithdrawAmount indicates an expected call of FindMonthlyWithdrawAmount.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyWithdrawAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyWithdrawAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyWithdrawAmount), varargs...)
}

// FindMonthlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindMonthlyWithdrawAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyWithdrawAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyWithdrawAmountByCardNumber indicates an expected call of FindMonthlyWithdrawAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindMonthlyWithdrawAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindMonthlyWithdrawAmountByCardNumber), varargs...)
}

// FindYearlyBalance mocks base method.
func (m *MockCardServiceClient) FindYearlyBalance(ctx context.Context, in *pb.FindYearBalance, opts ...grpc.CallOption) (*pb.ApiResponseYearlyBalance, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyBalance", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyBalance indicates an expected call of FindYearlyBalance.
func (mr *MockCardServiceClientMockRecorder) FindYearlyBalance(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyBalance", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyBalance), varargs...)
}

// FindYearlyBalanceByCardNumber mocks base method.
func (m *MockCardServiceClient) FindYearlyBalanceByCardNumber(ctx context.Context, in *pb.FindYearBalanceCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseYearlyBalance, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyBalanceByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyBalanceByCardNumber indicates an expected call of FindYearlyBalanceByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindYearlyBalanceByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyBalanceByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyBalanceByCardNumber), varargs...)
}

// FindYearlyTopupAmount mocks base method.
func (m *MockCardServiceClient) FindYearlyTopupAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTopupAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTopupAmount indicates an expected call of FindYearlyTopupAmount.
func (mr *MockCardServiceClientMockRecorder) FindYearlyTopupAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTopupAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyTopupAmount), varargs...)
}

// FindYearlyTopupAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindYearlyTopupAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTopupAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTopupAmountByCardNumber indicates an expected call of FindYearlyTopupAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindYearlyTopupAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyTopupAmountByCardNumber), varargs...)
}

// FindYearlyTransactionAmount mocks base method.
func (m *MockCardServiceClient) FindYearlyTransactionAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransactionAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionAmount indicates an expected call of FindYearlyTransactionAmount.
func (mr *MockCardServiceClientMockRecorder) FindYearlyTransactionAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyTransactionAmount), varargs...)
}

// FindYearlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindYearlyTransactionAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransactionAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionAmountByCardNumber indicates an expected call of FindYearlyTransactionAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindYearlyTransactionAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyTransactionAmountByCardNumber), varargs...)
}

// FindYearlyTransferReceiverAmount mocks base method.
func (m *MockCardServiceClient) FindYearlyTransferReceiverAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferReceiverAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferReceiverAmount indicates an expected call of FindYearlyTransferReceiverAmount.
func (mr *MockCardServiceClientMockRecorder) FindYearlyTransferReceiverAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferReceiverAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyTransferReceiverAmount), varargs...)
}

// FindYearlyTransferReceiverAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindYearlyTransferReceiverAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferReceiverAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferReceiverAmountByCardNumber indicates an expected call of FindYearlyTransferReceiverAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindYearlyTransferReceiverAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferReceiverAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyTransferReceiverAmountByCardNumber), varargs...)
}

// FindYearlyTransferSenderAmount mocks base method.
func (m *MockCardServiceClient) FindYearlyTransferSenderAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferSenderAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferSenderAmount indicates an expected call of FindYearlyTransferSenderAmount.
func (mr *MockCardServiceClientMockRecorder) FindYearlyTransferSenderAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferSenderAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyTransferSenderAmount), varargs...)
}

// FindYearlyTransferSenderAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindYearlyTransferSenderAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferSenderAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferSenderAmountByCardNumber indicates an expected call of FindYearlyTransferSenderAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindYearlyTransferSenderAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferSenderAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyTransferSenderAmountByCardNumber), varargs...)
}

// FindYearlyWithdrawAmount mocks base method.
func (m *MockCardServiceClient) FindYearlyWithdrawAmount(ctx context.Context, in *pb.FindYearAmount, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyWithdrawAmount", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyWithdrawAmount indicates an expected call of FindYearlyWithdrawAmount.
func (mr *MockCardServiceClientMockRecorder) FindYearlyWithdrawAmount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyWithdrawAmount", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyWithdrawAmount), varargs...)
}

// FindYearlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardServiceClient) FindYearlyWithdrawAmountByCardNumber(ctx context.Context, in *pb.FindYearAmountCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyWithdrawAmountByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyWithdrawAmountByCardNumber indicates an expected call of FindYearlyWithdrawAmountByCardNumber.
func (mr *MockCardServiceClientMockRecorder) FindYearlyWithdrawAmountByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardServiceClient)(nil).FindYearlyWithdrawAmountByCardNumber), varargs...)
}

// RestoreAllCard mocks base method.
func (m *MockCardServiceClient) RestoreAllCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseCardAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreAllCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCardAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllCard indicates an expected call of RestoreAllCard.
func (mr *MockCardServiceClientMockRecorder) RestoreAllCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllCard", reflect.TypeOf((*MockCardServiceClient)(nil).RestoreAllCard), varargs...)
}

// RestoreCard mocks base method.
func (m *MockCardServiceClient) RestoreCard(ctx context.Context, in *pb.FindByIdCardRequest, opts ...grpc.CallOption) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCard indicates an expected call of RestoreCard.
func (mr *MockCardServiceClientMockRecorder) RestoreCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCard", reflect.TypeOf((*MockCardServiceClient)(nil).RestoreCard), varargs...)
}

// TrashedCard mocks base method.
func (m *MockCardServiceClient) TrashedCard(ctx context.Context, in *pb.FindByIdCardRequest, opts ...grpc.CallOption) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrashedCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedCard indicates an expected call of TrashedCard.
func (mr *MockCardServiceClientMockRecorder) TrashedCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedCard", reflect.TypeOf((*MockCardServiceClient)(nil).TrashedCard), varargs...)
}

// UpdateCard mocks base method.
func (m *MockCardServiceClient) UpdateCard(ctx context.Context, in *pb.UpdateCardRequest, opts ...grpc.CallOption) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCard", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardServiceClientMockRecorder) UpdateCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCardServiceClient)(nil).UpdateCard), varargs...)
}

// MockCardServiceServer is a mock of CardServiceServer interface.
type MockCardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCardServiceServerMockRecorder
	isgomock struct{}
}

// MockCardServiceServerMockRecorder is the mock recorder for MockCardServiceServer.
type MockCardServiceServerMockRecorder struct {
	mock *MockCardServiceServer
}

// NewMockCardServiceServer creates a new mock instance.
func NewMockCardServiceServer(ctrl *gomock.Controller) *MockCardServiceServer {
	mock := &MockCardServiceServer{ctrl: ctrl}
	mock.recorder = &MockCardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardServiceServer) EXPECT() *MockCardServiceServerMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardServiceServer) CreateCard(arg0 context.Context, arg1 *pb.CreateCardRequest) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardServiceServerMockRecorder) CreateCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardServiceServer)(nil).CreateCard), arg0, arg1)
}

// DashboardCard mocks base method.
func (m *MockCardServiceServer) DashboardCard(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseDashboardCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseDashboardCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardCard indicates an expected call of DashboardCard.
func (mr *MockCardServiceServerMockRecorder) DashboardCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardCard", reflect.TypeOf((*MockCardServiceServer)(nil).DashboardCard), arg0, arg1)
}

// DashboardCardNumber mocks base method.
func (m *MockCardServiceServer) DashboardCardNumber(arg0 context.Context, arg1 *pb.FindByCardNumberRequest) (*pb.ApiResponseDashboardCardNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseDashboardCardNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardCardNumber indicates an expected call of DashboardCardNumber.
func (mr *MockCardServiceServerMockRecorder) DashboardCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).DashboardCardNumber), arg0, arg1)
}

// DeleteAllCardPermanent mocks base method.
func (m *MockCardServiceServer) DeleteAllCardPermanent(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseCardAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCardPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCardAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllCardPermanent indicates an expected call of DeleteAllCardPermanent.
func (mr *MockCardServiceServerMockRecorder) DeleteAllCardPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCardPermanent", reflect.TypeOf((*MockCardServiceServer)(nil).DeleteAllCardPermanent), arg0, arg1)
}

// DeleteCardPermanent mocks base method.
func (m *MockCardServiceServer) DeleteCardPermanent(arg0 context.Context, arg1 *pb.FindByIdCardRequest) (*pb.ApiResponseCardDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCardDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCardPermanent indicates an expected call of DeleteCardPermanent.
func (mr *MockCardServiceServerMockRecorder) DeleteCardPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardPermanent", reflect.TypeOf((*MockCardServiceServer)(nil).DeleteCardPermanent), arg0, arg1)
}

// FindAllCard mocks base method.
func (m *MockCardServiceServer) FindAllCard(arg0 context.Context, arg1 *pb.FindAllCardRequest) (*pb.ApiResponsePaginationCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCard indicates an expected call of FindAllCard.
func (mr *MockCardServiceServerMockRecorder) FindAllCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCard", reflect.TypeOf((*MockCardServiceServer)(nil).FindAllCard), arg0, arg1)
}

// FindByActiveCard mocks base method.
func (m *MockCardServiceServer) FindByActiveCard(arg0 context.Context, arg1 *pb.FindAllCardRequest) (*pb.ApiResponsePaginationCardDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActiveCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationCardDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActiveCard indicates an expected call of FindByActiveCard.
func (mr *MockCardServiceServerMockRecorder) FindByActiveCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveCard", reflect.TypeOf((*MockCardServiceServer)(nil).FindByActiveCard), arg0, arg1)
}

// FindByCardNumber mocks base method.
func (m *MockCardServiceServer) FindByCardNumber(arg0 context.Context, arg1 *pb.FindByCardNumberRequest) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindByCardNumber), arg0, arg1)
}

// FindByIdCard mocks base method.
func (m *MockCardServiceServer) FindByIdCard(arg0 context.Context, arg1 *pb.FindByIdCardRequest) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdCard indicates an expected call of FindByIdCard.
func (mr *MockCardServiceServerMockRecorder) FindByIdCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdCard", reflect.TypeOf((*MockCardServiceServer)(nil).FindByIdCard), arg0, arg1)
}

// FindByTrashedCard mocks base method.
func (m *MockCardServiceServer) FindByTrashedCard(arg0 context.Context, arg1 *pb.FindAllCardRequest) (*pb.ApiResponsePaginationCardDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashedCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationCardDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashedCard indicates an expected call of FindByTrashedCard.
func (mr *MockCardServiceServerMockRecorder) FindByTrashedCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedCard", reflect.TypeOf((*MockCardServiceServer)(nil).FindByTrashedCard), arg0, arg1)
}

// FindByUserIdCard mocks base method.
func (m *MockCardServiceServer) FindByUserIdCard(arg0 context.Context, arg1 *pb.FindByUserIdCardRequest) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIdCard indicates an expected call of FindByUserIdCard.
func (mr *MockCardServiceServerMockRecorder) FindByUserIdCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdCard", reflect.TypeOf((*MockCardServiceServer)(nil).FindByUserIdCard), arg0, arg1)
}

// FindMonthlyBalance mocks base method.
func (m *MockCardServiceServer) FindMonthlyBalance(arg0 context.Context, arg1 *pb.FindYearBalance) (*pb.ApiResponseMonthlyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyBalance", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyBalance indicates an expected call of FindMonthlyBalance.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyBalance", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyBalance), arg0, arg1)
}

// FindMonthlyBalanceByCardNumber mocks base method.
func (m *MockCardServiceServer) FindMonthlyBalanceByCardNumber(arg0 context.Context, arg1 *pb.FindYearBalanceCardNumber) (*pb.ApiResponseMonthlyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyBalanceByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyBalanceByCardNumber indicates an expected call of FindMonthlyBalanceByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyBalanceByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyBalanceByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyBalanceByCardNumber), arg0, arg1)
}

// FindMonthlyTopupAmount mocks base method.
func (m *MockCardServiceServer) FindMonthlyTopupAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTopupAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTopupAmount indicates an expected call of FindMonthlyTopupAmount.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyTopupAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTopupAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyTopupAmount), arg0, arg1)
}

// FindMonthlyTopupAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindMonthlyTopupAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTopupAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTopupAmountByCardNumber indicates an expected call of FindMonthlyTopupAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyTopupAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyTopupAmountByCardNumber), arg0, arg1)
}

// FindMonthlyTransactionAmount mocks base method.
func (m *MockCardServiceServer) FindMonthlyTransactionAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransactionAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionAmount indicates an expected call of FindMonthlyTransactionAmount.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyTransactionAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyTransactionAmount), arg0, arg1)
}

// FindMonthlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindMonthlyTransactionAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransactionAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransactionAmountByCardNumber indicates an expected call of FindMonthlyTransactionAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyTransactionAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyTransactionAmountByCardNumber), arg0, arg1)
}

// FindMonthlyTransferReceiverAmount mocks base method.
func (m *MockCardServiceServer) FindMonthlyTransferReceiverAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferReceiverAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferReceiverAmount indicates an expected call of FindMonthlyTransferReceiverAmount.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyTransferReceiverAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferReceiverAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyTransferReceiverAmount), arg0, arg1)
}

// FindMonthlyTransferReceiverAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindMonthlyTransferReceiverAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferReceiverAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferReceiverAmountByCardNumber indicates an expected call of FindMonthlyTransferReceiverAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyTransferReceiverAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferReceiverAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyTransferReceiverAmountByCardNumber), arg0, arg1)
}

// FindMonthlyTransferSenderAmount mocks base method.
func (m *MockCardServiceServer) FindMonthlyTransferSenderAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferSenderAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferSenderAmount indicates an expected call of FindMonthlyTransferSenderAmount.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyTransferSenderAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferSenderAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyTransferSenderAmount), arg0, arg1)
}

// FindMonthlyTransferSenderAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindMonthlyTransferSenderAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferSenderAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferSenderAmountByCardNumber indicates an expected call of FindMonthlyTransferSenderAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyTransferSenderAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferSenderAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyTransferSenderAmountByCardNumber), arg0, arg1)
}

// FindMonthlyWithdrawAmount mocks base method.
func (m *MockCardServiceServer) FindMonthlyWithdrawAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyWithdrawAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyWithdrawAmount indicates an expected call of FindMonthlyWithdrawAmount.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyWithdrawAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyWithdrawAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyWithdrawAmount), arg0, arg1)
}

// FindMonthlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindMonthlyWithdrawAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyWithdrawAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyWithdrawAmountByCardNumber indicates an expected call of FindMonthlyWithdrawAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindMonthlyWithdrawAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindMonthlyWithdrawAmountByCardNumber), arg0, arg1)
}

// FindYearlyBalance mocks base method.
func (m *MockCardServiceServer) FindYearlyBalance(arg0 context.Context, arg1 *pb.FindYearBalance) (*pb.ApiResponseYearlyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyBalance", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyBalance indicates an expected call of FindYearlyBalance.
func (mr *MockCardServiceServerMockRecorder) FindYearlyBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyBalance", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyBalance), arg0, arg1)
}

// FindYearlyBalanceByCardNumber mocks base method.
func (m *MockCardServiceServer) FindYearlyBalanceByCardNumber(arg0 context.Context, arg1 *pb.FindYearBalanceCardNumber) (*pb.ApiResponseYearlyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyBalanceByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyBalanceByCardNumber indicates an expected call of FindYearlyBalanceByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindYearlyBalanceByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyBalanceByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyBalanceByCardNumber), arg0, arg1)
}

// FindYearlyTopupAmount mocks base method.
func (m *MockCardServiceServer) FindYearlyTopupAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTopupAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTopupAmount indicates an expected call of FindYearlyTopupAmount.
func (mr *MockCardServiceServerMockRecorder) FindYearlyTopupAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTopupAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyTopupAmount), arg0, arg1)
}

// FindYearlyTopupAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindYearlyTopupAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTopupAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTopupAmountByCardNumber indicates an expected call of FindYearlyTopupAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindYearlyTopupAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyTopupAmountByCardNumber), arg0, arg1)
}

// FindYearlyTransactionAmount mocks base method.
func (m *MockCardServiceServer) FindYearlyTransactionAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransactionAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionAmount indicates an expected call of FindYearlyTransactionAmount.
func (mr *MockCardServiceServerMockRecorder) FindYearlyTransactionAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyTransactionAmount), arg0, arg1)
}

// FindYearlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindYearlyTransactionAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransactionAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransactionAmountByCardNumber indicates an expected call of FindYearlyTransactionAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindYearlyTransactionAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyTransactionAmountByCardNumber), arg0, arg1)
}

// FindYearlyTransferReceiverAmount mocks base method.
func (m *MockCardServiceServer) FindYearlyTransferReceiverAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferReceiverAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferReceiverAmount indicates an expected call of FindYearlyTransferReceiverAmount.
func (mr *MockCardServiceServerMockRecorder) FindYearlyTransferReceiverAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferReceiverAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyTransferReceiverAmount), arg0, arg1)
}

// FindYearlyTransferReceiverAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindYearlyTransferReceiverAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferReceiverAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferReceiverAmountByCardNumber indicates an expected call of FindYearlyTransferReceiverAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindYearlyTransferReceiverAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferReceiverAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyTransferReceiverAmountByCardNumber), arg0, arg1)
}

// FindYearlyTransferSenderAmount mocks base method.
func (m *MockCardServiceServer) FindYearlyTransferSenderAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferSenderAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferSenderAmount indicates an expected call of FindYearlyTransferSenderAmount.
func (mr *MockCardServiceServerMockRecorder) FindYearlyTransferSenderAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferSenderAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyTransferSenderAmount), arg0, arg1)
}

// FindYearlyTransferSenderAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindYearlyTransferSenderAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferSenderAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferSenderAmountByCardNumber indicates an expected call of FindYearlyTransferSenderAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindYearlyTransferSenderAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferSenderAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyTransferSenderAmountByCardNumber), arg0, arg1)
}

// FindYearlyWithdrawAmount mocks base method.
func (m *MockCardServiceServer) FindYearlyWithdrawAmount(arg0 context.Context, arg1 *pb.FindYearAmount) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyWithdrawAmount", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyWithdrawAmount indicates an expected call of FindYearlyWithdrawAmount.
func (mr *MockCardServiceServerMockRecorder) FindYearlyWithdrawAmount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyWithdrawAmount", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyWithdrawAmount), arg0, arg1)
}

// FindYearlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardServiceServer) FindYearlyWithdrawAmountByCardNumber(arg0 context.Context, arg1 *pb.FindYearAmountCardNumber) (*pb.ApiResponseYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyWithdrawAmountByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyWithdrawAmountByCardNumber indicates an expected call of FindYearlyWithdrawAmountByCardNumber.
func (mr *MockCardServiceServerMockRecorder) FindYearlyWithdrawAmountByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardServiceServer)(nil).FindYearlyWithdrawAmountByCardNumber), arg0, arg1)
}

// RestoreAllCard mocks base method.
func (m *MockCardServiceServer) RestoreAllCard(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseCardAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCardAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllCard indicates an expected call of RestoreAllCard.
func (mr *MockCardServiceServerMockRecorder) RestoreAllCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllCard", reflect.TypeOf((*MockCardServiceServer)(nil).RestoreAllCard), arg0, arg1)
}

// RestoreCard mocks base method.
func (m *MockCardServiceServer) RestoreCard(arg0 context.Context, arg1 *pb.FindByIdCardRequest) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCard indicates an expected call of RestoreCard.
func (mr *MockCardServiceServerMockRecorder) RestoreCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCard", reflect.TypeOf((*MockCardServiceServer)(nil).RestoreCard), arg0, arg1)
}

// TrashedCard mocks base method.
func (m *MockCardServiceServer) TrashedCard(arg0 context.Context, arg1 *pb.FindByIdCardRequest) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedCard indicates an expected call of TrashedCard.
func (mr *MockCardServiceServerMockRecorder) TrashedCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedCard", reflect.TypeOf((*MockCardServiceServer)(nil).TrashedCard), arg0, arg1)
}

// UpdateCard mocks base method.
func (m *MockCardServiceServer) UpdateCard(arg0 context.Context, arg1 *pb.UpdateCardRequest) (*pb.ApiResponseCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardServiceServerMockRecorder) UpdateCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCardServiceServer)(nil).UpdateCard), arg0, arg1)
}

// mustEmbedUnimplementedCardServiceServer mocks base method.
func (m *MockCardServiceServer) mustEmbedUnimplementedCardServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCardServiceServer")
}

// mustEmbedUnimplementedCardServiceServer indicates an expected call of mustEmbedUnimplementedCardServiceServer.
func (mr *MockCardServiceServerMockRecorder) mustEmbedUnimplementedCardServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCardServiceServer", reflect.TypeOf((*MockCardServiceServer)(nil).mustEmbedUnimplementedCardServiceServer))
}

// MockUnsafeCardServiceServer is a mock of UnsafeCardServiceServer interface.
type MockUnsafeCardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCardServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeCardServiceServerMockRecorder is the mock recorder for MockUnsafeCardServiceServer.
type MockUnsafeCardServiceServerMockRecorder struct {
	mock *MockUnsafeCardServiceServer
}

// NewMockUnsafeCardServiceServer creates a new mock instance.
func NewMockUnsafeCardServiceServer(ctrl *gomock.Controller) *MockUnsafeCardServiceServer {
	mock := &MockUnsafeCardServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCardServiceServer) EXPECT() *MockUnsafeCardServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCardServiceServer mocks base method.
func (m *MockUnsafeCardServiceServer) mustEmbedUnimplementedCardServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCardServiceServer")
}

// mustEmbedUnimplementedCardServiceServer indicates an expected call of mustEmbedUnimplementedCardServiceServer.
func (mr *MockUnsafeCardServiceServerMockRecorder) mustEmbedUnimplementedCardServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCardServiceServer", reflect.TypeOf((*MockUnsafeCardServiceServer)(nil).mustEmbedUnimplementedCardServiceServer))
}
