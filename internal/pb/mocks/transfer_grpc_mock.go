// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pb/transfer_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/pb/transfer_grpc.pb.go -destination=internal/pb/mocks/transfer_grpc_mock.go
//

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	pb "MamangRust/paymentgatewaygrpc/internal/pb"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTransferServiceClient is a mock of TransferServiceClient interface.
type MockTransferServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceClientMockRecorder
	isgomock struct{}
}

// MockTransferServiceClientMockRecorder is the mock recorder for MockTransferServiceClient.
type MockTransferServiceClientMockRecorder struct {
	mock *MockTransferServiceClient
}

// NewMockTransferServiceClient creates a new mock instance.
func NewMockTransferServiceClient(ctrl *gomock.Controller) *MockTransferServiceClient {
	mock := &MockTransferServiceClient{ctrl: ctrl}
	mock.recorder = &MockTransferServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferServiceClient) EXPECT() *MockTransferServiceClientMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferServiceClient) CreateTransfer(ctx context.Context, in *pb.CreateTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferServiceClientMockRecorder) CreateTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).CreateTransfer), varargs...)
}

// DeleteAllTransferPermanent mocks base method.
func (m *MockTransferServiceClient) DeleteAllTransferPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseTransferAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllTransferPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTransferPermanent indicates an expected call of DeleteAllTransferPermanent.
func (mr *MockTransferServiceClientMockRecorder) DeleteAllTransferPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTransferPermanent", reflect.TypeOf((*MockTransferServiceClient)(nil).DeleteAllTransferPermanent), varargs...)
}

// DeleteTransferPermanent mocks base method.
func (m *MockTransferServiceClient) DeleteTransferPermanent(ctx context.Context, in *pb.FindByIdTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransferDelete, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTransferPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransferPermanent indicates an expected call of DeleteTransferPermanent.
func (mr *MockTransferServiceClientMockRecorder) DeleteTransferPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferPermanent", reflect.TypeOf((*MockTransferServiceClient)(nil).DeleteTransferPermanent), varargs...)
}

// FindAllTransfer mocks base method.
func (m *MockTransferServiceClient) FindAllTransfer(ctx context.Context, in *pb.FindAllTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransfer indicates an expected call of FindAllTransfer.
func (mr *MockTransferServiceClientMockRecorder) FindAllTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).FindAllTransfer), varargs...)
}

// FindByActiveTransfer mocks base method.
func (m *MockTransferServiceClient) FindByActiveTransfer(ctx context.Context, in *pb.FindAllTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransferDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByActiveTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransferDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActiveTransfer indicates an expected call of FindByActiveTransfer.
func (mr *MockTransferServiceClientMockRecorder) FindByActiveTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).FindByActiveTransfer), varargs...)
}

// FindByIdTransfer mocks base method.
func (m *MockTransferServiceClient) FindByIdTransfer(ctx context.Context, in *pb.FindByIdTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByIdTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdTransfer indicates an expected call of FindByIdTransfer.
func (mr *MockTransferServiceClientMockRecorder) FindByIdTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).FindByIdTransfer), varargs...)
}

// FindByTrashedTransfer mocks base method.
func (m *MockTransferServiceClient) FindByTrashedTransfer(ctx context.Context, in *pb.FindAllTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransferDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByTrashedTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransferDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashedTransfer indicates an expected call of FindByTrashedTransfer.
func (mr *MockTransferServiceClientMockRecorder) FindByTrashedTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).FindByTrashedTransfer), varargs...)
}

// FindMonthlyTransferAmounts mocks base method.
func (m *MockTransferServiceClient) FindMonthlyTransferAmounts(ctx context.Context, in *pb.FindYearTransferStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransferMonthAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferAmounts", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferAmounts indicates an expected call of FindMonthlyTransferAmounts.
func (mr *MockTransferServiceClientMockRecorder) FindMonthlyTransferAmounts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferAmounts", reflect.TypeOf((*MockTransferServiceClient)(nil).FindMonthlyTransferAmounts), varargs...)
}

// FindMonthlyTransferAmountsByReceiverCardNumber mocks base method.
func (m *MockTransferServiceClient) FindMonthlyTransferAmountsByReceiverCardNumber(ctx context.Context, in *pb.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransferMonthAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferAmountsByReceiverCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferAmountsByReceiverCardNumber indicates an expected call of FindMonthlyTransferAmountsByReceiverCardNumber.
func (mr *MockTransferServiceClientMockRecorder) FindMonthlyTransferAmountsByReceiverCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferAmountsByReceiverCardNumber", reflect.TypeOf((*MockTransferServiceClient)(nil).FindMonthlyTransferAmountsByReceiverCardNumber), varargs...)
}

// FindMonthlyTransferAmountsBySenderCardNumber mocks base method.
func (m *MockTransferServiceClient) FindMonthlyTransferAmountsBySenderCardNumber(ctx context.Context, in *pb.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransferMonthAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferAmountsBySenderCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferAmountsBySenderCardNumber indicates an expected call of FindMonthlyTransferAmountsBySenderCardNumber.
func (mr *MockTransferServiceClientMockRecorder) FindMonthlyTransferAmountsBySenderCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferAmountsBySenderCardNumber", reflect.TypeOf((*MockTransferServiceClient)(nil).FindMonthlyTransferAmountsBySenderCardNumber), varargs...)
}

// FindMonthlyTransferStatusFailed mocks base method.
func (m *MockTransferServiceClient) FindMonthlyTransferStatusFailed(ctx context.Context, in *pb.FindMonthlyTransferStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransferMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferStatusFailed", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferStatusFailed indicates an expected call of FindMonthlyTransferStatusFailed.
func (mr *MockTransferServiceClientMockRecorder) FindMonthlyTransferStatusFailed(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferStatusFailed", reflect.TypeOf((*MockTransferServiceClient)(nil).FindMonthlyTransferStatusFailed), varargs...)
}

// FindMonthlyTransferStatusFailedByCardNumber mocks base method.
func (m *MockTransferServiceClient) FindMonthlyTransferStatusFailedByCardNumber(ctx context.Context, in *pb.FindMonthlyTransferStatusCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseTransferMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferStatusFailedByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferStatusFailedByCardNumber indicates an expected call of FindMonthlyTransferStatusFailedByCardNumber.
func (mr *MockTransferServiceClientMockRecorder) FindMonthlyTransferStatusFailedByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferStatusFailedByCardNumber", reflect.TypeOf((*MockTransferServiceClient)(nil).FindMonthlyTransferStatusFailedByCardNumber), varargs...)
}

// FindMonthlyTransferStatusSuccess mocks base method.
func (m *MockTransferServiceClient) FindMonthlyTransferStatusSuccess(ctx context.Context, in *pb.FindMonthlyTransferStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransferMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferStatusSuccess", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferStatusSuccess indicates an expected call of FindMonthlyTransferStatusSuccess.
func (mr *MockTransferServiceClientMockRecorder) FindMonthlyTransferStatusSuccess(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferStatusSuccess", reflect.TypeOf((*MockTransferServiceClient)(nil).FindMonthlyTransferStatusSuccess), varargs...)
}

// FindMonthlyTransferStatusSuccessByCardNumber mocks base method.
func (m *MockTransferServiceClient) FindMonthlyTransferStatusSuccessByCardNumber(ctx context.Context, in *pb.FindMonthlyTransferStatusCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseTransferMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMonthlyTransferStatusSuccessByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferStatusSuccessByCardNumber indicates an expected call of FindMonthlyTransferStatusSuccessByCardNumber.
func (mr *MockTransferServiceClientMockRecorder) FindMonthlyTransferStatusSuccessByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferStatusSuccessByCardNumber", reflect.TypeOf((*MockTransferServiceClient)(nil).FindMonthlyTransferStatusSuccessByCardNumber), varargs...)
}

// FindTransferByTransferFrom mocks base method.
func (m *MockTransferServiceClient) FindTransferByTransferFrom(ctx context.Context, in *pb.FindTransferByTransferFromRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfers, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindTransferByTransferFrom", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferFrom indicates an expected call of FindTransferByTransferFrom.
func (mr *MockTransferServiceClientMockRecorder) FindTransferByTransferFrom(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferFrom", reflect.TypeOf((*MockTransferServiceClient)(nil).FindTransferByTransferFrom), varargs...)
}

// FindTransferByTransferTo mocks base method.
func (m *MockTransferServiceClient) FindTransferByTransferTo(ctx context.Context, in *pb.FindTransferByTransferToRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfers, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindTransferByTransferTo", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferTo indicates an expected call of FindTransferByTransferTo.
func (mr *MockTransferServiceClientMockRecorder) FindTransferByTransferTo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferTo", reflect.TypeOf((*MockTransferServiceClient)(nil).FindTransferByTransferTo), varargs...)
}

// FindYearlyTransferAmounts mocks base method.
func (m *MockTransferServiceClient) FindYearlyTransferAmounts(ctx context.Context, in *pb.FindYearTransferStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransferYearAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferAmounts", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferAmounts indicates an expected call of FindYearlyTransferAmounts.
func (mr *MockTransferServiceClientMockRecorder) FindYearlyTransferAmounts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferAmounts", reflect.TypeOf((*MockTransferServiceClient)(nil).FindYearlyTransferAmounts), varargs...)
}

// FindYearlyTransferAmountsByReceiverCardNumber mocks base method.
func (m *MockTransferServiceClient) FindYearlyTransferAmountsByReceiverCardNumber(ctx context.Context, in *pb.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransferYearAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferAmountsByReceiverCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferAmountsByReceiverCardNumber indicates an expected call of FindYearlyTransferAmountsByReceiverCardNumber.
func (mr *MockTransferServiceClientMockRecorder) FindYearlyTransferAmountsByReceiverCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferAmountsByReceiverCardNumber", reflect.TypeOf((*MockTransferServiceClient)(nil).FindYearlyTransferAmountsByReceiverCardNumber), varargs...)
}

// FindYearlyTransferAmountsBySenderCardNumber mocks base method.
func (m *MockTransferServiceClient) FindYearlyTransferAmountsBySenderCardNumber(ctx context.Context, in *pb.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransferYearAmount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferAmountsBySenderCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferAmountsBySenderCardNumber indicates an expected call of FindYearlyTransferAmountsBySenderCardNumber.
func (mr *MockTransferServiceClientMockRecorder) FindYearlyTransferAmountsBySenderCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferAmountsBySenderCardNumber", reflect.TypeOf((*MockTransferServiceClient)(nil).FindYearlyTransferAmountsBySenderCardNumber), varargs...)
}

// FindYearlyTransferStatusFailed mocks base method.
func (m *MockTransferServiceClient) FindYearlyTransferStatusFailed(ctx context.Context, in *pb.FindYearTransferStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransferYearStatusFailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferStatusFailed", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferStatusFailed indicates an expected call of FindYearlyTransferStatusFailed.
func (mr *MockTransferServiceClientMockRecorder) FindYearlyTransferStatusFailed(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferStatusFailed", reflect.TypeOf((*MockTransferServiceClient)(nil).FindYearlyTransferStatusFailed), varargs...)
}

// FindYearlyTransferStatusFailedByCardNumber mocks base method.
func (m *MockTransferServiceClient) FindYearlyTransferStatusFailedByCardNumber(ctx context.Context, in *pb.FindYearTransferStatusCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseTransferYearStatusFailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferStatusFailedByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferStatusFailedByCardNumber indicates an expected call of FindYearlyTransferStatusFailedByCardNumber.
func (mr *MockTransferServiceClientMockRecorder) FindYearlyTransferStatusFailedByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferStatusFailedByCardNumber", reflect.TypeOf((*MockTransferServiceClient)(nil).FindYearlyTransferStatusFailedByCardNumber), varargs...)
}

// FindYearlyTransferStatusSuccess mocks base method.
func (m *MockTransferServiceClient) FindYearlyTransferStatusSuccess(ctx context.Context, in *pb.FindYearTransferStatus, opts ...grpc.CallOption) (*pb.ApiResponseTransferYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferStatusSuccess", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferStatusSuccess indicates an expected call of FindYearlyTransferStatusSuccess.
func (mr *MockTransferServiceClientMockRecorder) FindYearlyTransferStatusSuccess(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferStatusSuccess", reflect.TypeOf((*MockTransferServiceClient)(nil).FindYearlyTransferStatusSuccess), varargs...)
}

// FindYearlyTransferStatusSuccessByCardNumber mocks base method.
func (m *MockTransferServiceClient) FindYearlyTransferStatusSuccessByCardNumber(ctx context.Context, in *pb.FindYearTransferStatusCardNumber, opts ...grpc.CallOption) (*pb.ApiResponseTransferYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindYearlyTransferStatusSuccessByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferStatusSuccessByCardNumber indicates an expected call of FindYearlyTransferStatusSuccessByCardNumber.
func (mr *MockTransferServiceClientMockRecorder) FindYearlyTransferStatusSuccessByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferStatusSuccessByCardNumber", reflect.TypeOf((*MockTransferServiceClient)(nil).FindYearlyTransferStatusSuccessByCardNumber), varargs...)
}

// RestoreAllTransfer mocks base method.
func (m *MockTransferServiceClient) RestoreAllTransfer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseTransferAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreAllTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTransfer indicates an expected call of RestoreAllTransfer.
func (mr *MockTransferServiceClientMockRecorder) RestoreAllTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).RestoreAllTransfer), varargs...)
}

// RestoreTransfer mocks base method.
func (m *MockTransferServiceClient) RestoreTransfer(ctx context.Context, in *pb.FindByIdTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransfer indicates an expected call of RestoreTransfer.
func (mr *MockTransferServiceClientMockRecorder) RestoreTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).RestoreTransfer), varargs...)
}

// TrashedTransfer mocks base method.
func (m *MockTransferServiceClient) TrashedTransfer(ctx context.Context, in *pb.FindByIdTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrashedTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransfer indicates an expected call of TrashedTransfer.
func (mr *MockTransferServiceClientMockRecorder) TrashedTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).TrashedTransfer), varargs...)
}

// UpdateTransfer mocks base method.
func (m *MockTransferServiceClient) UpdateTransfer(ctx context.Context, in *pb.UpdateTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransfer indicates an expected call of UpdateTransfer.
func (mr *MockTransferServiceClientMockRecorder) UpdateTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).UpdateTransfer), varargs...)
}

// MockTransferServiceServer is a mock of TransferServiceServer interface.
type MockTransferServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceServerMockRecorder
	isgomock struct{}
}

// MockTransferServiceServerMockRecorder is the mock recorder for MockTransferServiceServer.
type MockTransferServiceServerMockRecorder struct {
	mock *MockTransferServiceServer
}

// NewMockTransferServiceServer creates a new mock instance.
func NewMockTransferServiceServer(ctrl *gomock.Controller) *MockTransferServiceServer {
	mock := &MockTransferServiceServer{ctrl: ctrl}
	mock.recorder = &MockTransferServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferServiceServer) EXPECT() *MockTransferServiceServerMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferServiceServer) CreateTransfer(arg0 context.Context, arg1 *pb.CreateTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferServiceServerMockRecorder) CreateTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).CreateTransfer), arg0, arg1)
}

// DeleteAllTransferPermanent mocks base method.
func (m *MockTransferServiceServer) DeleteAllTransferPermanent(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseTransferAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTransferPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTransferPermanent indicates an expected call of DeleteAllTransferPermanent.
func (mr *MockTransferServiceServerMockRecorder) DeleteAllTransferPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTransferPermanent", reflect.TypeOf((*MockTransferServiceServer)(nil).DeleteAllTransferPermanent), arg0, arg1)
}

// DeleteTransferPermanent mocks base method.
func (m *MockTransferServiceServer) DeleteTransferPermanent(arg0 context.Context, arg1 *pb.FindByIdTransferRequest) (*pb.ApiResponseTransferDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransferPermanent indicates an expected call of DeleteTransferPermanent.
func (mr *MockTransferServiceServerMockRecorder) DeleteTransferPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferPermanent", reflect.TypeOf((*MockTransferServiceServer)(nil).DeleteTransferPermanent), arg0, arg1)
}

// FindAllTransfer mocks base method.
func (m *MockTransferServiceServer) FindAllTransfer(arg0 context.Context, arg1 *pb.FindAllTransferRequest) (*pb.ApiResponsePaginationTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransfer indicates an expected call of FindAllTransfer.
func (mr *MockTransferServiceServerMockRecorder) FindAllTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).FindAllTransfer), arg0, arg1)
}

// FindByActiveTransfer mocks base method.
func (m *MockTransferServiceServer) FindByActiveTransfer(arg0 context.Context, arg1 *pb.FindAllTransferRequest) (*pb.ApiResponsePaginationTransferDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActiveTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransferDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActiveTransfer indicates an expected call of FindByActiveTransfer.
func (mr *MockTransferServiceServerMockRecorder) FindByActiveTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).FindByActiveTransfer), arg0, arg1)
}

// FindByIdTransfer mocks base method.
func (m *MockTransferServiceServer) FindByIdTransfer(arg0 context.Context, arg1 *pb.FindByIdTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdTransfer indicates an expected call of FindByIdTransfer.
func (mr *MockTransferServiceServerMockRecorder) FindByIdTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).FindByIdTransfer), arg0, arg1)
}

// FindByTrashedTransfer mocks base method.
func (m *MockTransferServiceServer) FindByTrashedTransfer(arg0 context.Context, arg1 *pb.FindAllTransferRequest) (*pb.ApiResponsePaginationTransferDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashedTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransferDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashedTransfer indicates an expected call of FindByTrashedTransfer.
func (mr *MockTransferServiceServerMockRecorder) FindByTrashedTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).FindByTrashedTransfer), arg0, arg1)
}

// FindMonthlyTransferAmounts mocks base method.
func (m *MockTransferServiceServer) FindMonthlyTransferAmounts(arg0 context.Context, arg1 *pb.FindYearTransferStatus) (*pb.ApiResponseTransferMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferAmounts", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferAmounts indicates an expected call of FindMonthlyTransferAmounts.
func (mr *MockTransferServiceServerMockRecorder) FindMonthlyTransferAmounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferAmounts", reflect.TypeOf((*MockTransferServiceServer)(nil).FindMonthlyTransferAmounts), arg0, arg1)
}

// FindMonthlyTransferAmountsByReceiverCardNumber mocks base method.
func (m *MockTransferServiceServer) FindMonthlyTransferAmountsByReceiverCardNumber(arg0 context.Context, arg1 *pb.FindByCardNumberTransferRequest) (*pb.ApiResponseTransferMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferAmountsByReceiverCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferAmountsByReceiverCardNumber indicates an expected call of FindMonthlyTransferAmountsByReceiverCardNumber.
func (mr *MockTransferServiceServerMockRecorder) FindMonthlyTransferAmountsByReceiverCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferAmountsByReceiverCardNumber", reflect.TypeOf((*MockTransferServiceServer)(nil).FindMonthlyTransferAmountsByReceiverCardNumber), arg0, arg1)
}

// FindMonthlyTransferAmountsBySenderCardNumber mocks base method.
func (m *MockTransferServiceServer) FindMonthlyTransferAmountsBySenderCardNumber(arg0 context.Context, arg1 *pb.FindByCardNumberTransferRequest) (*pb.ApiResponseTransferMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferAmountsBySenderCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferAmountsBySenderCardNumber indicates an expected call of FindMonthlyTransferAmountsBySenderCardNumber.
func (mr *MockTransferServiceServerMockRecorder) FindMonthlyTransferAmountsBySenderCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferAmountsBySenderCardNumber", reflect.TypeOf((*MockTransferServiceServer)(nil).FindMonthlyTransferAmountsBySenderCardNumber), arg0, arg1)
}

// FindMonthlyTransferStatusFailed mocks base method.
func (m *MockTransferServiceServer) FindMonthlyTransferStatusFailed(arg0 context.Context, arg1 *pb.FindMonthlyTransferStatus) (*pb.ApiResponseTransferMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferStatusFailed", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferStatusFailed indicates an expected call of FindMonthlyTransferStatusFailed.
func (mr *MockTransferServiceServerMockRecorder) FindMonthlyTransferStatusFailed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferStatusFailed", reflect.TypeOf((*MockTransferServiceServer)(nil).FindMonthlyTransferStatusFailed), arg0, arg1)
}

// FindMonthlyTransferStatusFailedByCardNumber mocks base method.
func (m *MockTransferServiceServer) FindMonthlyTransferStatusFailedByCardNumber(arg0 context.Context, arg1 *pb.FindMonthlyTransferStatusCardNumber) (*pb.ApiResponseTransferMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferStatusFailedByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferStatusFailedByCardNumber indicates an expected call of FindMonthlyTransferStatusFailedByCardNumber.
func (mr *MockTransferServiceServerMockRecorder) FindMonthlyTransferStatusFailedByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferStatusFailedByCardNumber", reflect.TypeOf((*MockTransferServiceServer)(nil).FindMonthlyTransferStatusFailedByCardNumber), arg0, arg1)
}

// FindMonthlyTransferStatusSuccess mocks base method.
func (m *MockTransferServiceServer) FindMonthlyTransferStatusSuccess(arg0 context.Context, arg1 *pb.FindMonthlyTransferStatus) (*pb.ApiResponseTransferMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferStatusSuccess", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferStatusSuccess indicates an expected call of FindMonthlyTransferStatusSuccess.
func (mr *MockTransferServiceServerMockRecorder) FindMonthlyTransferStatusSuccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferStatusSuccess", reflect.TypeOf((*MockTransferServiceServer)(nil).FindMonthlyTransferStatusSuccess), arg0, arg1)
}

// FindMonthlyTransferStatusSuccessByCardNumber mocks base method.
func (m *MockTransferServiceServer) FindMonthlyTransferStatusSuccessByCardNumber(arg0 context.Context, arg1 *pb.FindMonthlyTransferStatusCardNumber) (*pb.ApiResponseTransferMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonthlyTransferStatusSuccessByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonthlyTransferStatusSuccessByCardNumber indicates an expected call of FindMonthlyTransferStatusSuccessByCardNumber.
func (mr *MockTransferServiceServerMockRecorder) FindMonthlyTransferStatusSuccessByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonthlyTransferStatusSuccessByCardNumber", reflect.TypeOf((*MockTransferServiceServer)(nil).FindMonthlyTransferStatusSuccessByCardNumber), arg0, arg1)
}

// FindTransferByTransferFrom mocks base method.
func (m *MockTransferServiceServer) FindTransferByTransferFrom(arg0 context.Context, arg1 *pb.FindTransferByTransferFromRequest) (*pb.ApiResponseTransfers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferFrom", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferFrom indicates an expected call of FindTransferByTransferFrom.
func (mr *MockTransferServiceServerMockRecorder) FindTransferByTransferFrom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferFrom", reflect.TypeOf((*MockTransferServiceServer)(nil).FindTransferByTransferFrom), arg0, arg1)
}

// FindTransferByTransferTo mocks base method.
func (m *MockTransferServiceServer) FindTransferByTransferTo(arg0 context.Context, arg1 *pb.FindTransferByTransferToRequest) (*pb.ApiResponseTransfers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferTo", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferTo indicates an expected call of FindTransferByTransferTo.
func (mr *MockTransferServiceServerMockRecorder) FindTransferByTransferTo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferTo", reflect.TypeOf((*MockTransferServiceServer)(nil).FindTransferByTransferTo), arg0, arg1)
}

// FindYearlyTransferAmounts mocks base method.
func (m *MockTransferServiceServer) FindYearlyTransferAmounts(arg0 context.Context, arg1 *pb.FindYearTransferStatus) (*pb.ApiResponseTransferYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferAmounts", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferAmounts indicates an expected call of FindYearlyTransferAmounts.
func (mr *MockTransferServiceServerMockRecorder) FindYearlyTransferAmounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferAmounts", reflect.TypeOf((*MockTransferServiceServer)(nil).FindYearlyTransferAmounts), arg0, arg1)
}

// FindYearlyTransferAmountsByReceiverCardNumber mocks base method.
func (m *MockTransferServiceServer) FindYearlyTransferAmountsByReceiverCardNumber(arg0 context.Context, arg1 *pb.FindByCardNumberTransferRequest) (*pb.ApiResponseTransferYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferAmountsByReceiverCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferAmountsByReceiverCardNumber indicates an expected call of FindYearlyTransferAmountsByReceiverCardNumber.
func (mr *MockTransferServiceServerMockRecorder) FindYearlyTransferAmountsByReceiverCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferAmountsByReceiverCardNumber", reflect.TypeOf((*MockTransferServiceServer)(nil).FindYearlyTransferAmountsByReceiverCardNumber), arg0, arg1)
}

// FindYearlyTransferAmountsBySenderCardNumber mocks base method.
func (m *MockTransferServiceServer) FindYearlyTransferAmountsBySenderCardNumber(arg0 context.Context, arg1 *pb.FindByCardNumberTransferRequest) (*pb.ApiResponseTransferYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferAmountsBySenderCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferAmountsBySenderCardNumber indicates an expected call of FindYearlyTransferAmountsBySenderCardNumber.
func (mr *MockTransferServiceServerMockRecorder) FindYearlyTransferAmountsBySenderCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferAmountsBySenderCardNumber", reflect.TypeOf((*MockTransferServiceServer)(nil).FindYearlyTransferAmountsBySenderCardNumber), arg0, arg1)
}

// FindYearlyTransferStatusFailed mocks base method.
func (m *MockTransferServiceServer) FindYearlyTransferStatusFailed(arg0 context.Context, arg1 *pb.FindYearTransferStatus) (*pb.ApiResponseTransferYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferStatusFailed", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferStatusFailed indicates an expected call of FindYearlyTransferStatusFailed.
func (mr *MockTransferServiceServerMockRecorder) FindYearlyTransferStatusFailed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferStatusFailed", reflect.TypeOf((*MockTransferServiceServer)(nil).FindYearlyTransferStatusFailed), arg0, arg1)
}

// FindYearlyTransferStatusFailedByCardNumber mocks base method.
func (m *MockTransferServiceServer) FindYearlyTransferStatusFailedByCardNumber(arg0 context.Context, arg1 *pb.FindYearTransferStatusCardNumber) (*pb.ApiResponseTransferYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferStatusFailedByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferStatusFailedByCardNumber indicates an expected call of FindYearlyTransferStatusFailedByCardNumber.
func (mr *MockTransferServiceServerMockRecorder) FindYearlyTransferStatusFailedByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferStatusFailedByCardNumber", reflect.TypeOf((*MockTransferServiceServer)(nil).FindYearlyTransferStatusFailedByCardNumber), arg0, arg1)
}

// FindYearlyTransferStatusSuccess mocks base method.
func (m *MockTransferServiceServer) FindYearlyTransferStatusSuccess(arg0 context.Context, arg1 *pb.FindYearTransferStatus) (*pb.ApiResponseTransferYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferStatusSuccess", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferStatusSuccess indicates an expected call of FindYearlyTransferStatusSuccess.
func (mr *MockTransferServiceServerMockRecorder) FindYearlyTransferStatusSuccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferStatusSuccess", reflect.TypeOf((*MockTransferServiceServer)(nil).FindYearlyTransferStatusSuccess), arg0, arg1)
}

// FindYearlyTransferStatusSuccessByCardNumber mocks base method.
func (m *MockTransferServiceServer) FindYearlyTransferStatusSuccessByCardNumber(arg0 context.Context, arg1 *pb.FindYearTransferStatusCardNumber) (*pb.ApiResponseTransferYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindYearlyTransferStatusSuccessByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindYearlyTransferStatusSuccessByCardNumber indicates an expected call of FindYearlyTransferStatusSuccessByCardNumber.
func (mr *MockTransferServiceServerMockRecorder) FindYearlyTransferStatusSuccessByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindYearlyTransferStatusSuccessByCardNumber", reflect.TypeOf((*MockTransferServiceServer)(nil).FindYearlyTransferStatusSuccessByCardNumber), arg0, arg1)
}

// RestoreAllTransfer mocks base method.
func (m *MockTransferServiceServer) RestoreAllTransfer(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseTransferAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTransfer indicates an expected call of RestoreAllTransfer.
func (mr *MockTransferServiceServerMockRecorder) RestoreAllTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).RestoreAllTransfer), arg0, arg1)
}

// RestoreTransfer mocks base method.
func (m *MockTransferServiceServer) RestoreTransfer(arg0 context.Context, arg1 *pb.FindByIdTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransfer indicates an expected call of RestoreTransfer.
func (mr *MockTransferServiceServerMockRecorder) RestoreTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).RestoreTransfer), arg0, arg1)
}

// TrashedTransfer mocks base method.
func (m *MockTransferServiceServer) TrashedTransfer(arg0 context.Context, arg1 *pb.FindByIdTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransfer indicates an expected call of TrashedTransfer.
func (mr *MockTransferServiceServerMockRecorder) TrashedTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).TrashedTransfer), arg0, arg1)
}

// UpdateTransfer mocks base method.
func (m *MockTransferServiceServer) UpdateTransfer(arg0 context.Context, arg1 *pb.UpdateTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransfer indicates an expected call of UpdateTransfer.
func (mr *MockTransferServiceServerMockRecorder) UpdateTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).UpdateTransfer), arg0, arg1)
}

// mustEmbedUnimplementedTransferServiceServer mocks base method.
func (m *MockTransferServiceServer) mustEmbedUnimplementedTransferServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTransferServiceServer")
}

// mustEmbedUnimplementedTransferServiceServer indicates an expected call of mustEmbedUnimplementedTransferServiceServer.
func (mr *MockTransferServiceServerMockRecorder) mustEmbedUnimplementedTransferServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTransferServiceServer", reflect.TypeOf((*MockTransferServiceServer)(nil).mustEmbedUnimplementedTransferServiceServer))
}

// MockUnsafeTransferServiceServer is a mock of UnsafeTransferServiceServer interface.
type MockUnsafeTransferServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTransferServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeTransferServiceServerMockRecorder is the mock recorder for MockUnsafeTransferServiceServer.
type MockUnsafeTransferServiceServerMockRecorder struct {
	mock *MockUnsafeTransferServiceServer
}

// NewMockUnsafeTransferServiceServer creates a new mock instance.
func NewMockUnsafeTransferServiceServer(ctrl *gomock.Controller) *MockUnsafeTransferServiceServer {
	mock := &MockUnsafeTransferServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTransferServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTransferServiceServer) EXPECT() *MockUnsafeTransferServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTransferServiceServer mocks base method.
func (m *MockUnsafeTransferServiceServer) mustEmbedUnimplementedTransferServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTransferServiceServer")
}

// mustEmbedUnimplementedTransferServiceServer indicates an expected call of mustEmbedUnimplementedTransferServiceServer.
func (mr *MockUnsafeTransferServiceServerMockRecorder) mustEmbedUnimplementedTransferServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTransferServiceServer", reflect.TypeOf((*MockUnsafeTransferServiceServer)(nil).mustEmbedUnimplementedTransferServiceServer))
}
